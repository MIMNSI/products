!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("three")):"function"==typeof define&&define.amd?define(["exports","three"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["Gaussian Splats 3D"]=e["Gaussian Splats 3D"]||{},e.THREE)}(this,(function(e,t){"use strict";function n(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var s=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,s.get?s:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var s=n(t);class r{static idGen=0;constructor(e,t){let n,s;this.promise=new Promise(((e,t)=>{n=e.bind(this),s=t.bind(this)}));e(((...e)=>{n(...e)}).bind(this),(e=>{s(e)}).bind(this)),this.abortHandler=t,this.id=r.idGen++}then(e){return new r(((t,n)=>{this.promise=this.promise.then(((...n)=>{const s=e(...n);s instanceof Promise||s instanceof r?s.then(((...e)=>{t(...e)})):t(s)})).catch((e=>{n(e)}))}),this.abortHandler)}catch(e){return new r((t=>{this.promise=this.promise.then(((...e)=>{t(...e)})).catch(e)}),this.abortHandler)}abort(){this.abortHandler&&this.abortHandler()}}class i extends Error{constructor(e){super(e)}}!function(){const e=new Float32Array(1),t=new Int32Array(e.buffer)}();const o=function(){const e=new Float32Array(1),t=new Int32Array(e.buffer);return function(n){return e[0]=n,t[0]}}(),a=function(e,t,n=!0){const s=new AbortController,o=s.signal;let a=!1,l=null;return new r(((s,r)=>{l=r,fetch(e,{signal:o}).then((async e=>{const i=e.body.getReader();let o=0,l=e.headers.get("Content-Length"),c=l?parseInt(l):void 0;const h=[];for(;!a;)try{const{value:e,done:r}=await i.read();if(r){if(t&&t(100,"100%",e,c),n){const e=new Blob(h).arrayBuffer();s(e)}else s();break}let a,l;if(o+=e.length,void 0!==c&&(a=o/c*100,l=`${a.toFixed(2)}%`),n&&h.push(e),t){t(a,l,e,c)&&(n=!1)}}catch(e){r(e);break}}))}),(()=>{s.abort(),l(new i("Fetch aborted.")),a=!0}))},l=function(e,t,n){return Math.max(Math.min(e,n),t)},c=function(){return performance.now()/1e3},h=e=>{if(e.geometry&&(e.geometry.dispose(),e.geometry=null),e.material&&(e.material.dispose(),e.material=null),e.children)for(let t of e.children)h(t)},d=(e,t)=>new Promise((n=>{window.setTimeout((()=>{n(e())}),t?1:50)})),p=(e=0)=>{switch(e){case 1:return 9;case 2:return 24}return 0};class u{static OFFSET={X:0,Y:1,Z:2,SCALE0:3,SCALE1:4,SCALE2:5,ROTATION0:6,ROTATION1:7,ROTATION2:8,ROTATION3:9,FDC0:10,FDC1:11,FDC2:12,OPACITY:13,FRC0:14,FRC1:15,FRC2:16,FRC3:17,FRC4:18,FRC5:19,FRC6:20,FRC7:21,FRC8:22,FRC9:23,FRC10:24,FRC11:25,FRC12:26,FRC13:27,FRC14:28,FRC15:29,FRC16:30,FRC17:31,FRC18:32,FRC19:33,FRC20:34,FRC21:35,FRC22:36,FRC23:37};constructor(e=0){this.sphericalHarmonicsDegree=e,this.sphericalHarmonicsCount=p(this.sphericalHarmonicsDegree),this.componentCount=this.sphericalHarmonicsCount+14,this.defaultSphericalHarmonics=new Array(this.sphericalHarmonicsCount).fill(0),this.splats=[],this.splatCount=0}static createSplat(e=0){const t=[0,0,0,1,1,1,1,0,0,0,0,0,0,0];let n=p(e);for(let e=0;e<n;e++)t.push(0);return t}addSplat(e){this.splats.push(e),this.splatCount++}getSplat(e){return this.splats[e]}addDefaultSplat(){const e=u.createSplat(this.sphericalHarmonicsDegree);return this.addSplat(e),e}addSplatFromComonents(e,t,n,s,r,i,o,a,l,c,h,d,p,u,...m){const f=[e,t,n,s,r,i,o,a,l,c,h,d,p,u,...this.defaultSphericalHarmonics];for(let e=0;e<m.length&&e<this.sphericalHarmonicsCount;e++)f[e]=m[e];return this.addSplat(f),f}addSplatFromArray(e,t){const n=e.splats[t],s=u.createSplat(this.sphericalHarmonicsDegree);for(let e=0;e<this.componentCount&&e<n.length;e++)s[e]=n[e];this.addSplat(s)}}class m{static DepthMapRange=65536;static MemoryPageSize=65536;static BytesPerFloat=4;static BytesPerInt=4;static MaxScenes=32;static StreamingSectionSize=524288;static SphericalHarmonics8BitCompressionRange=3}const f=m.SphericalHarmonics8BitCompressionRange/2,g=s.DataUtils.toHalfFloat.bind(s.DataUtils),S=e=>(e=l(e,-f,f),l(Math.floor(255*(e*(.5/f)+.5)),0,255)),y=s.DataUtils.fromHalfFloat.bind(s.DataUtils),C=e=>S(y(e)),A=(e,t,n=!1)=>0===t?e:1===t||2===t&&!n?s.DataUtils.fromHalfFloat(e):2===t?e/255*m.SphericalHarmonics8BitCompressionRange-f:void 0,x=(e,t,n,s=!1)=>0===n?e.getFloat32(4*t,!0):1===n||2===n&&!s?e.getUint16(2*t,!0):e.getUint8(t,!0);class v{static CurrentMajorVersion=0;static CurrentMinorVersion=1;static CenterComponentCount=3;static ScaleComponentCount=3;static RotationComponentCount=4;static ColorComponentCount=4;static CovarianceComponentCount=6;static SplatScaleOffsetFloat=3;static SplatRotationOffsetFloat=6;static CompressionLevels={0:{BytesPerCenter:12,BytesPerScale:12,BytesPerRotation:16,BytesPerColor:4,ScaleOffsetBytes:12,RotationffsetBytes:24,ColorOffsetBytes:40,SphericalHarmonicsOffsetBytes:44,ScaleRange:1,BytesPerSphericalHarmonicsComponent:4,SphericalHarmonicsOffsetFloat:11,SphericalHarmonicsDegrees:{0:{BytesPerSplat:44},1:{BytesPerSplat:80},2:{BytesPerSplat:140}}},1:{BytesPerCenter:6,BytesPerScale:6,BytesPerRotation:8,BytesPerColor:4,ScaleOffsetBytes:6,RotationffsetBytes:12,ColorOffsetBytes:20,SphericalHarmonicsOffsetBytes:24,ScaleRange:32767,BytesPerSphericalHarmonicsComponent:2,SphericalHarmonicsOffsetFloat:12,SphericalHarmonicsDegrees:{0:{BytesPerSplat:24},1:{BytesPerSplat:42},2:{BytesPerSplat:72}}},2:{BytesPerCenter:6,BytesPerScale:6,BytesPerRotation:8,BytesPerColor:4,ScaleOffsetBytes:6,RotationffsetBytes:12,ColorOffsetBytes:20,SphericalHarmonicsOffsetBytes:24,ScaleRange:32767,BytesPerSphericalHarmonicsComponent:1,SphericalHarmonicsOffsetFloat:12,SphericalHarmonicsDegrees:{0:{BytesPerSplat:24},1:{BytesPerSplat:33},2:{BytesPerSplat:48}}}};static CovarianceSizeFloats=6;static HeaderSizeBytes=4096;static SectionHeaderSizeBytes=1024;static BucketStorageSizeBytes=12;static BucketStorageSizeFloats=3;static BucketBlockSize=5;static BucketSize=256;constructor(e,t=!0){this.constructFromBuffer(e,t)}getSplatCount(){return this.splatCount}getMaxSplatCount(){return this.maxSplatCount}getMinSphericalHarmonicsDegree(){let e=0;for(let t=0;t<this.sections.length;t++){const n=this.sections[t];(0===t||n.sphericalHarmonicsDegree<e)&&(e=n.sphericalHarmonicsDegree)}return e}getBucketIndex(e,t){let n;const s=e.fullBucketCount*e.bucketSize;if(t<s)n=Math.floor(t/e.bucketSize);else{let r=s;n=e.fullBucketCount;let i=0;for(;r<e.splatCount;){let s=e.partiallyFilledBucketLengths[i];if(t>=r&&t<r+s)break;r+=s,n++,i++}}return n}getSplatCenter(e,t,n){const s=this.globalSplatIndexToSectionMap[e],r=this.sections[s],i=e-r.splatCountOffset,o=r.bytesPerSplat*i,a=new DataView(this.bufferData,r.dataBase+o),l=x(a,0,this.compressionLevel),c=x(a,1,this.compressionLevel),h=x(a,2,this.compressionLevel);if(this.compressionLevel>=1){const e=this.getBucketIndex(r,i)*v.BucketStorageSizeFloats,n=r.compressionScaleFactor,s=r.compressionScaleRange;t.x=(l-s)*n+r.bucketArray[e],t.y=(c-s)*n+r.bucketArray[e+1],t.z=(h-s)*n+r.bucketArray[e+2]}else t.x=l,t.y=c,t.z=h;n&&t.applyMatrix4(n)}getSplatScaleAndRotation=function(){const e=new s.Matrix4,t=new s.Matrix4,n=new s.Matrix4,r=new s.Vector3,i=new s.Vector3,o=new s.Quaternion;return function(s,a,l,c){const h=this.globalSplatIndexToSectionMap[s],d=this.sections[h],p=s-d.splatCountOffset,u=d.bytesPerSplat*p+v.CompressionLevels[this.compressionLevel].ScaleOffsetBytes,m=new DataView(this.bufferData,d.dataBase+u);i.set(A(x(m,0,this.compressionLevel),this.compressionLevel),A(x(m,1,this.compressionLevel),this.compressionLevel),A(x(m,2,this.compressionLevel),this.compressionLevel)),o.set(A(x(m,4,this.compressionLevel),this.compressionLevel),A(x(m,5,this.compressionLevel),this.compressionLevel),A(x(m,6,this.compressionLevel),this.compressionLevel),A(x(m,3,this.compressionLevel),this.compressionLevel)),c?(e.makeScale(i.x,i.y,i.z),t.makeRotationFromQuaternion(o),n.copy(e).multiply(t).multiply(c),n.decompose(r,l,a)):(a.copy(i),l.copy(o))}}();getSplatColor(e,t){const n=this.globalSplatIndexToSectionMap[e],s=this.sections[n],r=e-s.splatCountOffset,i=s.bytesPerSplat*r+v.CompressionLevels[this.compressionLevel].ColorOffsetBytes,o=new Uint8Array(this.bufferData,s.dataBase+i,4);t.set(o[0],o[1],o[2],o[3])}fillSplatCenterArray(e,t,n,r,i){const o=this.splatCount;n=n||0,r=r||o-1,void 0===i&&(i=n);const a=new s.Vector3;for(let s=n;s<=r;s++){const r=this.globalSplatIndexToSectionMap[s],o=this.sections[r],l=s-o.splatCountOffset,c=(s-n+i)*v.CenterComponentCount,h=o.bytesPerSplat*l,d=new DataView(this.bufferData,o.dataBase+h),p=x(d,0,this.compressionLevel),u=x(d,1,this.compressionLevel),m=x(d,2,this.compressionLevel);if(this.compressionLevel>=1){const e=this.getBucketIndex(o,l)*v.BucketStorageSizeFloats,t=o.compressionScaleFactor,n=o.compressionScaleRange;a.x=(p-n)*t+o.bucketArray[e],a.y=(u-n)*t+o.bucketArray[e+1],a.z=(m-n)*t+o.bucketArray[e+2]}else a.x=p,a.y=u,a.z=m;t&&a.applyMatrix4(t),e[c]=a.x,e[c+1]=a.y,e[c+2]=a.z}}static computeCovariance=function(){const e=new s.Matrix4,t=new s.Matrix3,n=new s.Matrix3,r=new s.Matrix3,i=new s.Matrix3,o=new s.Matrix3,a=new s.Matrix3;return function(s,l,c,h,d=0,p){e.makeScale(s.x,s.y,s.z),t.setFromMatrix4(e),e.makeRotationFromQuaternion(l),n.setFromMatrix4(e),r.copy(n).multiply(t),i.copy(r).transpose().premultiply(r),c&&(o.setFromMatrix4(c),a.copy(o).transpose(),i.multiply(a),i.premultiply(o)),p>=1?(h[d]=g(i.elements[0]),h[d+1]=g(i.elements[3]),h[d+2]=g(i.elements[6]),h[d+3]=g(i.elements[4]),h[d+4]=g(i.elements[7]),h[d+5]=g(i.elements[8])):(h[d]=i.elements[0],h[d+1]=i.elements[3],h[d+2]=i.elements[6],h[d+3]=i.elements[4],h[d+4]=i.elements[7],h[d+5]=i.elements[8])}}();fillSplatCovarianceArray(e,t,n,r,i,o){const a=this.splatCount,l=new s.Vector3,c=new s.Quaternion;n=n||0,r=r||a-1,void 0===i&&(i=n);for(let s=n;s<=r;s++){const r=this.globalSplatIndexToSectionMap[s],a=this.sections[r],h=s-a.splatCountOffset,d=(s-n+i)*v.CovarianceComponentCount,p=a.bytesPerSplat*h+v.CompressionLevels[this.compressionLevel].ScaleOffsetBytes,u=new DataView(this.bufferData,a.dataBase+p);l.set(A(x(u,0,this.compressionLevel),this.compressionLevel),A(x(u,1,this.compressionLevel),this.compressionLevel),A(x(u,2,this.compressionLevel),this.compressionLevel)),c.set(A(x(u,4,this.compressionLevel),this.compressionLevel),A(x(u,5,this.compressionLevel),this.compressionLevel),A(x(u,6,this.compressionLevel),this.compressionLevel),A(x(u,3,this.compressionLevel),this.compressionLevel)),v.computeCovariance(l,c,t,e,d,o)}}fillSplatColorArray(e,t,n,s,r){const i=this.splatCount;n=n||0,s=s||i-1,void 0===r&&(r=n);for(let i=n;i<=s;i++){const s=this.globalSplatIndexToSectionMap[i],o=this.sections[s],a=i-o.splatCountOffset,l=(i-n+r)*v.ColorComponentCount,c=o.bytesPerSplat*a+v.CompressionLevels[this.compressionLevel].ColorOffsetBytes,h=new Uint8Array(this.bufferData,o.dataBase+c);let d=h[3];d=d>=t?d:0,e[l]=h[0],e[l+1]=h[1],e[l+2]=h[2],e[l+3]=d}}fillSphericalHarmonicsArray=function(){const e=[];for(let t=0;t<15;t++)e[t]=new s.Vector3;const t=new s.Matrix3,n=[],r=[],i=[],o=[],a=[],l=[],c=[],h=[],d=[],u=[],m=[],f=[],b=[],w=[],T=[],F=[],B=[],M=[],E=e=>e,D=(e,t,n,s)=>{e[0]=t,e[1]=n,e[2]=s},P=(e,t,n,s,r)=>{e[0]=x(t,s,r,!0),e[1]=x(t,s+n,r,!0),e[2]=x(t,s+n+n,r,!0)},R=(e,t)=>{t[0]=e[0],t[1]=e[1],t[2]=e[2]},I=(e,t,n,s)=>{t[n]=s(e[0]),t[n+1]=s(e[1]),t[n+2]=s(e[2])},k=(e,t,n)=>(t[0]=A(e[0],n,!0),t[1]=A(e[1],n,!0),t[2]=A(e[2],n,!0),t);return function(e,s,A,x,O,L,H){const z=this.splatCount;x=x||0,O=O||z-1,void 0===L&&(L=x),A&&s>=1&&(t.setFromMatrix4(A),D(n,t.elements[4],-t.elements[7],t.elements[1]),D(r,-t.elements[5],t.elements[8],-t.elements[2]),D(i,t.elements[3],-t.elements[6],t.elements[0]));for(let t=x;t<=O;t++){const D=this.globalSplatIndexToSectionMap[t],O=this.sections[D];s=Math.min(s,O.sphericalHarmonicsDegree);const z=p(s),_=t-O.splatCountOffset,U=O.bytesPerSplat*_+v.CompressionLevels[this.compressionLevel].SphericalHarmonicsOffsetBytes,V=new DataView(this.bufferData,O.dataBase+U),N=(t-x+L)*z;let W=A?0:this.compressionLevel,j=E;W!==H&&(1===W?0===H?j=y:2==H&&(j=C):0===W&&(1===H?j=g:2==H&&(j=S))),s>=1&&(P(d,V,3,0,this.compressionLevel),P(u,V,3,1,this.compressionLevel),P(m,V,3,2,this.compressionLevel),A?(k(d,d,this.compressionLevel),k(u,u,this.compressionLevel),k(m,m,this.compressionLevel),v.rotateSphericalHarmonics3(d,u,m,n,r,i,w,T,F)):(R(d,w),R(u,T),R(m,F)),I(w,e,N,j),I(T,e,N+3,j),I(F,e,N+6,j),s>=2&&(P(d,V,5,9,this.compressionLevel),P(u,V,5,10,this.compressionLevel),P(m,V,5,11,this.compressionLevel),P(f,V,5,12,this.compressionLevel),P(b,V,5,13,this.compressionLevel),A?(k(d,d,this.compressionLevel),k(u,u,this.compressionLevel),k(m,m,this.compressionLevel),k(f,f,this.compressionLevel),k(b,b,this.compressionLevel),v.rotateSphericalHarmonics5(d,u,m,f,b,n,r,i,o,a,l,c,h,w,T,F,B,M)):(R(d,w),R(u,T),R(m,F),R(f,B),R(b,M)),I(w,e,N+9,j),I(T,e,N+12,j),I(F,e,N+15,j),I(B,e,N+18,j),I(M,e,N+21,j)))}}}();static dot3=(e,t,n,s,r)=>{r[0]=r[1]=r[2]=0;const i=s[0],o=s[1],a=s[2];v.addInto3(e[0]*i,e[1]*i,e[2]*i,r),v.addInto3(t[0]*o,t[1]*o,t[2]*o,r),v.addInto3(n[0]*a,n[1]*a,n[2]*a,r)};static addInto3=(e,t,n,s)=>{s[0]=s[0]+e,s[1]=s[1]+t,s[2]=s[2]+n};static dot5=(e,t,n,s,r,i,o)=>{o[0]=o[1]=o[2]=0;const a=i[0],l=i[1],c=i[2],h=i[3],d=i[4];v.addInto3(e[0]*a,e[1]*a,e[2]*a,o),v.addInto3(t[0]*l,t[1]*l,t[2]*l,o),v.addInto3(n[0]*c,n[1]*c,n[2]*c,o),v.addInto3(s[0]*h,s[1]*h,s[2]*h,o),v.addInto3(r[0]*d,r[1]*d,r[2]*d,o)};static rotateSphericalHarmonics3=(e,t,n,s,r,i,o,a,l)=>{v.dot3(e,t,n,s,o),v.dot3(e,t,n,r,a),v.dot3(e,t,n,i,l)};static rotateSphericalHarmonics5=(e,t,n,s,r,i,o,a,l,c,h,d,p,u,m,f,g,S)=>{const y=Math.sqrt(1/4),C=Math.sqrt(3/4),A=Math.sqrt(1/3),x=Math.sqrt(4/3),b=Math.sqrt(1/12);l[0]=y*(a[2]*i[0]+a[0]*i[2]+(i[2]*a[0]+i[0]*a[2])),l[1]=a[1]*i[0]+i[1]*a[0],l[2]=C*(a[1]*i[1]+i[1]*a[1]),l[3]=a[1]*i[2]+i[1]*a[2],l[4]=y*(a[2]*i[2]-a[0]*i[0]+(i[2]*a[2]-i[0]*a[0])),v.dot5(e,t,n,s,r,l,u),c[0]=y*(o[2]*i[0]+o[0]*i[2]+(i[2]*o[0]+i[0]*o[2])),c[1]=o[1]*i[0]+i[1]*o[0],c[2]=C*(o[1]*i[1]+i[1]*o[1]),c[3]=o[1]*i[2]+i[1]*o[2],c[4]=y*(o[2]*i[2]-o[0]*i[0]+(i[2]*o[2]-i[0]*o[0])),v.dot5(e,t,n,s,r,c,m),h[0]=A*(o[2]*o[0]+o[0]*o[2])+-b*(a[2]*a[0]+a[0]*a[2]+(i[2]*i[0]+i[0]*i[2])),h[1]=x*o[1]*o[0]+-A*(a[1]*a[0]+i[1]*i[0]),h[2]=o[1]*o[1]+-y*(a[1]*a[1]+i[1]*i[1]),h[3]=x*o[1]*o[2]+-A*(a[1]*a[2]+i[1]*i[2]),h[4]=A*(o[2]*o[2]-o[0]*o[0])+-b*(a[2]*a[2]-a[0]*a[0]+(i[2]*i[2]-i[0]*i[0])),v.dot5(e,t,n,s,r,h,f),d[0]=y*(o[2]*a[0]+o[0]*a[2]+(a[2]*o[0]+a[0]*o[2])),d[1]=o[1]*a[0]+a[1]*o[0],d[2]=C*(o[1]*a[1]+a[1]*o[1]),d[3]=o[1]*a[2]+a[1]*o[2],d[4]=y*(o[2]*a[2]-o[0]*a[0]+(a[2]*o[2]-a[0]*o[0])),v.dot5(e,t,n,s,r,d,g),p[0]=y*(a[2]*a[0]+a[0]*a[2]-(i[2]*i[0]+i[0]*i[2])),p[1]=a[1]*a[0]-i[1]*i[0],p[2]=C*(a[1]*a[1]-i[1]*i[1]),p[3]=a[1]*a[2]-i[1]*i[2],p[4]=y*(a[2]*a[2]-a[0]*a[0]-(i[2]*i[2]-i[0]*i[0])),v.dot5(e,t,n,s,r,p,S)};static parseHeader(e){const t=new Uint8Array(e,0,v.HeaderSizeBytes),n=new Uint16Array(e,0,v.HeaderSizeBytes/2),r=new Uint32Array(e,0,v.HeaderSizeBytes/4),i=new Float32Array(e,0,v.HeaderSizeBytes/4);return{versionMajor:t[0],versionMinor:t[1],maxSectionCount:r[1],sectionCount:r[2],maxSplatCount:r[3],splatCount:r[4],compressionLevel:n[10],sceneCenter:new s.Vector3(i[6],i[7],i[8])}}static writeHeaderCountsToBuffer(e,t,n){const s=new Uint32Array(n,0,v.HeaderSizeBytes/4);s[2]=e,s[4]=t}static writeHeaderToBuffer(e,t){const n=new Uint8Array(t,0,v.HeaderSizeBytes),s=new Uint16Array(t,0,v.HeaderSizeBytes/2),r=new Uint32Array(t,0,v.HeaderSizeBytes/4),i=new Float32Array(t,0,v.HeaderSizeBytes/4);n[0]=e.versionMajor,n[1]=e.versionMinor,n[2]=0,n[3]=0,r[1]=e.maxSectionCount,r[2]=e.sectionCount,r[3]=e.maxSplatCount,r[4]=e.splatCount,s[10]=e.compressionLevel,i[6]=e.sceneCenter.x,i[7]=e.sceneCenter.y,i[8]=e.sceneCenter.z}static parseSectionHeaders(e,t,n=0,s){const r=e.compressionLevel,i=e.maxSectionCount,o=new Uint16Array(t,n,i*v.SectionHeaderSizeBytes/2),a=new Uint32Array(t,n,i*v.SectionHeaderSizeBytes/4),l=new Float32Array(t,n,i*v.SectionHeaderSizeBytes/4),c=[];let h=0,d=h/2,p=h/4,u=v.HeaderSizeBytes+e.maxSectionCount*v.SectionHeaderSizeBytes,m=0;for(let e=0;e<i;e++){const t=a[p+1],n=a[p+2],i=a[p+3],f=l[p+4],g=f/2,S=o[d+10],y=a[p+6]||v.CompressionLevels[r].ScaleRange,C=a[p+8],A=a[p+9],x=4*A,b=S*i+x,w=o[d+20],{bytesPerSplat:T}=v.calculateComponentStorage(r,w),F=T*t,B=F+b,M={bytesPerSplat:T,splatCountOffset:m,splatCount:s?t:0,maxSplatCount:t,bucketSize:n,bucketCount:i,bucketBlockSize:f,halfBucketBlockSize:g,bucketStorageSizeBytes:S,bucketsStorageSizeBytes:b,splatDataStorageSizeBytes:F,storageSizeBytes:B,compressionScaleRange:y,compressionScaleFactor:g/y,base:u,bucketsBase:u+x,dataBase:u+b,fullBucketCount:C,partiallyFilledBucketCount:A,sphericalHarmonicsDegree:w};c[e]=M,u+=B,h+=v.SectionHeaderSizeBytes,d=h/2,p=h/4,m+=t}return c}static writeSectionHeaderToBuffer(e,t,n,s=0){const r=new Uint16Array(n,s,v.SectionHeaderSizeBytes/2),i=new Uint32Array(n,s,v.SectionHeaderSizeBytes/4),o=new Float32Array(n,s,v.SectionHeaderSizeBytes/4);i[0]=e.splatCount,i[1]=e.maxSplatCount,i[2]=t>=1?e.bucketSize:0,i[3]=t>=1?e.bucketCount:0,o[4]=t>=1?e.bucketBlockSize:0,r[10]=t>=1?v.BucketStorageSizeBytes:0,i[6]=t>=1?e.compressionScaleRange:0,i[7]=e.storageSizeBytes,i[8]=t>=1?e.fullBucketCount:0,i[9]=t>=1?e.partiallyFilledBucketCount:0,r[20]=e.sphericalHarmonicsDegree}static writeSectionHeaderSplatCountToBuffer(e,t,n=0){new Uint32Array(t,n,v.SectionHeaderSizeBytes/4)[0]=e}constructFromBuffer(e,t){this.bufferData=e,this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSectionMap=[];const n=v.parseHeader(this.bufferData);this.versionMajor=n.versionMajor,this.versionMinor=n.versionMinor,this.maxSectionCount=n.maxSectionCount,this.sectionCount=t?n.maxSectionCount:0,this.maxSplatCount=n.maxSplatCount,this.splatCount=t?n.maxSplatCount:0,this.compressionLevel=n.compressionLevel,this.sceneCenter=(new s.Vector3).copy(n.sceneCenter),this.sections=v.parseSectionHeaders(n,this.bufferData,v.HeaderSizeBytes,t),this.linkBufferArrays(),this.buildMaps()}static calculateComponentStorage(e,t){const n=v.CompressionLevels[e].BytesPerCenter,s=v.CompressionLevels[e].BytesPerScale,r=v.CompressionLevels[e].BytesPerRotation,i=v.CompressionLevels[e].BytesPerColor,o=p(t),a=v.CompressionLevels[e].BytesPerSphericalHarmonicsComponent*o;return{bytesPerCenter:n,bytesPerScale:s,bytesPerRotation:r,bytesPerColor:i,sphericalHarmonicsComponentsPerSplat:o,sphericalHarmonicsBytesPerSplat:a,bytesPerSplat:n+s+r+i+a}}linkBufferArrays(){for(let e=0;e<this.maxSectionCount;e++){const t=this.sections[e];t.bucketArray=new Float32Array(this.bufferData,t.bucketsBase,t.bucketCount*v.BucketStorageSizeFloats),t.partiallyFilledBucketCount>0&&(t.partiallyFilledBucketLengths=new Uint32Array(this.bufferData,t.base,t.partiallyFilledBucketCount))}}buildMaps(){let e=0;for(let t=0;t<this.maxSectionCount;t++){const n=this.sections[t];for(let s=0;s<n.maxSplatCount;s++){const n=e+s;this.globalSplatIndexToLocalSplatIndexMap[n]=s,this.globalSplatIndexToSectionMap[n]=t}e+=n.maxSplatCount}}updateLoadedCounts(e,t){v.writeHeaderCountsToBuffer(e,t,this.bufferData),this.sectionCount=e,this.splatCount=t}updateSectionLoadedCounts(e,t){const n=v.HeaderSizeBytes+v.SectionHeaderSizeBytes*e;v.writeSectionHeaderSplatCountToBuffer(t,this.bufferData,n),this.sections[e].splatCount=t}static generateFromUncompressedSplatArrays(e,t,n,r,i,o,a=[]){const c=(e,t,n,s,r=0)=>{const i=new Uint8Array(e,t),o=new Uint8Array(n,s);for(let e=0;e<r;e++)o[e]=i[e]};let h=0;for(let t=0;t<e.length;t++){const n=e[t];if(0===t||n.sphericalHarmonicsDegree<h){if(t>0&&n.sphericalHarmonicsDegree!==h){throw new Error("SplatBuffer::generateFromUncompressedSplatArrays() -> all splat arrays must have the same spherical harmonics degree.")}h=n.sphericalHarmonicsDegree}}const{bytesPerCenter:d,bytesPerScale:p,bytesPerRotation:m,bytesPerColor:f,sphericalHarmonicsComponentsPerSplat:y,sphericalHarmonicsBytesPerSplat:C,bytesPerSplat:A}=v.calculateComponentStorage(n,h),x=v.CompressionLevels[n].ScaleRange,b=[],w=[];let T=0;const F=new s.Quaternion;for(let r=0;r<e.length;r++){const B=e[r],M=a[r]||{},E=(M.blockSizeFactor||1)*(i||v.BucketBlockSize),D=Math.ceil((M.bucketSizeFactor||1)*(o||v.BucketSize)),P=new u(h);for(let e=0;e<B.splatCount;e++){const n=B.splats[e];let s;s=n[u.OFFSET.OPACITY]?n[u.OFFSET.OPACITY]:255,s>=t&&P.addSplat(n)}const R=v.computeBucketsForUncompressedSplatArray(P,E,D),I=R.fullBuckets.length,k=R.partiallyFullBuckets.map((e=>e.splats.length)),O=k.length,L=[...R.fullBuckets,...R.partiallyFullBuckets],H=P.splats.length*A,z=4*O,_=n>=1?L.length*v.BucketStorageSizeBytes+z:0,U=H+_,V=new ArrayBuffer(U),N=x/(E/2),W=2*x+1,j=new ArrayBuffer(d),G=new ArrayBuffer(p),Q=new ArrayBuffer(m),X=new ArrayBuffer(f),Y=new ArrayBuffer(C),K=new s.Vector3,q=new s.Vector3;let Z=0;for(let e=0;e<L.length;e++){const t=L[e];K.fromArray(t.center);for(let e=0;e<t.splats.length;e++){let s=t.splats[e];const r=P.splats[s],i=_+Z*A,o=i+d,a=o+p,C=a+m,b=C+f;if(0===n){const e=new Float32Array(V,i,v.CenterComponentCount),t=new Float32Array(V,a,v.RotationComponentCount),n=new Float32Array(V,o,v.ScaleComponentCount);if(void 0!==r[u.OFFSET.SCALE0]?(F.set(r[u.OFFSET.ROTATION0],r[u.OFFSET.ROTATION1],r[u.OFFSET.ROTATION2],r[u.OFFSET.ROTATION3]),F.normalize(),t.set([F.x,F.y,F.z,F.w]),n.set([r[u.OFFSET.SCALE0],r[u.OFFSET.SCALE1],r[u.OFFSET.SCALE2]])):(t.set([1,0,0,0]),n.set([.01,.01,.01])),e.set([r[u.OFFSET.X],r[u.OFFSET.Y],r[u.OFFSET.Z]]),h>0){const e=new Float32Array(V,b,y);if(h>=1){for(let t=0;t<9;t++)e[t]=r[u.OFFSET.FRC0+t];if(h>=2)for(let t=0;t<15;t++)e[t+9]=r[u.OFFSET.FRC9+t]}}}else{const e=new Uint16Array(j,0,v.CenterComponentCount),t=new Uint16Array(Q,0,v.RotationComponentCount),s=new Uint16Array(G,0,v.ScaleComponentCount);if(void 0!==r[u.OFFSET.SCALE0]?(F.set(r[u.OFFSET.ROTATION0],r[u.OFFSET.ROTATION1],r[u.OFFSET.ROTATION2],r[u.OFFSET.ROTATION3]),F.normalize(),t.set([g(F.x),g(F.y),g(F.z),g(F.w)]),s.set([g(r[u.OFFSET.SCALE0]),g(r[u.OFFSET.SCALE1]),g(r[u.OFFSET.SCALE2])])):(t.set([g(1),0,0,0]),s.set([g(.01),g(.01),g(.01)])),q.set(r[u.OFFSET.X],r[u.OFFSET.Y],r[u.OFFSET.Z]).sub(K),q.x=Math.round(q.x*N)+x,q.x=l(q.x,0,W),q.y=Math.round(q.y*N)+x,q.y=l(q.y,0,W),q.z=Math.round(q.z*N)+x,q.z=l(q.z,0,W),e.set([q.x,q.y,q.z]),h>0){const e=1===n?2:1,t=new(1===n?Uint16Array:Uint8Array)(Y,0,y);if(h>=1){for(let e=0;e<9;e++){const s=r[u.OFFSET.FRC0+e];t[e]=1===n?g(s):S(s)}const s=9*e;if(c(t.buffer,0,V,b,s),h>=2){for(let e=0;e<15;e++){const s=r[u.OFFSET.FRC9+e];t[e+9]=1===n?g(s):S(s)}const i=15*e;c(t.buffer,s,V,b+s,i)}}}c(e.buffer,0,V,i,6),c(s.buffer,0,V,o,6),c(t.buffer,0,V,a,8)}const w=new Uint8ClampedArray(X,0,4);void 0!==r[u.OFFSET.FDC0]?w.set([r[u.OFFSET.FDC0],r[u.OFFSET.FDC1],r[u.OFFSET.FDC2]]):w.set([255,0,0]),void 0!==r[u.OFFSET.OPACITY]?w[3]=r[u.OFFSET.OPACITY]:w[3]=255,c(w.buffer,0,V,C,4),Z++}}if(T+=Z,n>=1){const e=new Uint32Array(V,0,4*k.length);for(let t=0;t<k.length;t++)e[t]=k[t];const t=new Float32Array(V,z,L.length*v.BucketStorageSizeFloats);for(let e=0;e<L.length;e++){const n=L[e],s=3*e;t[s]=n.center[0],t[s+1]=n.center[1],t[s+2]=n.center[2]}}b.push(V);const $=new ArrayBuffer(v.SectionHeaderSizeBytes);v.writeSectionHeaderToBuffer({maxSplatCount:Z,splatCount:Z,bucketSize:D,bucketCount:L.length,bucketBlockSize:E,compressionScaleRange:x,storageSizeBytes:U,fullBucketCount:I,partiallyFilledBucketCount:O,sphericalHarmonicsDegree:h},n,$,0),w.push($)}let B=0;for(let e of b)B+=e.byteLength;const M=v.HeaderSizeBytes+v.SectionHeaderSizeBytes*b.length+B,E=new ArrayBuffer(M);v.writeHeaderToBuffer({versionMajor:0,versionMinor:1,maxSectionCount:b.length,sectionCount:b.length,maxSplatCount:T,splatCount:T,compressionLevel:n,sceneCenter:r},E);let D=v.HeaderSizeBytes;for(let e of w)new Uint8Array(E,D,v.SectionHeaderSizeBytes).set(new Uint8Array(e)),D+=v.SectionHeaderSizeBytes;for(let e of b)new Uint8Array(E,D,e.byteLength).set(new Uint8Array(e)),D+=e.byteLength;return new v(E)}static computeBucketsForUncompressedSplatArray(e,t,n){let r=e.splatCount;const i=t/2,o=new s.Vector3,a=new s.Vector3;for(let t=0;t<r;t++){const n=e.splats[t],s=[n[u.OFFSET.X],n[u.OFFSET.Y],n[u.OFFSET.Z]];(0===t||s[0]<o.x)&&(o.x=s[0]),(0===t||s[0]>a.x)&&(a.x=s[0]),(0===t||s[1]<o.y)&&(o.y=s[1]),(0===t||s[1]>a.y)&&(a.y=s[1]),(0===t||s[2]<o.z)&&(o.z=s[2]),(0===t||s[2]>a.z)&&(a.z=s[2])}const l=(new s.Vector3).copy(a).sub(o),c=Math.ceil(l.y/t),h=Math.ceil(l.z/t),d=new s.Vector3,p=[],m={};for(let s=0;s<r;s++){const r=e.splats[s],a=[r[u.OFFSET.X],r[u.OFFSET.Y],r[u.OFFSET.Z]],l=Math.floor((a[0]-o.x)/t),f=Math.floor((a[1]-o.y)/t),g=Math.floor((a[2]-o.z)/t);d.x=l*t+o.x+i,d.y=f*t+o.y+i,d.z=g*t+o.z+i;const S=l*(c*h)+f*h+g;let y=m[S];y||(m[S]=y={splats:[],center:d.toArray()}),y.splats.push(s),y.splats.length>=n&&(p.push(y),m[S]=null)}const f=[];for(let e in m)if(m.hasOwnProperty(e)){const t=m[e];t&&f.push(t)}return{fullBuckets:p,partiallyFullBuckets:f}}}const b=new Uint8Array([112,108,121,10]),w=new Uint8Array([10,101,110,100,95,104,101,97,100,101,114,10]),T="end_header",F=new Map([["char",Int8Array],["uchar",Uint8Array],["short",Int16Array],["ushort",Uint16Array],["int",Int32Array],["uint",Uint32Array],["float",Float32Array],["double",Float64Array]]),B=(e,t)=>{const n=(1<<t)-1;return(e&n)/n},M=(e,t)=>{e.x=B(t>>>21,11),e.y=B(t>>>11,10),e.z=B(t,11)},E=(e,t,n)=>e*(1-n)+t*n,D=(e,t)=>e.properties.find((e=>e.name===t&&e.storage))?.storage;class P{static decodeHeaderText(e){let t,n,s;const r=e.split("\n").filter((e=>!e.startsWith("comment ")));let i=0,o=!1;for(let e=1;e<r.length;++e){const a=r[e].split(" ");switch(a[0]){case"format":if("binary_little_endian"!==a[1])throw new Error("Unsupported ply format");break;case"element":t={name:a[1],count:parseInt(a[2],10),properties:[],storageSizeBytes:0},"chunk"===t.name?n=t:"vertex"===t.name&&(s=t);break;case"property":{if(!F.has(a[1]))throw new Error(`Unrecognized property data type '${a[1]}' in ply header`);const e=F.get(a[1]),n=e.BYTES_PER_ELEMENT*t.count;"vertex"===t.name&&(i+=e.BYTES_PER_ELEMENT),t.properties.push({type:a[1],name:a[2],storage:null,byteSize:e.BYTES_PER_ELEMENT,storageSizeByes:n}),t.storageSizeBytes+=n;break}case T:o=!0;break;default:throw new Error(`Unrecognized header value '${a[0]}' in ply header`)}if(o)break}return{chunkElement:n,vertexElement:s,bytesPerSplat:i,headerSizeBytes:e.indexOf(T)+10+1}}static decodeHeader(e){let t,n=new Uint8Array(e);if(n.length>=b.length&&!((e,t)=>{if(e.length<t.length)return!1;for(let n=0;n<t.length;++n)if(e[n]!==t[n])return!1;return!0})(n,b))throw new Error("Invalid PLY header");if(t=((e,t)=>{const n=e.length-t.length;let s,r;for(s=0;s<=n;++s){for(r=0;r<t.length&&e[s+r]===t[r];++r);if(r===t.length)return s}return-1})(n,w),-1===t)throw new Error("End of PLY header not found");const s=new TextDecoder("ascii").decode(n.slice(0,t)),{chunkElement:r,vertexElement:i,bytesPerSplat:o}=P.decodeHeaderText(s);return{headerSizeBytes:t+w.length,bytesPerSplat:o,chunkElement:r,vertexElement:i}}static readElementData(e,t,n,s,r,i=null){let o=t instanceof DataView?t:new DataView(t);s=s||0,r=r||e.count-1;for(let t=s;t<=r;++t)for(let s=0;s<e.properties.length;++s){const r=e.properties[s],a=F.get(r.type),l=a.BYTES_PER_ELEMENT*e.count;if(r.storage&&!(r.storage.byteLength<l)||i&&!i(r.name)||(r.storage=new a(e.count)),r.storage)switch(r.type){case"char":r.storage[t]=o.getInt8(n);break;case"uchar":r.storage[t]=o.getUint8(n);break;case"short":r.storage[t]=o.getInt16(n,!0);break;case"ushort":r.storage[t]=o.getUint16(n,!0);break;case"int":r.storage[t]=o.getInt32(n,!0);break;case"uint":r.storage[t]=o.getUint32(n,!0);break;case"float":r.storage[t]=o.getFloat32(n,!0);break;case"double":r.storage[t]=o.getFloat64(n,!0)}n+=r.byteSize}return n}static readPly(e,t=null){const n=P.decodeHeader(e);let s=P.readElementData(n.chunkElement,e,n.headerSizeBytes,null,null,t);return P.readElementData(n.vertexElement,e,s,null,null,t),{chunkElement:n.chunkElement,vertexElement:n.vertexElement}}static getElementStorageArrays(e,t){const n=D(e,"min_x"),s=D(e,"min_y"),r=D(e,"min_z"),i=D(e,"max_x"),o=D(e,"max_y"),a=D(e,"max_z"),l=D(e,"min_scale_x"),c=D(e,"min_scale_y"),h=D(e,"min_scale_z");return{positionExtremes:{minX:n,maxX:i,minY:s,maxY:o,minZ:r,maxZ:a},scaleExtremes:{minScaleX:l,maxScaleX:D(e,"max_scale_x"),minScaleY:c,maxScaleY:D(e,"max_scale_y"),minScaleZ:h,maxScaleZ:D(e,"max_scale_z")},position:D(t,"packed_position"),rotation:D(t,"packed_rotation"),scale:D(t,"packed_scale"),color:D(t,"packed_color")}}static decompressSplat=function(){const e=new s.Vector3,t=new s.Quaternion,n=new s.Vector3,r=new s.Vector4,i=u.OFFSET;return function(s,o,a,c,h,d,p,m,f){f=f||u.createSplat();const g=Math.floor((o+s)/256);var S,y;return M(e,a[s]),((e,t)=>{const n=1/(.5*Math.sqrt(2)),s=(B(t>>>20,10)-.5)*n,r=(B(t>>>10,10)-.5)*n,i=(B(t,10)-.5)*n,o=Math.sqrt(1-(s*s+r*r+i*i));switch(t>>>30){case 0:e.set(o,s,r,i);break;case 1:e.set(s,o,r,i);break;case 2:e.set(s,r,o,i);break;case 3:e.set(s,r,i,o)}})(t,p[s]),M(n,h[s]),S=r,y=m[s],S.x=B(y>>>24,8),S.y=B(y>>>16,8),S.z=B(y>>>8,8),S.w=B(y,8),f[i.X]=E(c.minX[g],c.maxX[g],e.x),f[i.Y]=E(c.minY[g],c.maxY[g],e.y),f[i.Z]=E(c.minZ[g],c.maxZ[g],e.z),f[i.ROTATION0]=t.x,f[i.ROTATION1]=t.y,f[i.ROTATION2]=t.z,f[i.ROTATION3]=t.w,f[i.SCALE0]=Math.exp(E(d.minScaleX[g],d.maxScaleX[g],n.x)),f[i.SCALE1]=Math.exp(E(d.minScaleY[g],d.maxScaleY[g],n.y)),f[i.SCALE2]=Math.exp(E(d.minScaleZ[g],d.maxScaleZ[g],n.z)),f[i.FDC0]=l(Math.floor(255*r.x),0,255),f[i.FDC1]=l(Math.floor(255*r.y),0,255),f[i.FDC2]=l(Math.floor(255*r.z),0,255),f[i.OPACITY]=l(Math.floor(255*r.w),0,255),f}}();static parseToUncompressedSplatBufferSection(e,t,n,s,r,i,o,a,l,c=null){P.readElementData(t,i,o,n,s,c);const h=v.CompressionLevels[0].BytesPerCenter,d=v.CompressionLevels[0].BytesPerScale,p=v.CompressionLevels[0].BytesPerRotation,m=v.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat,{positionExtremes:f,scaleExtremes:g,position:S,rotation:y,scale:C,color:A}=P.getElementStorageArrays(e,t),x=u.OFFSET,b=u.createSplat();for(let e=n;e<=s;++e){P.decompressSplat(e,r,S,f,C,g,y,A,b);const t=e*m+l,n=new Float32Array(a,t,3),s=new Float32Array(a,t+h,3),i=new Float32Array(a,t+h+d,4),o=new Uint8Array(a,t+h+d+p,4);n[0]=b[x.X],n[1]=b[x.Y],n[2]=b[x.Z],s[0]=b[x.SCALE0],s[1]=b[x.SCALE1],s[2]=b[x.SCALE2],i[0]=b[x.ROTATION0],i[1]=b[x.ROTATION1],i[2]=b[x.ROTATION2],i[3]=b[x.ROTATION3],o[0]=b[x.FDC0],o[1]=b[x.FDC1],o[2]=b[x.FDC2],o[3]=b[x.OPACITY]}}static parseToUncompressedSplatArray(e){const{chunkElement:t,vertexElement:n}=P.readPly(e),r=new u,{positionExtremes:i,scaleExtremes:o,position:a,rotation:l,scale:c,color:h}=P.getElementStorageArrays(t,n);for(let e=0;e<n.count;++e){r.addDefaultSplat();const t=r.getSplat(r.splatCount-1);P.decompressSplat(e,0,a,i,c,o,l,h,t)}return(new s.Matrix4).identity(),r}}class R{static HeaderEndToken="end_header";static BaseFields=["scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","x","y","z","f_dc_0","f_dc_1","f_dc_2","red","green","blue","opacity"];static SphericalHarmonicsFields=Array.from(Array(45)).map(((e,t)=>`f_rest_${t}`));static Fields=[[...R.BaseFields],[...R.BaseFields,...R.SphericalHarmonicsFields]];static checkTextForEndHeader(e){return!!e.includes(R.HeaderEndToken)}static checkBufferForEndHeader(e,t,n,s){const r=new Uint8Array(e,Math.max(0,t-n),n),i=s.decode(r);return R.checkTextForEndHeader(i)}static decodeHeaderText(e){const t=e.split("\n"),n=[];let s=0,r={},i=!1;for(let e=0;e<t.length;e++){const o=t[e].trim();if(n.push(o),o.startsWith("element chunk")||o.match(/[A-Za-z]*packed_[A-Za-z]*/))i=!0;else if(o.startsWith("element vertex")){const e=o.match(/\d+/);e&&(s=parseInt(e[0]))}else if(o.startsWith("property")){const e=o.match(/(\w+)\s+(\w+)\s+(\w+)/);if(e){const t=e[2];r[e[3]]=t}}else if(o===R.HeaderEndToken)break}let o=0,a={};const l={double:8,int:4,uint:4,float:4,short:2,ushort:2,uchar:1},c=[];for(let e in r)if(r.hasOwnProperty(e)){c.push(e);const t=r[e];a[e]=o,o+=l[t]}let h=0,d=0;for(let e of c)e.startsWith("f_rest")&&h++;d=h/3;let p=0;d>=3&&(p=1),d>=8&&(p=2);let u=[];if(p>=1)for(let e=0;e<3;e++)for(let t=0;t<3;t++)u.push("f_rest_"+(t+d*e));let m=[];if(p>=2)for(let e=0;e<3;e++)for(let t=0;t<5;t++)m.push("f_rest_"+(t+d*e+3));return{splatCount:s,propertyTypes:r,compressed:i,headerText:e,headerLines:n,headerSizeBytes:e.indexOf(R.HeaderEndToken)+R.HeaderEndToken.length+1,bytesPerSplat:o,fieldOffsets:a,sphericalHarmonicsDegree:p,sphericalHarmonicsCoefficientsPerChannel:d,sphericalHarmonicsDegree1Fields:u,sphericalHarmonicsDegree2Fields:m}}static decodeHeadeFromBuffer(e){const t=new TextDecoder;let n=0,s="";const r=100;for(;;){if(n+r>=e.byteLength)throw new Error("End of file reached while searching for end of header");const i=new Uint8Array(e,n,r);if(s+=t.decode(i),n+=r,R.checkBufferForEndHeader(e,n,200,t))break}return R.decodeHeaderText(s)}static findVertexData(e,t){return new DataView(e,t.headerSizeBytes)}static readRawVertexFast(e,t,n,s,r,i){let o=i||{};for(let i of s){const s=r[i];"float"===s?o[i]=e.getFloat32(t+n[i],!0):"uchar"===s&&(o[i]=e.getUint8(t+n[i])/255)}}static parseToUncompressedSplatBufferSection(e,t,n,s,r,i,o,a=0){a=Math.min(a,e.sphericalHarmonicsDegree);const l=v.CompressionLevels[0].BytesPerCenter,c=v.CompressionLevels[0].BytesPerScale,h=v.CompressionLevels[0].BytesPerRotation,d=v.CompressionLevels[0].BytesPerColor,p=v.CompressionLevels[0].SphericalHarmonicsDegrees[a].BytesPerSplat;for(let m=t;m<=n;m++){const t=R.parseToUncompressedSplat(s,m,e,r,a),n=m*p+o,f=new Float32Array(i,n,3),g=new Float32Array(i,n+l,3),S=new Float32Array(i,n+l+c,4),y=new Uint8Array(i,n+l+c+h,4);if(f[0]=t[u.OFFSET.X],f[1]=t[u.OFFSET.Y],f[2]=t[u.OFFSET.Z],g[0]=t[u.OFFSET.SCALE0],g[1]=t[u.OFFSET.SCALE1],g[2]=t[u.OFFSET.SCALE2],S[0]=t[u.OFFSET.ROTATION0],S[1]=t[u.OFFSET.ROTATION1],S[2]=t[u.OFFSET.ROTATION2],S[3]=t[u.OFFSET.ROTATION3],y[0]=t[u.OFFSET.FDC0],y[1]=t[u.OFFSET.FDC1],y[2]=t[u.OFFSET.FDC2],y[3]=t[u.OFFSET.OPACITY],a>=1){const e=new Float32Array(i,n+l+c+h+d,t.sphericalHarmonicsCount);for(let n=0;n<=8;n++)e[n]=t[u.OFFSET.FRC0+n];if(a>=2)for(let n=9;n<=23;n++)e[n]=t[u.OFFSET.FRC0+n]}}}static parseToUncompressedSplat=function(){let e={};const t=new s.Quaternion;return function(n,s,r,i=0,o=0){o=Math.min(o,r.sphericalHarmonicsDegree),R.readRawVertexFast(n,s*r.bytesPerSplat+i,r.fieldOffsets,R.Fields[o>0?1:0],r.propertyTypes,e);const a=u.createSplat(o);if(void 0!==e.scale_0?(a[u.OFFSET.SCALE0]=Math.exp(e.scale_0),a[u.OFFSET.SCALE1]=Math.exp(e.scale_1),a[u.OFFSET.SCALE2]=Math.exp(e.scale_2)):(a[u.OFFSET.SCALE0]=.01,a[u.OFFSET.SCALE1]=.01,a[u.OFFSET.SCALE2]=.01),void 0!==e.f_dc_0){const t=.28209479177387814;a[u.OFFSET.FDC0]=255*(.5+t*e.f_dc_0),a[u.OFFSET.FDC1]=255*(.5+t*e.f_dc_1),a[u.OFFSET.FDC2]=255*(.5+t*e.f_dc_2)}else void 0!==e.red?(a[u.OFFSET.FDC0]=255*e.red,a[u.OFFSET.FDC1]=255*e.green,a[u.OFFSET.FDC2]=255*e.blue):(a[u.OFFSET.FDC0]=0,a[u.OFFSET.FDC1]=0,a[u.OFFSET.FDC2]=0);if(void 0!==e.opacity&&(a[u.OFFSET.OPACITY]=1/(1+Math.exp(-e.opacity))*255),a[u.OFFSET.FDC0]=l(Math.floor(a[u.OFFSET.FDC0]),0,255),a[u.OFFSET.FDC1]=l(Math.floor(a[u.OFFSET.FDC1]),0,255),a[u.OFFSET.FDC2]=l(Math.floor(a[u.OFFSET.FDC2]),0,255),a[u.OFFSET.OPACITY]=l(Math.floor(a[u.OFFSET.OPACITY]),0,255),o>=1)if(void 0!==e.f_rest_0){for(let t=0;t<9;t++)a[u.OFFSET.FRC0+t]=e[r.sphericalHarmonicsDegree1Fields[t]];if(o>=2)for(let t=0;t<15;t++)a[u.OFFSET.FRC9+t]=e[r.sphericalHarmonicsDegree2Fields[t]]}else a[u.OFFSET.FRC0]=0,a[u.OFFSET.FRC1]=0,a[u.OFFSET.FRC2]=0;return t.set(e.rot_0,e.rot_1,e.rot_2,e.rot_3),t.normalize(),a[u.OFFSET.ROTATION0]=t.x,a[u.OFFSET.ROTATION1]=t.y,a[u.OFFSET.ROTATION2]=t.z,a[u.OFFSET.ROTATION3]=t.w,a[u.OFFSET.X]=e.x,a[u.OFFSET.Y]=e.y,a[u.OFFSET.Z]=e.z,a}}();static parseToUncompressedSplatArray(e,t=0){const n=R.decodeHeadeFromBuffer(e);if(n.compressed)return P.parseToUncompressedSplatArray(e);{const s=n.splatCount,r=R.findVertexData(e,n),i=new u(t);for(let e=0;e<s;e++){const s=R.parseToUncompressedSplat(r,e,n,0,t);i.addSplat(s)}return i}}}class I{constructor(e,t,n,s){this.sectionCount=e,this.sectionFilters=t,this.groupingParameters=n,this.partitionGenerator=s}partitionUncompressedSplatArray(e){let t,n,s;if(this.partitionGenerator){const r=this.partitionGenerator(e);t=r.groupingParameters,n=r.sectionCount,s=r.sectionFilters}else t=this.groupingParameters,n=this.sectionCount,s=this.sectionFilters;const r=[];for(let t=0;t<n;t++){const n=new u(e.sphericalHarmonicsDegree),i=s[t];for(let t=0;t<e.splatCount;t++)i(t)&&n.addSplatFromArray(e,t);r.push(n)}return{splatArrays:r,parameters:t}}static getStandardPartitioner(e=0,t=new s.Vector3,n=v.BucketBlockSize,r=v.BucketSize){return new I(void 0,void 0,void 0,(i=>{e<=0&&(e=i.splatCount);const o=new s.Vector3,a=new s.Vector3,l=.5,c=e=>{e.x=Math.floor(e.x/l)*l,e.y=Math.floor(e.y/l)*l,e.z=Math.floor(e.z/l)*l};i.splats.sort(((e,n)=>{o.set(e[u.OFFSET.X],e[u.OFFSET.Y],e[u.OFFSET.Z]).sub(t),c(o);const s=o.lengthSq();a.set(n[u.OFFSET.X],n[u.OFFSET.Y],n[u.OFFSET.Z]).sub(t),c(a);return s>a.lengthSq()?1:-1}));const h=[],d=[];e=Math.min(i.splatCount,e);const p=Math.ceil(i.splatCount/e);let m=0;for(let t=0;t<p;t++){let t=m;h.push((n=>n>=t&&n<t+e)),d.push({blocksSize:n,bucketSize:r}),m+=e}return{sectionCount:h.length,sectionFilters:h,groupingParameters:d}}))}}class k{constructor(e,t,n,r,i,o,a){this.splatPartitioner=e,this.alphaRemovalThreshold=t,this.compressionLevel=n,this.sectionSize=r,this.sceneCenter=i?(new s.Vector3).copy(i):void 0,this.blockSize=o,this.bucketSize=a}generateFromUncompressedSplatArray(e){const t=this.splatPartitioner.partitionUncompressedSplatArray(e);return v.generateFromUncompressedSplatArrays(t.splatArrays,this.alphaRemovalThreshold,this.compressionLevel,this.sceneCenter,this.blockSize,this.bucketSize,t.parameters)}static getStandardGenerator(e=1,t=1,n=0,r=new s.Vector3,i=v.BucketBlockSize,o=v.BucketSize){const a=I.getStandardPartitioner(n,r,i,o);return new k(a,e,t,n,r,i,o)}}const O=0,L=1,H=2;function z(e,t){let n=0;for(let t of e)n+=t.sizeBytes;(!t||t.byteLength<n)&&(t=new ArrayBuffer(n));let s=0;for(let n of e)new Uint8Array(t,s,n.sizeBytes).set(n.data),s+=n.sizeBytes;return t}class _{static loadFromURL(e,t,n,r,i,o,l=0,c,h,d,p){const u=m.StreamingSectionSize,f=v.HeaderSizeBytes+v.SectionHeaderSizeBytes;let g,S,y,C,A,x=0,b=0,w=!1,T=!1,F=!1,B=new Promise((e=>{A=e})),M=0,E=0,D=0,I="",k=null,U=[];const V=new TextDecoder;return a(e,((e,i,o)=>{const a=e>=100;if(n){if(o&&(U.push({data:o,sizeBytes:o.byteLength,startBytes:D,endBytes:D+o.byteLength}),D+=o.byteLength),w){if(F&&!T){const e=k.headerSizeBytes+k.chunkElement.storageSizeBytes;C=z(U,C),C.byteLength>=e&&(P.readElementData(k.chunkElement,C,k.headerSizeBytes),M=e,E=e,T=!0)}}else if(I+=V.decode(o),R.checkTextForEndHeader(I)){k=R.decodeHeaderText(I),l=Math.min(l,k.sphericalHarmonicsDegree),F=k.compressed,F?(k=P.decodeHeaderText(I),x=k.vertexElement.count):(x=k.splatCount,T=!0);const e=v.CompressionLevels[0].SphericalHarmonicsDegrees[l],t=f+e.BytesPerSplat*x;S=new ArrayBuffer(t),v.writeHeaderToBuffer({versionMajor:v.CurrentMajorVersion,versionMinor:v.CurrentMinorVersion,maxSectionCount:1,sectionCount:1,maxSplatCount:x,splatCount:b,compressionLevel:0,sceneCenter:new s.Vector3},S),M=k.headerSizeBytes,E=k.headerSizeBytes,w=!0}if(w&&T){if(U.length>0){g=z(U,g);if(D-M>u||a){const e=D-E,t=Math.floor(e/k.bytesPerSplat),n=t*k.bytesPerSplat,s=e-n,i=b+t,o=E-U[0].startBytes,c=new DataView(g,o,n),h=v.CompressionLevels[0].SphericalHarmonicsDegrees[l],d=b*h.BytesPerSplat+f;if(F?P.parseToUncompressedSplatBufferSection(k.chunkElement,k.vertexElement,0,t-1,b,c,0,S,d):R.parseToUncompressedSplatBufferSection(k,0,t-1,c,0,S,d,l),b=i,y||(v.writeSectionHeaderToBuffer({maxSplatCount:x,splatCount:b,bucketSize:0,bucketCount:0,bucketBlockSize:0,compressionScaleRange:0,storageSizeBytes:0,fullBucketCount:0,partiallyFilledBucketCount:0,sphericalHarmonicsDegree:l},0,S,v.HeaderSizeBytes),y=new v(S,!1)),y.updateLoadedCounts(1,b),r(y,a),M+=u,E+=n,0===s)U=[];else{let e=[],t=0;for(let n=U.length-1;n>=0;n--){const r=U[n];if(t+=r.sizeBytes,e.unshift(r),t>=s)break}U=e}}}a&&A(y)}}t&&t(e,i,O)}),!n).then((e=>{t&&t(0,"0%",L);return(n?B:_.loadFromFileData(e,i,o,l,c,h,d,p)).then((e=>(t&&t(100,"100%",H),e)))}))}static loadFromFileData(e,t,n,s=0,r,i,o,a){return d((()=>R.parseToUncompressedSplatArray(e,s))).then((e=>k.getStandardGenerator(t,n,r,i,o,a).generateFromUncompressedSplatArray(e)))}}class U{static RowSizeBytes=32;static CenterSizeBytes=12;static ScaleSizeBytes=12;static RotationSizeBytes=4;static ColorSizeBytes=4;static parseToUncompressedSplatBufferSection(e,t,n,r,i,o){const a=v.CompressionLevels[0].BytesPerCenter,l=v.CompressionLevels[0].BytesPerScale,c=v.CompressionLevels[0].BytesPerRotation,h=v.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;for(let d=e;d<=t;d++){const e=d*U.RowSizeBytes+r,t=new Float32Array(n,e,3),p=new Float32Array(n,e+U.CenterSizeBytes,3),u=new Uint8Array(n,e+U.CenterSizeBytes+U.ScaleSizeBytes,4),m=new Uint8Array(n,e+U.CenterSizeBytes+U.ScaleSizeBytes+U.RotationSizeBytes,4),f=new s.Quaternion((m[1]-128)/128,(m[2]-128)/128,(m[3]-128)/128,(m[0]-128)/128);f.normalize();const g=d*h+o,S=new Float32Array(i,g,3),y=new Float32Array(i,g+a,3),C=new Float32Array(i,g+a+l,4),A=new Uint8Array(i,g+a+l+c,4);S[0]=t[0],S[1]=t[1],S[2]=t[2],y[0]=p[0],y[1]=p[1],y[2]=p[2],C[0]=f.w,C[1]=f.x,C[2]=f.y,C[3]=f.z,A[0]=u[0],A[1]=u[1],A[2]=u[2],A[3]=u[3]}}static parseStandardSplatToUncompressedSplatArray(e){const t=e.byteLength/U.RowSizeBytes,n=new u;for(let r=0;r<t;r++){const t=r*U.RowSizeBytes,i=new Float32Array(e,t,3),o=new Float32Array(e,t+U.CenterSizeBytes,3),a=new Uint8Array(e,t+U.CenterSizeBytes+U.ScaleSizeBytes,4),l=new Uint8Array(e,t+U.CenterSizeBytes+U.ScaleSizeBytes+U.ColorSizeBytes,4),c=new s.Quaternion((l[1]-128)/128,(l[2]-128)/128,(l[3]-128)/128,(l[0]-128)/128);c.normalize(),n.addSplatFromComonents(i[0],i[1],i[2],o[0],o[1],o[2],c.w,c.x,c.y,c.z,a[0],a[1],a[2],a[3])}return n}}class V{static loadFromURL(e,t,n,r,i,o,l,c,h,d,p){const u=v.HeaderSizeBytes+v.SectionHeaderSizeBytes,f=m.StreamingSectionSize;let g,S,y,C,A=0,x=0,b=new Promise((e=>{C=e})),w=0,T=0,F=[];return a(e,((e,i,o,a)=>{const l=e>=100;if(a||(n=!1),n){if(!g){A=a/U.RowSizeBytes,g=new ArrayBuffer(a);const e=v.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;S=new ArrayBuffer(u+e*A),v.writeHeaderToBuffer({versionMajor:v.CurrentMajorVersion,versionMinor:v.CurrentMinorVersion,maxSectionCount:1,sectionCount:1,maxSplatCount:A,splatCount:x,compressionLevel:0,sceneCenter:new s.Vector3},S)}if(o){F.push(o),new Uint8Array(g,T,o.byteLength).set(new Uint8Array(o)),T+=o.byteLength;const e=T-w;if(e>f||l){const t=(l?e:f)/U.RowSizeBytes,n=x+t;U.parseToUncompressedSplatBufferSection(x,n-1,g,0,S,u),x=n,y||(v.writeSectionHeaderToBuffer({maxSplatCount:A,splatCount:x,bucketSize:0,bucketCount:0,bucketBlockSize:0,compressionScaleRange:0,storageSizeBytes:0,fullBucketCount:0,partiallyFilledBucketCount:0},0,S,v.HeaderSizeBytes),y=new v(S,!1)),y.updateLoadedCounts(1,x),r(y,l),w+=f}}l&&C(y)}return t&&t(e,i,O),n}),!0).then((e=>{t&&t(0,"0%",L);return(n?b:V.loadFromFileData(e,i,o,l,c,h,d,p)).then((e=>(t&&t(100,"100%",H),e)))}))}static loadFromFileData(e,t,n,r,i,o,a,l){return d((()=>{const c=U.parseStandardSplatToUncompressedSplatArray(e);if(r){return k.getStandardGenerator(t,n,i,o,a,l).generateFromUncompressedSplatArray(c)}return v.generateFromUncompressedSplatArrays([c],t,0,new s.Vector3)}))}}class N{static checkVersion(e){const t=v.CurrentMajorVersion,n=v.CurrentMinorVersion,s=v.parseHeader(e);if(s.versionMajor===t&&s.versionMinor>=n||s.versionMajor>t)return!0;throw new Error(`KSplat version not supported: v${s.versionMajor}.${s.versionMinor}. Minimum required: v${t}.${n}`)}static loadFromURL(e,t,n,s){let r,i,o,l,c,h,d=!1,p=!1,u=[],f=!1,g=!1,S=0,y=0,C=m.StreamingSectionSize,A=0,x=!1,b=[],w=new Promise((e=>{h=e}));let T=0;const F=()=>{const e=()=>{g=!0;new Blob(b).arrayBuffer().then((e=>{g=!1,f=!0,c=new ArrayBuffer(l.maxSectionCount*v.SectionHeaderSizeBytes),new Uint8Array(c).set(new Uint8Array(e,v.HeaderSizeBytes,l.maxSectionCount*v.SectionHeaderSizeBytes)),u=v.parseSectionHeaders(l,c,0,!1);let t=0;for(let e=0;e<l.maxSectionCount;e++)t+=u[e].storageSizeBytes;const n=v.HeaderSizeBytes+l.maxSectionCount*v.SectionHeaderSizeBytes+t;if(!r){r=new ArrayBuffer(n);let e=0;for(let t=0;t<b.length;t++){const n=b[t];new Uint8Array(r,e,n.byteLength).set(new Uint8Array(n)),e+=n.byteLength}}A=v.HeaderSizeBytes+v.SectionHeaderSizeBytes*l.maxSectionCount;for(let e=0;e<=u.length&&e<l.maxSectionCount;e++)A+=u[e].storageSizeBytes;0===T&&(T++,window.setTimeout((()=>{T--,B(!0)}),1))}))};!g&&!f&&d&&S>=v.HeaderSizeBytes+v.SectionHeaderSizeBytes*l.maxSectionCount&&e()},B=()=>{if(f){if(x)return;x=S>=A;if(S-y>C||x){y=S,i||(i=new v(r,!1));const e=v.HeaderSizeBytes+v.SectionHeaderSizeBytes*l.maxSectionCount;let t=0,n=0,o=0;for(let s=0;s<l.maxSectionCount;s++){const r=u[s],a=e+(t+4*r.partiallyFilledBucketCount+r.bucketStorageSizeBytes*r.bucketCount);if(!(S>=a))break;{n++;const e=S-a,t=v.CompressionLevels[l.compressionLevel].SphericalHarmonicsDegrees[r.sphericalHarmonicsDegree].BytesPerSplat;let c=Math.floor(e/t);c=Math.min(c,r.maxSplatCount),o+=c,i.updateLoadedCounts(n,o),i.updateSectionLoadedCounts(s,c)}t+=r.storageSizeBytes}s(i,x),x&&h(i)}}};return a(e,((e,s,i)=>{i&&(b.push(i),r&&new Uint8Array(r,S,i.byteLength).set(new Uint8Array(i)),S+=i.byteLength),n&&(!d&&!p&&S>=v.HeaderSizeBytes&&(p=!0,new Blob(b).arrayBuffer().then((e=>{o=new ArrayBuffer(v.HeaderSizeBytes),new Uint8Array(o).set(new Uint8Array(e,0,v.HeaderSizeBytes)),N.checkVersion(o),p=!1,d=!0,l=v.parseHeader(o),window.setTimeout((()=>{F()}),1)}))),F(),B()),t&&t(e,s,O)}),!n).then((e=>{t&&t(0,"0%",L);return(n?w:N.loadFromFileData(e)).then((e=>(t&&t(100,"100%",H),e)))}))}static loadFromFileData(e){return d((()=>(N.checkVersion(e),new v(e))))}static downloadFile=function(){let e;return function(t,n){const s=new Blob([t.bufferData],{type:"application/octet-stream"});e||(e=document.createElement("a"),document.body.appendChild(e)),e.download=n,e.href=URL.createObjectURL(s),e.click()}}()}const W={Splat:0,KSplat:1,Ply:2},j=e=>e.endsWith(".ply")?W.Ply:e.endsWith(".splat")?W.Splat:e.endsWith(".ksplat")?W.KSplat:null;var G=Object.freeze({__proto__:null,sceneFormatFromPath:j});const Q={type:"change"},X={type:"start"},Y={type:"end"},K=new t.Ray,q=new t.Plane,Z=Math.cos(70*t.MathUtils.DEG2RAD);class $ extends t.EventDispatcher{constructor(e,n){super(),this.object=e,this.domElement=n,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new t.Vector3,this.minDistance=.7,this.maxDistance=2,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=Math.PI/2,this.maxPolarAngle=Math.PI/2,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!0,this.autoRotateSpeed=2,this.keys={LEFT:"KeyA",UP:"KeyW",RIGHT:"KeyD",BOTTOM:"KeyS"},this.mouseButtons={LEFT:t.MOUSE.ROTATE,MIDDLE:t.MOUSE.DOLLY,RIGHT:t.MOUSE.PAN},this.touches={ONE:t.TOUCH.ROTATE,TWO:t.TOUCH.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return a.phi},this.getAzimuthalAngle=function(){return a.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(e){e.addEventListener("keydown",J),this._domElementKeyEvents=e},this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",J),this._domElementKeyEvents=null},this.saveState=function(){s.target0.copy(s.target),s.position0.copy(s.object.position),s.zoom0=s.object.zoom},this.reset=function(){s.target.copy(s.target0),s.object.position.copy(s.position0),s.object.zoom=s.zoom0,this.clearDampedRotation(),this.clearDampedPan(),s.object.updateProjectionMatrix(),s.dispatchEvent(Q),s.update(),i=r.NONE},this.clearDampedRotation=function(){l.theta=0,l.phi=0},this.clearDampedPan=function(){h.set(0,0,0)},this.update=function(){const n=new t.Vector3,d=(new t.Quaternion).setFromUnitVectors(e.up,new t.Vector3(0,1,0)),p=d.clone().invert(),u=new t.Vector3,m=new t.Quaternion,f=new t.Vector3,g=2*Math.PI;return function(){d.setFromUnitVectors(e.up,new t.Vector3(0,1,0)),p.copy(d).invert();const S=s.object.position;n.copy(S).sub(s.target),n.applyQuaternion(d),a.setFromVector3(n),s.autoRotate&&i===r.NONE&&F(2*Math.PI/60/60*s.autoRotateSpeed),s.enableDamping?(a.theta+=l.theta*s.dampingFactor,a.phi+=l.phi*s.dampingFactor):(a.theta+=l.theta,a.phi+=l.phi);let y=s.minAzimuthAngle,C=s.maxAzimuthAngle;isFinite(y)&&isFinite(C)&&(y<-Math.PI?y+=g:y>Math.PI&&(y-=g),C<-Math.PI?C+=g:C>Math.PI&&(C-=g),a.theta=y<=C?Math.max(y,Math.min(C,a.theta)):a.theta>(y+C)/2?Math.max(y,a.theta):Math.min(C,a.theta)),a.phi=Math.max(s.minPolarAngle,Math.min(s.maxPolarAngle,a.phi)),(a.phi<=s.minPolarAngle||a.phi>=s.maxPolarAngle)&&(l.phi=0),a.makeSafe(),!0===s.enableDamping?s.target.addScaledVector(h,s.dampingFactor):s.target.add(h),s.zoomToCursor&&v||s.object.isOrthographicCamera?a.radius=k(a.radius):a.radius=k(a.radius*c),n.setFromSpherical(a),n.applyQuaternion(p),S.copy(s.target).add(n),s.object.lookAt(s.target),!0===s.enableDamping?(l.theta*=1-s.dampingFactor,l.phi*=1-s.dampingFactor,h.multiplyScalar(1-s.dampingFactor)):(l.set(0,0,0),h.set(0,0,0));let b=!1;if(s.zoomToCursor&&v){let r=null;if(s.object.isPerspectiveCamera){const e=n.length();r=k(e*c);const t=e-r;s.object.position.addScaledVector(A,t),s.object.updateMatrixWorld()}else if(s.object.isOrthographicCamera){const e=new t.Vector3(x.x,x.y,0);e.unproject(s.object),s.object.zoom=Math.max(s.minZoom,Math.min(s.maxZoom,s.object.zoom/c)),s.object.updateProjectionMatrix(),b=!0;const i=new t.Vector3(x.x,x.y,0);i.unproject(s.object),s.object.position.sub(i).add(e),s.object.updateMatrixWorld(),r=n.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),s.zoomToCursor=!1;null!==r&&(this.screenSpacePanning?s.target.set(0,0,-1).transformDirection(s.object.matrix).multiplyScalar(r).add(s.object.position):(K.origin.copy(s.object.position),K.direction.set(0,0,-1).transformDirection(s.object.matrix),Math.abs(s.object.up.dot(K.direction))<Z?e.lookAt(s.target):(q.setFromNormalAndCoplanarPoint(s.object.up,s.target),K.intersectPlane(q,s.target))))}else s.object.isOrthographicCamera&&(s.object.zoom=Math.max(s.minZoom,Math.min(s.maxZoom,s.object.zoom/c)),s.object.updateProjectionMatrix(),b=!0);return c=1,v=!1,!!(b||u.distanceToSquared(s.object.position)>o||8*(1-m.dot(s.object.quaternion))>o||f.distanceToSquared(s.target)>0)&&(s.dispatchEvent(Q),u.copy(s.object.position),m.copy(s.object.quaternion),f.copy(s.target),b=!1,!0)}}(),this.dispose=function(){s.domElement.removeEventListener("contextmenu",ee),s.domElement.removeEventListener("pointerdown",W),s.domElement.removeEventListener("pointercancel",G),s.domElement.removeEventListener("wheel",$),s.domElement.removeEventListener("pointermove",j),s.domElement.removeEventListener("pointerup",G),null!==s._domElementKeyEvents&&(s._domElementKeyEvents.removeEventListener("keydown",J),s._domElementKeyEvents=null)};const s=this,r={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let i=r.NONE;const o=1e-6,a=new t.Spherical,l=new t.Spherical;let c=1;const h=new t.Vector3,d=new t.Vector2,p=new t.Vector2,u=new t.Vector2,m=new t.Vector2,f=new t.Vector2,g=new t.Vector2,S=new t.Vector2,y=new t.Vector2,C=new t.Vector2,A=new t.Vector3,x=new t.Vector2;let v=!1;const b=[],w={};function T(){return Math.pow(.95,s.zoomSpeed)}function F(e){l.theta-=e}function B(e){l.phi-=e}const M=function(){const e=new t.Vector3;return function(t,n){e.setFromMatrixColumn(n,0),e.multiplyScalar(-t),h.add(e)}}(),E=function(){const e=new t.Vector3;return function(t,n){!0===s.screenSpacePanning?e.setFromMatrixColumn(n,1):(e.setFromMatrixColumn(n,0),e.crossVectors(s.object.up,e)),e.multiplyScalar(t),h.add(e)}}(),D=function(){const e=new t.Vector3;return function(t,n){const r=s.domElement;if(s.object.isPerspectiveCamera){const i=s.object.position;e.copy(i).sub(s.target);let o=e.length();o*=Math.tan(s.object.fov/2*Math.PI/180),M(2*t*o/r.clientHeight,s.object.matrix),E(2*n*o/r.clientHeight,s.object.matrix)}else s.object.isOrthographicCamera?(M(t*(s.object.right-s.object.left)/s.object.zoom/r.clientWidth,s.object.matrix),E(n*(s.object.top-s.object.bottom)/s.object.zoom/r.clientHeight,s.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),s.enablePan=!1)}}();function P(e){s.object.isPerspectiveCamera||s.object.isOrthographicCamera?c/=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),s.enableZoom=!1)}function R(e){s.object.isPerspectiveCamera||s.object.isOrthographicCamera?c*=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),s.enableZoom=!1)}function I(t){if(!s.zoomToCursor)return;v=!0;const n=s.domElement.getBoundingClientRect(),r=t.clientX-n.left,i=t.clientY-n.top,o=n.width,a=n.height;x.x=r/o*2-1,x.y=-i/a*2+1,A.set(x.x,x.y,1).unproject(e).sub(e.position).normalize()}function k(e){return Math.max(s.minDistance,Math.min(s.maxDistance,e))}function O(e){d.set(e.clientX,e.clientY)}function L(e){m.set(e.clientX,e.clientY)}function H(){if(1===b.length)d.set(b[0].pageX,b[0].pageY);else{const e=.5*(b[0].pageX+b[1].pageX),t=.5*(b[0].pageY+b[1].pageY);d.set(e,t)}}function z(){if(1===b.length)m.set(b[0].pageX,b[0].pageY);else{const e=.5*(b[0].pageX+b[1].pageX),t=.5*(b[0].pageY+b[1].pageY);m.set(e,t)}}function _(){const e=b[0].pageX-b[1].pageX,t=b[0].pageY-b[1].pageY,n=Math.sqrt(e*e+t*t);S.set(0,n)}function U(e){if(1==b.length)p.set(e.pageX,e.pageY);else{const t=ne(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);p.set(n,s)}u.subVectors(p,d).multiplyScalar(s.rotateSpeed);const t=s.domElement;F(2*Math.PI*u.x/t.clientHeight),B(2*Math.PI*u.y/t.clientHeight),d.copy(p)}function V(e){if(1===b.length)f.set(e.pageX,e.pageY);else{const t=ne(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);f.set(n,s)}g.subVectors(f,m).multiplyScalar(s.panSpeed),D(g.x,g.y),m.copy(f)}function N(e){const t=ne(e),n=e.pageX-t.x,r=e.pageY-t.y,i=Math.sqrt(n*n+r*r);y.set(0,i),C.set(0,Math.pow(y.y/S.y,s.zoomSpeed)),P(C.y),S.copy(y)}function W(e){!1!==s.enabled&&(0===b.length&&(s.domElement.setPointerCapture(e.pointerId),s.domElement.addEventListener("pointermove",j),s.domElement.addEventListener("pointerup",G)),function(e){b.push(e)}(e),"touch"===e.pointerType?function(e){switch(te(e),b.length){case 1:switch(s.touches.ONE){case t.TOUCH.ROTATE:if(!1===s.enableRotate)return;H(),i=r.TOUCH_ROTATE;break;case t.TOUCH.PAN:if(!1===s.enablePan)return;z(),i=r.TOUCH_PAN;break;default:i=r.NONE}break;case 2:switch(s.touches.TWO){case t.TOUCH.DOLLY_PAN:if(!1===s.enableZoom&&!1===s.enablePan)return;s.enableZoom&&_(),s.enablePan&&z(),i=r.TOUCH_DOLLY_PAN;break;case t.TOUCH.DOLLY_ROTATE:if(!1===s.enableZoom&&!1===s.enableRotate)return;s.enableZoom&&_(),s.enableRotate&&H(),i=r.TOUCH_DOLLY_ROTATE;break;default:i=r.NONE}break;default:i=r.NONE}i!==r.NONE&&s.dispatchEvent(X)}(e):function(e){let n;switch(e.button){case 0:n=s.mouseButtons.LEFT;break;case 1:n=s.mouseButtons.MIDDLE;break;case 2:n=s.mouseButtons.RIGHT;break;default:n=-1}switch(n){case t.MOUSE.DOLLY:if(!1===s.enableZoom)return;!function(e){I(e),S.set(e.clientX,e.clientY)}(e),i=r.DOLLY;break;case t.MOUSE.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===s.enablePan)return;L(e),i=r.PAN}else{if(!1===s.enableRotate)return;O(e),i=r.ROTATE}break;case t.MOUSE.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===s.enableRotate)return;O(e),i=r.ROTATE}else{if(!1===s.enablePan)return;L(e),i=r.PAN}break;default:i=r.NONE}i!==r.NONE&&s.dispatchEvent(X)}(e))}function j(e){!1!==s.enabled&&("touch"===e.pointerType?function(e){switch(te(e),i){case r.TOUCH_ROTATE:if(!1===s.enableRotate)return;U(e),s.update();break;case r.TOUCH_PAN:if(!1===s.enablePan)return;V(e),s.update();break;case r.TOUCH_DOLLY_PAN:if(!1===s.enableZoom&&!1===s.enablePan)return;!function(e){s.enableZoom&&N(e),s.enablePan&&V(e)}(e),s.update();break;case r.TOUCH_DOLLY_ROTATE:if(!1===s.enableZoom&&!1===s.enableRotate)return;!function(e){s.enableZoom&&N(e),s.enableRotate&&U(e)}(e),s.update();break;default:i=r.NONE}}(e):function(e){switch(i){case r.ROTATE:if(!1===s.enableRotate)return;!function(e){p.set(e.clientX,e.clientY),u.subVectors(p,d).multiplyScalar(s.rotateSpeed);const t=s.domElement;F(2*Math.PI*u.x/t.clientHeight),B(2*Math.PI*u.y/t.clientHeight),d.copy(p),s.update()}(e);break;case r.DOLLY:if(!1===s.enableZoom)return;!function(e){y.set(e.clientX,e.clientY),C.subVectors(y,S),C.y>0?P(T()):C.y<0&&R(T()),S.copy(y),s.update()}(e);break;case r.PAN:if(!1===s.enablePan)return;!function(e){f.set(e.clientX,e.clientY),g.subVectors(f,m).multiplyScalar(s.panSpeed),D(g.x,g.y),m.copy(f),s.update()}(e)}}(e))}function G(e){!function(e){delete w[e.pointerId];for(let t=0;t<b.length;t++)if(b[t].pointerId==e.pointerId)return void b.splice(t,1)}(e),0===b.length&&(s.domElement.releasePointerCapture(e.pointerId),s.domElement.removeEventListener("pointermove",j),s.domElement.removeEventListener("pointerup",G)),s.dispatchEvent(Y),i=r.NONE}function $(e){!1!==s.enabled&&!1!==s.enableZoom&&i===r.NONE&&(e.preventDefault(),s.dispatchEvent(X),function(e){I(e),e.deltaY<0?R(T()):e.deltaY>0&&P(T()),s.update()}(e),s.dispatchEvent(Y))}function J(e){!1!==s.enabled&&!1!==s.enablePan&&function(e){let t=!1;switch(e.code){case s.keys.UP:e.ctrlKey||e.metaKey||e.shiftKey?B(2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):D(0,s.keyPanSpeed),t=!0;break;case s.keys.BOTTOM:e.ctrlKey||e.metaKey||e.shiftKey?B(-2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):D(0,-s.keyPanSpeed),t=!0;break;case s.keys.LEFT:e.ctrlKey||e.metaKey||e.shiftKey?F(2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):D(s.keyPanSpeed,0),t=!0;break;case s.keys.RIGHT:e.ctrlKey||e.metaKey||e.shiftKey?F(-2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):D(-s.keyPanSpeed,0),t=!0}t&&(e.preventDefault(),s.update())}(e)}function ee(e){!1!==s.enabled&&e.preventDefault()}function te(e){let n=w[e.pointerId];void 0===n&&(n=new t.Vector2,w[e.pointerId]=n),n.set(e.pageX,e.pageY)}function ne(e){const t=e.pointerId===b[0].pointerId?b[1]:b[0];return w[t.pointerId]}s.domElement.addEventListener("contextmenu",ee),s.domElement.addEventListener("pointerdown",W),s.domElement.addEventListener("pointercancel",G),s.domElement.addEventListener("wheel",$,{passive:!1}),this.update()}}class J{static elementIDGen=0;constructor(e,t){this.taskIDGen=0,this.elementID=J.elementIDGen++,this.tasks=[],this.message=e||"Loading...",this.container=t||document.body,this.spinnerContainerOuter=document.createElement("div"),this.spinnerContainerOuter.className=`spinnerOuterContainer${this.elementID}`,this.spinnerContainerOuter.style.display="none",this.spinnerContainerPrimary=document.createElement("div"),this.spinnerContainerPrimary.className=`spinnerContainerPrimary${this.elementID}`,this.spinnerPrimary=document.createElement("div"),this.spinnerPrimary.classList.add(`spinner${this.elementID}`,`spinnerPrimary${this.elementID}`),this.messageContainerPrimary=document.createElement("div"),this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`,`messageContainerPrimary${this.elementID}`),this.messageContainerPrimary.innerHTML=this.message,this.spinnerContainerMin=document.createElement("div"),this.spinnerContainerMin.className=`spinnerContainerMin${this.elementID}`,this.spinnerMin=document.createElement("div"),this.spinnerMin.classList.add(`spinner${this.elementID}`,`spinnerMin${this.elementID}`),this.messageContainerMin=document.createElement("div"),this.messageContainerMin.classList.add(`messageContainer${this.elementID}`,`messageContainerMin${this.elementID}`),this.messageContainerMin.innerHTML=this.message,this.spinnerContainerPrimary.appendChild(this.spinnerPrimary),this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary),this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary),this.spinnerContainerMin.appendChild(this.spinnerMin),this.spinnerContainerMin.appendChild(this.messageContainerMin),this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);const n=document.createElement("style");n.innerHTML=`\n\n            .spinnerOuterContainer${this.elementID} {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .messageContainer${this.elementID} {\n                height: 20px;\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                vertical-align: middle;\n            }\n\n            .spinner${this.elementID} {\n                padding: 15px;\n                background: #07e8d6;\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n\n            .spinnerContainerPrimary${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 10px;\n                margin: 0;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n                pointer-events: auto;\n            }\n\n            .spinnerPrimary${this.elementID} {\n                width: 120px;\n                margin-left: 30px;\n            }\n\n            .messageContainerPrimary${this.elementID} {\n                padding-top: 15px;\n            }\n\n            .spinnerContainerMin${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                display: flex;\n                flex-direction: left;\n                pointer-events: auto;\n                min-width: 250px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                margin-right: 15px;\n            }\n\n            .spinnerMin${this.elementID} {\n                width: 50px;\n                height: 50px;\n                margin-left: 15px;\n                margin-right: 25px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                padding-top: 15px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `,this.spinnerContainerOuter.appendChild(n),this.container.appendChild(this.spinnerContainerOuter),this.setMinimized(!1,!0),this.fadeTransitions=[]}addTask(e){const t={message:e,id:this.taskIDGen++};return this.tasks.push(t),this.update(),t.id}removeTask(e){let t=0;for(let n of this.tasks){if(n.id===e){this.tasks.splice(t,1);break}t++}this.update()}removeAllTasks(){this.tasks=[],this.update()}setMessageForTask(e,t){for(let n of this.tasks)if(n.id===e){n.message=t;break}this.update()}update(){this.tasks.length>0?(this.show(),this.setMessage(this.tasks[this.tasks.length-1].message)):this.hide()}show(){this.spinnerContainerOuter.style.display="block",this.visible=!0}hide(){this.spinnerContainerOuter.style.display="none",this.visible=!1}setContainer(e){this.container&&this.container.removeChild(this.spinnerContainerOuter),e&&(this.container=e,this.container.appendChild(this.spinnerContainerOuter),this.spinnerContainerOuter.style.zIndex=this.container.style.zIndex+1)}setMinimized(e,t){const n=(e,t,n,s,r)=>{n?e.style.display=t?s:"none":this.fadeTransitions[r]=((e,t,n,s,r)=>{const i=performance.now();let o="none"===e.style.display?0:parseFloat(e.style.opacity);isNaN(o)&&(o=1);const a=window.setInterval((()=>{const l=performance.now()-i;let c,h=Math.min(l/s,1);h>.999&&(h=1),t?(c=(1-h)*o,c<1e-4&&(c=0)):c=(1-o)*h+o,c>0?(e.style.display=n,e.style.opacity=c):e.style.display="none",h>=1&&(r&&r(),window.clearInterval(a))}),16);return a})(e,!t,s,500,(()=>{this.fadeTransitions[r]=null}))};n(this.spinnerContainerPrimary,!e,t,"block",0),n(this.spinnerContainerMin,e,t,"flex",1),this.minimized=e}setMessage(e){this.messageContainerPrimary.innerHTML=e,this.messageContainerMin.innerHTML=e}}class ee{constructor(e){this.idGen=0,this.tasks=[],this.container=e||document.body,this.progressBarContainerOuter=document.createElement("div"),this.progressBarContainerOuter.className="progressBarOuterContainer",this.progressBarContainerOuter.style.display="none",this.progressBarBox=document.createElement("div"),this.progressBarBox.className="progressBarBox",this.progressBarBackground=document.createElement("div"),this.progressBarBackground.className="progressBarBackground",this.progressBar=document.createElement("div"),this.progressBar.className="progressBar",this.progressBarBackground.appendChild(this.progressBar),this.progressBarBox.appendChild(this.progressBarBackground),this.progressBarContainerOuter.appendChild(this.progressBarBox);const t=document.createElement("style");t.innerHTML="\n\n            .progressBarOuterContainer {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .progressBarBox {\n                z-index:99999;\n                padding: 7px 9px 5px 7px;\n                background-color: rgba(190, 190, 190, 0.75);\n                border: #555555 1px solid;\n                border-radius: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                width: 180px;\n                height: 30px;\n                pointer-events: auto;\n            }\n\n            .progressBarBackground {\n                width: 100%;\n                height: 25px;\n                border-radius:10px;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #444444 1px solid;\n                box-shadow: inset 0 0 10px #333333;\n            }\n\n            .progressBar {\n                height: 25px;\n                width: 0px;\n                border-radius:10px;\n                background-color: rgba(0, 200, 0, 0.75);\n                box-shadow: inset 0 0 10px #003300;\n            }\n\n        ",this.progressBarContainerOuter.appendChild(t),this.container.appendChild(this.progressBarContainerOuter)}show(){this.progressBarContainerOuter.style.display="block"}hide(){this.progressBarContainerOuter.style.display="none"}setProgress(e){this.progressBar.style.width=e+"%"}setContainer(e){this.container&&this.container.removeChild(this.progressBarContainerOuter),e&&(this.container=e,this.container.appendChild(this.progressBarContainerOuter),this.progressBarContainerOuter.style.zIndex=this.container.style.zIndex+1)}}class te{constructor(e){this.container=e||document.body,this.infoCells={};const t=[["Camera position","cameraPosition"],["Camera look-at","cameraLookAt"],["Camera up","cameraUp"],["Camera mode","orthographicCamera"],["Cursor position","cursorPosition"],["FPS","fps"],["Rendering:","renderSplatCount"],["Sort time","sortTime"],["Render window","renderWindow"],["Focal adjustment","focalAdjustment"],["Splat scale","splatScale"],["Point cloud mode","pointCloudMode"]];this.infoPanelContainer=document.createElement("div");const n=document.createElement("style");n.innerHTML="\n\n            .infoPanel {\n                width: 430px;\n                padding: 10px;\n                background-color: rgba(50, 50, 50, 0.85);\n                border: #555555 2px solid;\n                color: #dddddd;\n                border-radius: 10px;\n                z-index: 9999;\n                font-family: arial;\n                font-size: 11pt;\n                text-align: left;\n                margin: 0;\n                top: 10px;\n                left:10px;\n                position: absolute;\n                pointer-events: auto;\n            }\n\n            .info-panel-cell {\n                margin-bottom: 5px;\n                padding-bottom: 2px;\n            }\n\n            .label-cell {\n                font-weight: bold;\n                font-size: 12pt;\n                width: 140px;\n            }\n\n        ",this.infoPanelContainer.append(n),this.infoPanel=document.createElement("div"),this.infoPanel.className="infoPanel";const s=document.createElement("div");s.style.display="table";for(let e of t){const t=document.createElement("div");t.style.display="table-row",t.className="info-panel-row";const n=document.createElement("div");n.style.display="table-cell",n.innerHTML=`${e[0]}: `,n.classList.add("info-panel-cell","label-cell");const r=document.createElement("div");r.style.display="table-cell",r.style.width="10px",r.innerHTML=" ",r.className="info-panel-cell";const i=document.createElement("div");i.style.display="table-cell",i.innerHTML="",i.className="info-panel-cell",this.infoCells[e[1]]=i,t.appendChild(n),t.appendChild(r),t.appendChild(i),s.appendChild(t)}this.infoPanel.appendChild(s),this.infoPanelContainer.append(this.infoPanel),this.infoPanelContainer.style.display="none",this.container.appendChild(this.infoPanelContainer),this.visible=!1}update=function(e,t,n,s,r,i,o,a,l,c,h,d,p,u){const m=`${t.x.toFixed(5)}, ${t.y.toFixed(5)}, ${t.z.toFixed(5)}`;if(this.infoCells.cameraPosition.innerHTML!==m&&(this.infoCells.cameraPosition.innerHTML=m),n){const e=n,t=`${e.x.toFixed(5)}, ${e.y.toFixed(5)}, ${e.z.toFixed(5)}`;this.infoCells.cameraLookAt.innerHTML!==t&&(this.infoCells.cameraLookAt.innerHTML=t)}const f=`${s.x.toFixed(5)}, ${s.y.toFixed(5)}, ${s.z.toFixed(5)}`;if(this.infoCells.cameraUp.innerHTML!==f&&(this.infoCells.cameraUp.innerHTML=f),this.infoCells.orthographicCamera.innerHTML=r?"Orthographic":"Perspective",i){const e=i,t=`${e.x.toFixed(5)}, ${e.y.toFixed(5)}, ${e.z.toFixed(5)}`;this.infoCells.cursorPosition.innerHTML=t}else this.infoCells.cursorPosition.innerHTML="N/A";this.infoCells.fps.innerHTML=o,this.infoCells.renderWindow.innerHTML=`${e.x} x ${e.y}`,this.infoCells.renderSplatCount.innerHTML=`${l} splats out of ${a} (${c.toFixed(2)}%)`,this.infoCells.sortTime.innerHTML=`${h.toFixed(3)} ms`,this.infoCells.focalAdjustment.innerHTML=`${d.toFixed(3)}`,this.infoCells.splatScale.innerHTML=`${p.toFixed(3)}`,this.infoCells.pointCloudMode.innerHTML=`${u}`};setContainer(e){this.container&&this.container.removeChild(this.infoPanelContainer),e&&(this.container=e,this.container.appendChild(this.infoPanelContainer),this.infoPanelContainer.style.zIndex=this.container.style.zIndex+1)}show(){this.infoPanelContainer.style.display="block",this.visible=!0}hide(){this.infoPanelContainer.style.display="none",this.visible=!1}}class ne extends s.Object3D{constructor(e=new s.Vector3(0,0,1),t=new s.Vector3(0,0,0),n=1,r=.1,i=16776960,o=.2*n,a=.2*o){super(),this.type="ArrowHelper";const l=new s.CylinderGeometry(r,r,n,32);l.translate(0,n/2,0);const c=new s.CylinderGeometry(0,a,o,32);c.translate(0,n,0),this.position.copy(t),this.line=new s.Mesh(l,new s.MeshBasicMaterial({color:i,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new s.Mesh(c,new s.MeshBasicMaterial({color:i,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{_axis.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(_axis,t)}}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class se{constructor(e){this.threeScene=e,this.splatRenderTarget=null,this.renderTargetCopyQuad=null,this.renderTargetCopyCamera=null,this.meshCursor=null,this.focusMarker=null,this.controlPlane=null,this.debugRoot=null,this.secondaryDebugRoot=null}updateSplatRenderTargetForRenderDimensions(e,t){this.destroySplatRendertarget(),this.splatRenderTarget=new s.WebGLRenderTarget(e,t,{format:s.RGBAFormat,stencilBuffer:!1,depthBuffer:!0}),this.splatRenderTarget.depthTexture=new s.DepthTexture(e,t),this.splatRenderTarget.depthTexture.format=s.DepthFormat,this.splatRenderTarget.depthTexture.type=s.UnsignedIntType}destroySplatRendertarget(){this.splatRenderTarget&&(this.splatRenderTarget=null)}setupRenderTargetCopyObjects(){const e=new s.ShaderMaterial({vertexShader:"\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            ",fragmentShader:"\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            ",uniforms:{sourceColorTexture:{type:"t",value:null},sourceDepthTexture:{type:"t",value:null}},depthWrite:!1,depthTest:!1,transparent:!0,blending:s.CustomBlending,blendSrc:s.SrcAlphaFactor,blendSrcAlpha:s.SrcAlphaFactor,blendDst:s.OneMinusSrcAlphaFactor,blendDstAlpha:s.OneMinusSrcAlphaFactor});e.extensions.fragDepth=!0,this.renderTargetCopyQuad=new s.Mesh(new s.PlaneGeometry(2,2),e),this.renderTargetCopyCamera=new s.OrthographicCamera(-1,1,1,-1,0,1)}destroyRenderTargetCopyObjects(){this.renderTargetCopyQuad&&(h(this.renderTargetCopyQuad),this.renderTargetCopyQuad=null)}setupMeshCursor(){if(!this.meshCursor){const e=new s.ConeGeometry(.5,1.5,32),t=new s.MeshBasicMaterial({color:16777215}),n=new s.Mesh(e,t);n.rotation.set(0,0,Math.PI),n.position.set(0,1,0);const r=new s.Mesh(e,t);r.position.set(0,-1,0);const i=new s.Mesh(e,t);i.rotation.set(0,0,Math.PI/2),i.position.set(1,0,0);const o=new s.Mesh(e,t);o.rotation.set(0,0,-Math.PI/2),o.position.set(-1,0,0),this.meshCursor=new s.Object3D,this.meshCursor.add(n),this.meshCursor.add(r),this.meshCursor.add(i),this.meshCursor.add(o),this.meshCursor.scale.set(.1,.1,.1),this.threeScene.add(this.meshCursor),this.meshCursor.visible=!1}}destroyMeshCursor(){this.meshCursor&&(h(this.meshCursor),this.threeScene.remove(this.meshCursor),this.meshCursor=null)}setMeshCursorVisibility(e){this.meshCursor.visible=e}getMeschCursorVisibility(){return this.meshCursor.visible}setMeshCursorPosition(e){this.meshCursor.position.copy(e)}positionAndOrientMeshCursor(e,t){this.meshCursor.position.copy(e),this.meshCursor.up.copy(t.up),this.meshCursor.lookAt(t.position)}setupFocusMarker(){if(!this.focusMarker){const e=new s.SphereGeometry(.5,32,32),t=se.buildFocusMarkerMaterial();t.depthTest=!1,t.depthWrite=!1,t.transparent=!0,this.focusMarker=new s.Mesh(e,t)}}destroyFocusMarker(){this.focusMarker&&(h(this.focusMarker),this.focusMarker=null)}updateFocusMarker=function(){const e=new s.Vector3,t=new s.Matrix4,n=new s.Vector3;return function(s,r,i){t.copy(r.matrixWorld).invert(),e.copy(s).applyMatrix4(t),e.normalize().multiplyScalar(10),e.applyMatrix4(r.matrixWorld),n.copy(r.position).sub(s);const o=n.length();this.focusMarker.position.copy(s),this.focusMarker.scale.set(o,o,o),this.focusMarker.material.uniforms.realFocusPosition.value.copy(s),this.focusMarker.material.uniforms.viewport.value.copy(i),this.focusMarker.material.uniformsNeedUpdate=!0}}();setFocusMarkerVisibility(e){this.focusMarker.visible=e}setFocusMarkerOpacity(e){this.focusMarker.material.uniforms.opacity.value=e,this.focusMarker.material.uniformsNeedUpdate=!0}getFocusMarkerOpacity(){return this.focusMarker.material.uniforms.opacity.value}setupControlPlane(){if(!this.controlPlane){const e=new s.PlaneGeometry(1,1);e.rotateX(-Math.PI/2);const t=new s.MeshBasicMaterial({color:16777215});t.transparent=!0,t.opacity=.6,t.depthTest=!1,t.depthWrite=!1,t.side=s.DoubleSide;const n=new s.Mesh(e,t),r=new s.Vector3(0,1,0);r.normalize();const i=new s.Vector3(0,0,0),o=new ne(r,i,.5,.01,56576,.1,.03);this.controlPlane=new s.Object3D,this.controlPlane.add(n),this.controlPlane.add(o)}}destroyControlPlane(){this.controlPlane&&(h(this.controlPlane),this.controlPlane=null)}setControlPlaneVisibility(e){this.controlPlane.visible=e}positionAndOrientControlPlane=function(){const e=new s.Quaternion,t=new s.Vector3(0,1,0);return function(n,s){e.setFromUnitVectors(t,s),this.controlPlane.position.copy(n),this.controlPlane.quaternion.copy(e)}}();addDebugMeshes(){this.debugRoot=this.createDebugMeshes(),this.secondaryDebugRoot=this.createSecondaryDebugMeshes(),this.threeScene.add(this.debugRoot),this.threeScene.add(this.secondaryDebugRoot)}destroyDebugMeshes(){for(let e of[this.debugRoot,this.secondaryDebugRoot])e&&(h(e),this.threeScene.remove(e));this.debugRoot=null,this.secondaryDebugRoot=null}createDebugMeshes(e){const t=new s.SphereGeometry(1,32,32),n=new s.Object3D,r=(r,i)=>{let o=new s.Mesh(t,se.buildDebugMaterial(r));o.renderOrder=e,n.add(o),o.position.fromArray(i)};return r(16711680,[-50,0,0]),r(16711680,[50,0,0]),r(65280,[0,0,-50]),r(65280,[0,0,50]),r(16755200,[5,0,5]),n}createSecondaryDebugMeshes(e){const t=new s.BoxGeometry(3,3,3),n=new s.Object3D;const r=r=>{let i=new s.Mesh(t,se.buildDebugMaterial(12303291));i.renderOrder=e,n.add(i),i.position.fromArray(r)};let i=10;return r([-10,0,-10]),r([-10,0,i]),r([i,0,-10]),r([i,0,i]),n}static buildDebugMaterial(e){const t={color:{type:"v3",value:new s.Color(e)}},n=new s.ShaderMaterial({uniforms:t,vertexShader:"\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        ",fragmentShader:"\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        ",transparent:!1,depthTest:!0,depthWrite:!0,side:s.FrontSide});return n.extensions.fragDepth=!0,n}static buildFocusMarkerMaterial(e){const t={color:{type:"v3",value:new s.Color(e)},realFocusPosition:{type:"v3",value:new s.Vector3},viewport:{type:"v2",value:new s.Vector2},opacity:{value:0}};return new s.ShaderMaterial({uniforms:t,vertexShader:"\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        ",fragmentShader:"\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        ",transparent:!0,depthTest:!1,depthWrite:!1,side:s.FrontSide})}dispose(){this.destroyMeshCursor(),this.destroyFocusMarker(),this.destroyDebugMeshes(),this.destroyControlPlane(),this.destroyRenderTargetCopyObjects(),this.destroySplatRendertarget()}}const re=new s.Vector3(1,0,0),ie=new s.Vector3(0,1,0),oe=new s.Vector3(0,0,1);class ae{constructor(e=new s.Vector3,t=new s.Vector3){this.origin=new s.Vector3,this.direction=new s.Vector3,this.setParameters(e,t)}setParameters(e,t){this.origin.copy(e),this.direction.copy(t).normalize()}boxContainsPoint(e,t,n){return!(t.x<e.min.x-n||t.x>e.max.x+n||t.y<e.min.y-n||t.y>e.max.y+n||t.z<e.min.z-n||t.z>e.max.z+n)}intersectBox=function(){const e=new s.Vector3,t=[],n=[],r=[];return function(s,i){if(n[0]=this.origin.x,n[1]=this.origin.y,n[2]=this.origin.z,r[0]=this.direction.x,r[1]=this.direction.y,r[2]=this.direction.z,this.boxContainsPoint(s,this.origin,1e-4))return i&&(i.origin.copy(this.origin),i.normal.set(0,0,0),i.distance=-1),!0;for(let o=0;o<3;o++){if(0==r[o])continue;const a=0==o?re:1==o?ie:oe,l=r[o]<0?s.max:s.min;let c=-Math.sign(r[o]);t[0]=0==o?l.x:1==o?l.y:l.z;let h=t[0]-n[o];if(h*c<0){const l=(o+1)%3,d=(o+2)%3;if(t[2]=r[l]/r[o]*h+n[l],t[1]=r[d]/r[o]*h+n[d],e.set(t[o],t[d],t[l]),this.boxContainsPoint(s,e,1e-4))return i&&(i.origin.copy(e),i.normal.copy(a).multiplyScalar(c),i.distance=e.sub(this.origin).length()),!0}}return!1}}();intersectSphere=function(){const e=new s.Vector3;return function(t,n,s){e.copy(t).sub(this.origin);const r=e.dot(this.direction),i=r*r,o=e.dot(e)-i,a=n*n;if(o>a)return!1;const l=Math.sqrt(a-o),c=r-l,h=r+l;if(h<0)return!1;let d=c<0?h:c;return s&&(s.origin.copy(this.origin).addScaledVector(this.direction,d),s.normal.copy(s.origin).sub(t).normalize(),s.distance=d),!0}}()}class le{constructor(){this.origin=new s.Vector3,this.normal=new s.Vector3,this.distance=0,this.splatIndex=0}set(e,t,n,s){this.origin.copy(e),this.normal.copy(t),this.distance=n,this.splatIndex=s}clone(){const e=new le;return e.origin.copy(this.origin),e.normal.copy(this.normal),e.distance=this.distance,e.splatIndex=this.splatIndex,e}}class ce{constructor(e,t,n=!1){this.ray=new ae(e,t),this.raycastAgainstTrueSplatEllipsoid=n}setFromCameraAndScreenPosition=function(){const e=new s.Vector2;return function(t,n,s){if(e.x=n.x/s.x*2-1,e.y=(s.y-n.y)/s.y*2-1,t.isPerspectiveCamera)this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t;else{if(!t.isOrthographicCamera)throw new Error("Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type");this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t}}}();intersectSplatMesh=function(){const e=new s.Matrix4,t=new s.Matrix4,n=new s.Matrix4,r=new ae,i=new s.Vector3;return function(s,o=[]){const a=s.getSplatTree();if(a){for(let l=0;l<a.subTrees.length;l++){const c=a.subTrees[l];t.copy(s.matrixWorld),s.dynamicMode&&(s.getSceneTransform(l,n),t.multiply(n)),e.copy(t).invert(),r.origin.copy(this.ray.origin).applyMatrix4(e),r.direction.copy(this.ray.origin).add(this.ray.direction),r.direction.applyMatrix4(e).sub(r.origin).normalize();const h=[];c.rootNode&&this.castRayAtSplatTreeNode(r,a,c.rootNode,h),h.forEach((e=>{e.origin.applyMatrix4(t),e.normal.applyMatrix4(t).normalize(),e.distance=i.copy(e.origin).sub(this.ray.origin).length()})),o.push(...h)}return o.sort(((e,t)=>e.distance>t.distance?1:-1)),o}}}();castRayAtSplatTreeNode=function(){const e=new s.Vector4,t=new s.Vector3,n=new s.Vector3,r=new s.Quaternion,i=new le,o=1e-7,a=new s.Vector3(0,0,0),l=new s.Matrix4,c=new s.Matrix4,h=new s.Matrix4,d=new s.Matrix4,p=new s.Matrix4,u=new ae;return function(s,m,f,g=[]){if(s.intersectBox(f.boundingBox)){if(f.data&&f.data.indexes&&f.data.indexes.length>0)for(let S=0;S<f.data.indexes.length;S++){const y=f.data.indexes[S];if(m.splatMesh.getSplatColor(y,e),m.splatMesh.getSplatCenter(y,t),m.splatMesh.getSplatScaleAndRotation(y,n,r),!(n.x<=o||n.y<=o||n.z<=o))if(this.raycastAgainstTrueSplatEllipsoid){c.makeScale(n.x,n.y,n.z),h.makeRotationFromQuaternion(r);const o=2*Math.log10(e.w);if(l.makeScale(o,o,o),p.copy(l).multiply(h).multiply(c),d.copy(p).invert(),u.origin.copy(s.origin).sub(t).applyMatrix4(d),u.direction.copy(s.origin).add(s.direction).sub(t),u.direction.applyMatrix4(d).sub(u.origin).normalize(),u.intersectSphere(a,1,i)){const e=i.clone();e.splatIndex=y,e.origin.applyMatrix4(p).add(t),g.push(e)}}else{const e=(n.x+n.y+n.z)/3;if(s.intersectSphere(t,e,i)){const e=i.clone();e.splatIndex=y,g.push(e)}}}if(f.children&&f.children.length>0)for(let e of f.children)this.castRayAtSplatTreeNode(s,m,e,g);return g}}}()}class he{constructor(e,t=new s.Vector3,n=new s.Quaternion,r=new s.Vector3(1,1,1),i=1){this.splatBuffer=e,this.position=t.clone(),this.quaternion=n.clone(),this.scale=r.clone(),this.transform=new s.Matrix4,this.minimumAlpha=i,this.updateTransform()}copyTransformData(e){this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.transform.copy(e.transform)}updateTransform(){this.transform.compose(this.position,this.quaternion,this.scale)}}class de{static idGen=0;constructor(e,t,n,r){this.min=(new s.Vector3).copy(e),this.max=(new s.Vector3).copy(t),this.boundingBox=new s.Box3(this.min,this.max),this.center=(new s.Vector3).copy(this.max).sub(this.min).multiplyScalar(.5).add(this.min),this.depth=n,this.children=[],this.data=null,this.id=r||de.idGen++}}class pe{constructor(e,t){this.maxDepth=e,this.maxCentersPerNode=t,this.sceneDimensions=new s.Vector3,this.sceneMin=new s.Vector3,this.sceneMax=new s.Vector3,this.rootNode=null,this.nodesWithIndexes=[],this.splatMesh=null}static convertWorkerSubTreeNode(e){const t=(new s.Vector3).fromArray(e.min),n=(new s.Vector3).fromArray(e.max),r=new de(t,n,e.depth,e.id);if(e.data.indexes){r.data={indexes:[]};for(let t of e.data.indexes)r.data.indexes.push(t)}if(e.children)for(let t of e.children)r.children.push(pe.convertWorkerSubTreeNode(t));return r}static convertWorkerSubTree(e,t){const n=new pe(e.maxDepth,e.maxCentersPerNode);n.sceneMin=(new s.Vector3).fromArray(e.sceneMin),n.sceneMax=(new s.Vector3).fromArray(e.sceneMax),n.splatMesh=t,n.rootNode=pe.convertWorkerSubTreeNode(e.rootNode);const r=(e,t)=>{0===e.children.length&&t(e);for(let n of e.children)r(n,t)};return n.nodesWithIndexes=[],r(n.rootNode,(e=>{e.data&&e.data.indexes&&e.data.indexes.length>0&&n.nodesWithIndexes.push(e)})),n}}function ue(e){let t=0;class n{constructor(e,t){this.min=[e[0],e[1],e[2]],this.max=[t[0],t[1],t[2]]}containsPoint(e){return e[0]>=this.min[0]&&e[0]<=this.max[0]&&e[1]>=this.min[1]&&e[1]<=this.max[1]&&e[2]>=this.min[2]&&e[2]<=this.max[2]}}class s{constructor(e,t){this.maxDepth=e,this.maxCentersPerNode=t,this.sceneDimensions=[],this.sceneMin=[],this.sceneMax=[],this.rootNode=null,this.addedIndexes={},this.nodesWithIndexes=[],this.splatMesh=null,this.disposed=!1}}class r{constructor(e,n,s,r){this.min=[e[0],e[1],e[2]],this.max=[n[0],n[1],n[2]],this.center=[.5*(n[0]-e[0])+e[0],.5*(n[1]-e[1])+e[1],.5*(n[2]-e[2])+e[2]],this.depth=s,this.children=[],this.data=null,this.id=r||t++}}processSplatTreeNode=function(e,t,s,i){const o=t.data.indexes.length;if(o<e.maxCentersPerNode||t.depth>e.maxDepth){const n=[];for(let s=0;s<t.data.indexes.length;s++)e.addedIndexes[t.data.indexes[s]]||(n.push(t.data.indexes[s]),e.addedIndexes[t.data.indexes[s]]=!0);return t.data.indexes=n,t.data.indexes.sort(((e,t)=>e>t?1:-1)),void e.nodesWithIndexes.push(t)}const a=[t.max[0]-t.min[0],t.max[1]-t.min[1],t.max[2]-t.min[2]],l=[.5*a[0],.5*a[1],.5*a[2]],c=[t.min[0]+l[0],t.min[1]+l[1],t.min[2]+l[2]],h=[new n([c[0]-l[0],c[1],c[2]-l[2]],[c[0],c[1]+l[1],c[2]]),new n([c[0],c[1],c[2]-l[2]],[c[0]+l[0],c[1]+l[1],c[2]]),new n([c[0],c[1],c[2]],[c[0]+l[0],c[1]+l[1],c[2]+l[2]]),new n([c[0]-l[0],c[1],c[2]],[c[0],c[1]+l[1],c[2]+l[2]]),new n([c[0]-l[0],c[1]-l[1],c[2]-l[2]],[c[0],c[1],c[2]]),new n([c[0],c[1]-l[1],c[2]-l[2]],[c[0]+l[0],c[1],c[2]]),new n([c[0],c[1]-l[1],c[2]],[c[0]+l[0],c[1],c[2]+l[2]]),new n([c[0]-l[0],c[1]-l[1],c[2]],[c[0],c[1],c[2]+l[2]])],d=[],p=[];for(let e=0;e<h.length;e++)d[e]=0,p[e]=[];const u=[0,0,0];for(let e=0;e<o;e++){const n=t.data.indexes[e],r=s[n];u[0]=i[r],u[1]=i[r+1],u[2]=i[r+2];for(let e=0;e<h.length;e++)h[e].containsPoint(u)&&(d[e]++,p[e].push(n))}for(let e=0;e<h.length;e++){const n=new r(h[e].min,h[e].max,t.depth+1);n.data={indexes:p[e]},t.children.push(n)}t.data={};for(let n of t.children)processSplatTreeNode(e,n,s,i)};const i=(e,t,n)=>{const i=[0,0,0],o=[0,0,0],a=[],l=Math.floor(e.length/4);for(let t=0;t<l;t++){const n=4*t,s=e[n],r=e[n+1],l=e[n+2],c=Math.round(e[n+3]);(0===t||s<i[0])&&(i[0]=s),(0===t||s>o[0])&&(o[0]=s),(0===t||r<i[1])&&(i[1]=r),(0===t||r>o[1])&&(o[1]=r),(0===t||l<i[2])&&(i[2]=l),(0===t||l>o[2])&&(o[2]=l),a.push(c)}const c=new s(t,n);return c.sceneMin=i,c.sceneMax=o,c.rootNode=new r(c.sceneMin,c.sceneMax,0),c.rootNode.data={indexes:a},c};e.onmessage=t=>{t.data.process&&function(t,n,s){const r=[];for(let e of t){const t=Math.floor(e.length/4);for(let n=0;n<t;n++){const t=4*n;r[Math.round(e[t+3])]=t}}const o=[];for(let e of t){const t=i(e,n,s);o.push(t),processSplatTreeNode(t,t.rootNode,r,e)}e.postMessage({subTrees:o})}(t.data.process.centers,t.data.process.maxDepth,t.data.process.maxCentersPerNode)}}class me{constructor(e,t){this.maxDepth=e,this.maxCentersPerNode=t,this.subTrees=[],this.splatMesh=null}dispose(){this.diposeSplatTreeWorker(),this.disposed=!0}diposeSplatTreeWorker(){this.splatTreeWorker&&this.splatTreeWorker.terminate(),this.splatTreeWorker=null}processSplatMesh=function(e,t=(()=>!0),n,r){this.splatTreeWorker||(this.splatTreeWorker=new Worker(URL.createObjectURL(new Blob(["(",ue.toString(),")(self)"],{type:"application/javascript"})))),this.splatMesh=e,this.subTrees=[];const i=new s.Vector3,o=(n,s)=>{const r=new Float32Array(4*s);let o=0;for(let a=0;a<s;a++){const s=a+n;if(t(s)){e.getSplatCenter(s,i);const t=4*o;r[t]=i.x,r[t+1]=i.y,r[t+2]=i.z,r[t+3]=s,o++}}return r};return new Promise((t=>{const s=()=>!!this.disposed&&(this.diposeSplatTreeWorker(),t(),!0);n&&n(!1),d((()=>{if(s())return;const i=[];if(e.dynamicMode){let t=0;for(let n=0;n<e.scenes.length;n++){const s=e.getScene(n).splatBuffer.getSplatCount(),r=o(t,s);i.push(r),t+=s}}else{const t=o(0,e.getSplatCount());i.push(t)}this.splatTreeWorker.onmessage=n=>{s()||n.data.subTrees&&(r&&r(!1),d((()=>{if(!s()){for(let t of n.data.subTrees){const n=pe.convertWorkerSubTree(t,e);this.subTrees.push(n)}this.diposeSplatTreeWorker(),r&&r(!0),d((()=>{t()}))}})))},d((()=>{if(s())return;n&&n(!0);const e=i.map((e=>e.buffer));!function(e,t,n,s,r){e.postMessage({process:{centers:t,maxDepth:s,maxCentersPerNode:r}},n)}(this.splatTreeWorker,i,e,this.maxDepth,this.maxCentersPerNode)}))}))}))};countLeaves(){let e=0;return this.visitLeaves((()=>{e++})),e}visitLeaves(e){const t=(e,n)=>{0===e.children.length&&n(e);for(let s of e.children)t(s,n)};for(let n of this.subTrees)t(n.rootNode,e)}}function fe(e){const t={};function n(n){if(void 0!==t[n])return t[n];let s;switch(n){case"WEBGL_depth_texture":s=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":s=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":s=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":s=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:s=e.getExtension(n)}return t[n]=s,s}return{has:function(e){return null!==n(e)},init:function(e){e.isWebGL2?(n("EXT_color_buffer_float"),n("WEBGL_clip_cull_distance")):(n("WEBGL_depth_texture"),n("OES_texture_float"),n("OES_texture_half_float"),n("OES_texture_half_float_linear"),n("OES_standard_derivatives"),n("OES_element_index_uint"),n("OES_vertex_array_object"),n("ANGLE_instanced_arrays")),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture")},get:function(e){const t=n(e);return null===t&&console.warn("THREE.WebGLRenderer: "+e+" extension not supported."),t}}}function ge(e,t,n){let s;function r(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const i="undefined"!=typeof WebGL2RenderingContext&&"WebGL2RenderingContext"===e.constructor.name;let o=void 0!==n.precision?n.precision:"highp";const a=r(o);a!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",a,"instead."),o=a);const l=i||t.has("WEBGL_draw_buffers"),c=!0===n.logarithmicDepthBuffer,h=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),d=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),p=e.getParameter(e.MAX_TEXTURE_SIZE),u=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),m=e.getParameter(e.MAX_VERTEX_ATTRIBS),f=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),g=e.getParameter(e.MAX_VARYING_VECTORS),S=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),y=d>0,C=i||t.has("OES_texture_float");return{isWebGL2:i,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==s)return s;if(!0===t.has("EXT_texture_filter_anisotropic")){const n=t.get("EXT_texture_filter_anisotropic");s=e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else s=0;return s},getMaxPrecision:r,precision:o,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:d,maxTextureSize:p,maxCubemapSize:u,maxAttributes:m,maxVertexUniforms:f,maxVaryings:g,maxFragmentUniforms:S,vertexTextures:y,floatFragmentTextures:C,floatVertexTextures:y&&C,maxSamples:i?e.getParameter(e.MAX_SAMPLES):0}}const Se={Default:0,Gradual:1,Instant:2},ye={None:0,Error:1,Warning:2,Info:3,Debug:4},Ce=new s.BufferGeometry,Ae=new s.MeshBasicMaterial;class xe extends s.Mesh{constructor(e=!0,t=!1,n=1,r=!0,i=!1,o=!1,a=2048,l=ye.None,c=0){super(Ce,Ae),this.renderer=void 0,this.halfPrecisionCovariancesOnGPU=t,this.dynamicMode=e,this.devicePixelRatio=n,this.enableDistancesComputationOnGPU=r,this.integerBasedDistancesComputation=i,this.antialiased=o,this.maxScreenSpaceSplatSize=a,this.logLevel=l,this.sphericalHarmonicsDegree=c,this.minSphericalHarmonicsDegree=0,this.scenes=[],this.splatTree=null,this.baseSplatTree=null,this.splatDataTextures={},this.distancesTransformFeedback={id:null,vertexShader:null,fragmentShader:null,program:null,centersBuffer:null,transformIndexesBuffer:null,outDistancesBuffer:null,centersLoc:-1,modelViewProjLoc:-1,transformIndexesLoc:-1,transformsLocs:[]},this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSceneIndexMap=[],this.lastBuildSplatCount=0,this.lastBuildScenes=[],this.lastBuildMaxSplatCount=0,this.lastBuildSceneCount=0,this.firstRenderTime=-1,this.finalBuild=!1,this.webGLUtils=null,this.boundingBox=new s.Box3,this.calculatedSceneCenter=new s.Vector3,this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.visibleRegionChanging=!1,this.splatScale=1,this.pointCloudModeEnabled=!1,this.disposed=!1,this.lastRenderer=null,this.visible=!1}static buildMaterial(e=!1,t=!1,n=2048,r=1,i=!1,o=0){let a="\n            precision highp float;\n            #include <common>\n\n            attribute uint splatIndex;\n\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D centersColorsTexture;\n            uniform highp sampler2D sphericalHarmonicsTexture;";e&&(a+=`\n                uniform highp usampler2D transformIndexesTexture;\n                uniform highp mat4 transforms[${m.MaxScenes}];\n                uniform vec2 transformIndexesTextureSize;\n            `),a+=`\n            uniform vec2 focal;\n            uniform float orthoZoom;\n            uniform int orthographicMode;\n            uniform int pointCloudModeEnabled;\n            uniform float inverseFocalAdjustment;\n            uniform vec2 viewport;\n            uniform vec2 basisViewport;\n            uniform vec2 covariancesTextureSize;\n            uniform vec2 centersColorsTextureSize;\n            uniform int sphericalHarmonicsDegree;\n            uniform vec2 sphericalHarmonicsTextureSize;\n            uniform int sphericalHarmonics8BitMode;\n            uniform float visibleRegionRadius;\n            uniform float visibleRegionFadeStartRadius;\n            uniform float firstRenderTime;\n            uniform float currentTime;\n            uniform int fadeInComplete;\n            uniform vec3 sceneCenter;\n            uniform float splatScale;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            const float sqrt8 = sqrt(8.0);\n            const float minAlpha = 1.0 / 255.0;\n\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\n            vec4 uintToRGBAVec (uint u) {\n               uvec4 urgba = mask4 & u;\n               urgba = urgba >> shift4;\n               vec4 rgba = vec4(urgba) * encodeNorm4;\n               return rgba;\n            }\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            vec2 getDataUVF(in uint sIndex, in float stride, in uint offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(uint(float(sIndex) * stride) + offset) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            const float SH_C1 = 0.4886025119029199f;\n            const float[5] SH_C2 = float[](1.0925484, -1.0925484, 0.3153916, -1.0925484, 0.5462742);\n\n            const float SphericalHarmonics8BitCompressionRange = ${m.SphericalHarmonics8BitCompressionRange.toFixed(1)};\n            const float SphericalHarmonics8BitCompressionHalfRange = SphericalHarmonics8BitCompressionRange / 2.0;\n            const vec3 vec8BitSHShift = vec3(SphericalHarmonics8BitCompressionHalfRange);\n\n            void main () {\n\n                uint oddOffset = splatIndex & uint(0x00000001);\n                uint doubleOddOffset = oddOffset * uint(2);\n                bool isEven = oddOffset == uint(0);\n                uint nearestEvenIndex = splatIndex - oddOffset;\n                float fOddOffset = float(oddOffset);\n\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));`,a+=e?"\n                    uint transformIndex = texture(transformIndexesTexture, getDataUV(1, 0, transformIndexesTextureSize)).r;\n                    mat4 transform = transforms[transformIndex];\n                    mat4 transformModelViewMatrix = modelViewMatrix * transform;\n                ":"mat4 transformModelViewMatrix = modelViewMatrix;",a+="\n                vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                float clip = 1.2 * clipCenter.w;\n                if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n\n                vPosition = position.xy;\n                vColor = uintToRGBAVec(sampledCenterColor.r);\n            ",o>=1&&(a+="   \n                if (sphericalHarmonicsDegree >= 1) {\n                ",a+=e?"\n                        mat4 mTransform = modelMatrix * transform;\n                        vec3 worldViewDir = normalize(splatCenter - vec3(inverse(mTransform) * vec4(cameraPosition, 1.0)));\n                    ":"\n                        vec3 worldViewDir = normalize(splatCenter - cameraPosition);\n                    ",a+=o>=2?"\n                        vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, getDataUV(6, 0, sphericalHarmonicsTextureSize));\n                        vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, getDataUV(6, 1, sphericalHarmonicsTextureSize));\n                        vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, getDataUV(6, 2, sphericalHarmonicsTextureSize));\n                        vec3 sh1 = sampledSH0123.rgb;\n                        vec3 sh2 = vec3(sampledSH0123.a, sampledSH4567.rg);\n                        vec3 sh3 = vec3(sampledSH4567.ba, sampledSH891011.r);\n                    ":"\n                        vec2 shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset, sphericalHarmonicsTextureSize);\n                        vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(1), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(2), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, shUV);\n\n                        vec3 sh1 = vec3(sampledSH0123.rgb) * (1.0 - fOddOffset) + vec3(sampledSH0123.ba, sampledSH4567.r) * fOddOffset;\n                        vec3 sh2 = vec3(sampledSH0123.a, sampledSH4567.rg) * (1.0 - fOddOffset) + vec3(sampledSH4567.gba) * fOddOffset;\n                        vec3 sh3 = vec3(sampledSH4567.ba, sampledSH891011.r) * (1.0 - fOddOffset) + vec3(sampledSH891011.rgb) * fOddOffset;\n                    ",a+="\n                        if (sphericalHarmonics8BitMode == 1) {\n                            sh1 = sh1 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            sh2 = sh2 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            sh3 = sh3 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                        }\n                        float x = worldViewDir.x;\n                        float y = worldViewDir.y;\n                        float z = worldViewDir.z;\n                        vColor.rgb += SH_C1 * (-sh1 * y + sh2 * z - sh3 * x);\n                ",o>=2&&(a+="\n                        if (sphericalHarmonicsDegree >= 2) {\n                            float xx = x * x;\n                            float yy = y * y;\n                            float zz = z * z;\n                            float xy = x * y;\n                            float yz = y * z;\n                            float xz = x * z;\n\n                            vec4 sampledSH12131415 = texture(sphericalHarmonicsTexture, getDataUV(6, 3, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH16171819 = texture(sphericalHarmonicsTexture, getDataUV(6, 4, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH20212223 = texture(sphericalHarmonicsTexture, getDataUV(6, 5, sphericalHarmonicsTextureSize));\n\n                            vec3 sh4 = sampledSH891011.gba;\n                            vec3 sh5 = sampledSH12131415.rgb;\n                            vec3 sh6 = vec3(sampledSH12131415.a, sampledSH16171819.rg);\n                            vec3 sh7 = vec3(sampledSH16171819.ba, sampledSH20212223.r);\n                            vec3 sh8 = sampledSH20212223.gba;\n\n                            if (sphericalHarmonics8BitMode == 1) {\n                                sh4 = sh4 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh5 = sh5 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh6 = sh6 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh7 = sh7 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh8 = sh8 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            }\n\n                            vColor.rgb +=\n                                (SH_C2[0] * xy) * sh4 +\n                                (SH_C2[1] * yz) * sh5 +\n                                (SH_C2[2] * (2.0 * zz - xx - yy)) * sh6 +\n                                (SH_C2[3] * xz) * sh7 +\n                                (SH_C2[4] * (xx - yy)) * sh8;\n                        }\n                    "),a+="\n               \n                }\n\n                "),a+="\n\n                vec4 sampledCovarianceA = texture(covariancesTexture,\n                                                  getDataUVF(nearestEvenIndex, 1.5, oddOffset, covariancesTextureSize));\n                vec4 sampledCovarianceB = texture(covariancesTexture,\n                                                  getDataUVF(nearestEvenIndex, 1.5, oddOffset + uint(1), covariancesTextureSize));\n\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rgb) * (1.0 - fOddOffset) +\n                                         vec3(sampledCovarianceA.ba, sampledCovarianceB.r) * fOddOffset;\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg) * (1.0 - fOddOffset) +\n                                         vec3(sampledCovarianceB.gba) * fOddOffset;\n\n                // Construct the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n\n                mat3 J;\n                if (orthographicMode == 1) {\n                    // Since the projection is linear, we don't need an approximation\n                    J = transpose(mat3(orthoZoom, 0.0, 0.0,\n                                       0.0, orthoZoom, 0.0,\n                                       0.0, 0.0, 0.0));\n                } else {\n                    // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                    // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                    // require a non-linear component (perspective division) which would yield a non-gaussian result.\n                    float s = 1.0 / (viewCenter.z * viewCenter.z);\n                    J = mat3(\n                        focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                        0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                        0., 0., 0.\n                    );\n                }\n\n                // Concatenate the projection approximation with the model-view transformation\n                mat3 W = transpose(mat3(transformModelViewMatrix));\n                mat3 T = W * J;\n\n                // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n                ",a+=t?"\n                    float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                    cov2Dm[0][0] += 0.3;\n                    cov2Dm[1][1] += 0.3;\n                    float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                    float compensation = sqrt(max(detOrig / detBlur, 0.0));\n                ":"\n                    cov2Dm[0][0] += 0.3;\n                    cov2Dm[1][1] += 0.3;\n                    float compensation = 1.0;\n                ",a+=`\n\n                vColor.a *= compensation;\n\n                if (vColor.a < minAlpha) return;\n\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\n                // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * eigen-value), which is\n                // equal to scaling them by sqrt(8) standard deviations.\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\n                // times the maximum eigen-value, or 3 standard deviations. They then use the inverse 2D covariance\n                // matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by calculating the\n                // full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = traceOver2 - term2;\n\n                if (pointCloudModeEnabled == 1) {\n                    eigenValue1 = eigenValue2 = 0.2;\n                }\n\n                if (eigenValue2 <= 0.0) return;\n\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                // since the eigen vectors are orthogonal, we derive the second one from the first\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n\n                // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\n                vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(n)}.0);\n                vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(n)}.0);\n\n                if (fadeInComplete == 0) {\n                    float opacityAdjust = 1.0;\n                    float centerDist = length(splatCenter - sceneCenter);\n                    float renderTime = max(currentTime - firstRenderTime, 0.0);\n\n                    float fadeDistance = 0.75;\n                    float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\n                    distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\n                                               (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\n                                               distanceLoadFadeInFactor;\n                    opacityAdjust *= distanceLoadFadeInFactor;\n                    vColor.a *= opacityAdjust;\n                }\n\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\n                                 basisViewport * 2.0 * inverseFocalAdjustment;\n\n                vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n                gl_Position = quadPos;\n\n                // Scale the position data we send to the fragment shader\n                vPosition *= sqrt8;\n            }`;const l={sceneCenter:{type:"v3",value:new s.Vector3},fadeInComplete:{type:"i",value:0},orthographicMode:{type:"i",value:0},visibleRegionFadeStartRadius:{type:"f",value:0},visibleRegionRadius:{type:"f",value:0},currentTime:{type:"f",value:0},firstRenderTime:{type:"f",value:0},covariancesTexture:{type:"t",value:null},centersColorsTexture:{type:"t",value:null},sphericalHarmonicsTexture:{type:"t",value:null},focal:{type:"v2",value:new s.Vector2},orthoZoom:{type:"f",value:1},inverseFocalAdjustment:{type:"f",value:1},viewport:{type:"v2",value:new s.Vector2},basisViewport:{type:"v2",value:new s.Vector2},debugColor:{type:"v3",value:new s.Color},covariancesTextureSize:{type:"v2",value:new s.Vector2(1024,1024)},centersColorsTextureSize:{type:"v2",value:new s.Vector2(1024,1024)},sphericalHarmonicsDegree:{type:"i",value:o},sphericalHarmonicsTextureSize:{type:"v2",value:new s.Vector2(1024,1024)},sphericalHarmonics8BitMode:{type:"i",value:0},splatScale:{type:"f",value:r},pointCloudModeEnabled:{type:"i",value:i?1:0}};if(e){l.transformIndexesTexture={type:"t",value:null};const e=[];for(let t=0;t<m.MaxScenes;t++)e.push(new s.Matrix4);l.transforms={type:"mat4",value:e},l.transformIndexesTextureSize={type:"v2",value:new s.Vector2(1024,1024)}}return new s.ShaderMaterial({uniforms:l,vertexShader:a,fragmentShader:"\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n                vec3 color = vColor.rgb;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                gl_FragColor = vec4(color.rgb, opacity);\n            }",transparent:!0,alphaTest:1,blending:s.NormalBlending,depthTest:!0,depthWrite:!1,side:s.DoubleSide})}static buildGeomtery(e){const t=new s.BufferGeometry;t.setIndex([0,1,2,0,2,3]);const n=new Float32Array(12),r=new s.BufferAttribute(n,3);t.setAttribute("position",r),r.setXYZ(0,-1,-1,0),r.setXYZ(1,-1,1,0),r.setXYZ(2,1,1,0),r.setXYZ(3,1,-1,0),r.needsUpdate=!0;const i=(new s.InstancedBufferGeometry).copy(t),o=new Uint32Array(e),a=new s.InstancedBufferAttribute(o,1,!1);return a.setUsage(s.DynamicDrawUsage),i.setAttribute("splatIndex",a),i.instanceCount=0,i}static buildScenes(e,t){const n=[];n.length=e.length;for(let r=0;r<e.length;r++){const i=e[r],o=t[r]||{};let a=o.position||[0,0,0],l=o.rotation||[0,0,0,1],c=o.scale||[1,1,1];const h=(new s.Vector3).fromArray(a),d=(new s.Quaternion).fromArray(l),p=(new s.Vector3).fromArray(c);n[r]=xe.createScene(i,h,d,p,o.splatAlphaRemovalThreshold||1)}return n}static createScene(e,t,n,s,r){return new he(e,t,n,s,r)}static buildSplatIndexMaps(e){const t=[],n=[];let s=0;for(let r=0;r<e.length;r++){const i=e[r].getMaxSplatCount();for(let e=0;e<i;e++)t[s]=e,n[s]=r,s++}return{localSplatIndexMap:t,sceneIndexMap:n}}buildSplatTree=function(e=[],t,n){return new Promise((r=>{this.disposeSplatTree(),this.baseSplatTree=new me(8,1e3);const i=performance.now(),o=new s.Vector4;this.baseSplatTree.processSplatMesh(this,(t=>{this.getSplatColor(t,o);const n=this.getSceneIndexForSplat(t),s=e[n]||1;return o.w>=s}),t,n).then((()=>{const e=performance.now()-i;if(this.logLevel>=ye.Info&&console.log("SplatTree build: "+e+" ms"),this.disposed)r();else{this.splatTree=this.baseSplatTree,this.baseSplatTree=null;let e=0,t=0,n=0,s=0;this.splatTree.visitLeaves((r=>{const i=r.data.indexes.length;i>0&&(t+=i,n=Math.max(n,i),s++,e++)})),this.logLevel>=ye.Info&&(console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`),console.log(`SplatTree leaves with splats:${e}`),t/=s,console.log(`Avg splat count per node: ${t}`),console.log(`Total splat count: ${this.getSplatCount()}`)),r()}}))}))};build(e,t,n=!0,r=!1,i,o){this.sceneOptions=t,this.finalBuild=r;const a=xe.getTotalMaxSplatCountForSplatBuffers(e),l=xe.buildScenes(e,t);if(n)for(let e=0;e<this.scenes.length&&e<l.length;e++){const t=l[e],n=this.getScene(e);t.copyTransformData(n)}this.scenes=l;let c=3;for(let t of e){const e=t.getMinSphericalHarmonicsDegree();e<c&&(c=e)}this.minSphericalHarmonicsDegree=Math.min(c,this.sphericalHarmonicsDegree);let h=!1;if(e.length!==this.lastBuildScenes.length)h=!0;else for(let t=0;t<e.length;t++){if(e[t]!==this.lastBuildScenes[t].splatBuffer){h=!0;break}}let d=!0;if((1!==this.scenes.length||this.lastBuildSceneCount!==this.scenes.length||this.lastBuildMaxSplatCount!==a||h)&&(d=!1),!d){this.boundingBox=new s.Box3,this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.firstRenderTime=-1,this.lastBuildScenes=[],this.lastBuildSplatCount=0,this.lastBuildMaxSplatCount=0,this.disposeMeshData(),this.geometry=xe.buildGeomtery(a),this.material=xe.buildMaterial(this.dynamicMode,this.antialiased,this.maxScreenSpaceSplatSize,this.splatScale,this.pointCloudModeEnabled,this.minSphericalHarmonicsDegree);const t=xe.buildSplatIndexMaps(e);this.globalSplatIndexToLocalSplatIndexMap=t.localSplatIndexMap,this.globalSplatIndexToSceneIndexMap=t.sceneIndexMap}const p=this.getSplatCount();this.enableDistancesComputationOnGPU&&this.setupDistancesComputationTransformFeedback();const u=this.refreshGPUDataFromSplatBuffers(d);for(let e=0;e<this.scenes.length;e++)this.lastBuildScenes[e]=this.scenes[e];return this.lastBuildSplatCount=p,this.lastBuildMaxSplatCount=this.getMaxSplatCount(),this.lastBuildSceneCount=this.scenes.length,r&&this.scenes.length>0&&this.buildSplatTree(t.map((e=>e.splatAlphaRemovalThreshold||1)),i,o).then((()=>{this.onSplatTreeReadyCallback&&this.onSplatTreeReadyCallback(this.splatTree)})),this.visible=this.scenes.length>0,u}dispose(){this.disposeMeshData(),this.disposeTextures(),this.disposeSplatTree(),this.enableDistancesComputationOnGPU&&(this.computeDistancesOnGPUSyncTimeout&&(clearTimeout(this.computeDistancesOnGPUSyncTimeout),this.computeDistancesOnGPUSyncTimeout=null),this.disposeDistancesComputationGPUResources()),this.scenes=[],this.distancesTransformFeedback={id:null,vertexShader:null,fragmentShader:null,program:null,centersBuffer:null,transformIndexesBuffer:null,outDistancesBuffer:null,centersLoc:-1,modelViewProjLoc:-1,transformIndexesLoc:-1,transformsLocs:[]},this.renderer=null,this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSceneIndexMap=[],this.lastBuildSplatCount=0,this.lastBuildScenes=[],this.lastBuildMaxSplatCount=0,this.lastBuildSceneCount=0,this.firstRenderTime=-1,this.finalBuild=!1,this.webGLUtils=null,this.boundingBox=new s.Box3,this.calculatedSceneCenter=new s.Vector3,this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.visibleRegionChanging=!1,this.splatScale=1,this.pointCloudModeEnabled=!1,this.disposed=!0,this.lastRenderer=null,this.visible=!1}disposeMeshData(){this.geometry&&this.geometry!==Ce&&(this.geometry.dispose(),this.geometry=null),this.material&&(this.material.dispose(),this.material=null)}disposeTextures(){for(let e in this.splatDataTextures)if(this.splatDataTextures.hasOwnProperty(e)){const t=this.splatDataTextures[e];t.texture&&(t.texture.dispose(),t.texture=null)}this.splatDataTextures=null}disposeSplatTree(){this.splatTree?(this.splatTree.dispose(),this.splatTree=null):this.baseSplatTree&&(this.baseSplatTree.dispose(),this.baseSplatTree=null)}getSplatTree(){return this.splatTree}onSplatTreeReady(e){this.onSplatTreeReadyCallback=e}getDataForDistancesComputation(e,t){return{centers:this.integerBasedDistancesComputation?this.getIntegerCenters(e,t,!0):this.getFloatCenters(e,t,!0),sceneIndexes:this.getSceneIndexes(e,t)}}refreshGPUDataFromSplatBuffers(e){const t=this.getSplatCount();this.refreshDataTexturesFromSplatBuffers(e);const n=e?this.lastBuildSplatCount:0,{centers:s,sceneIndexes:r}=this.getDataForDistancesComputation(n,t-1);return this.enableDistancesComputationOnGPU&&this.refreshGPUBuffersForDistancesComputation(s,r,e),{from:n,to:t-1,count:t-n,centers:s,sceneIndexes:r}}refreshGPUBuffersForDistancesComputation(e,t,n=!1){const s=n?this.lastBuildSplatCount:0;this.updateGPUCentersBufferForDistancesComputation(n,e,s),this.updateGPUTransformIndexesBufferForDistancesComputation(n,t,s)}refreshDataTexturesFromSplatBuffers(e){e?this.updateDataTextures():this.setupDataTextures(),this.updateVisibleRegion(e)}setupDataTextures(){const e=this.getMaxSplatCount(),t=this.getSplatCount();this.disposeTextures();const n=(t,n)=>{const r=new s.Vector2(4096,1024);for(;r.x*r.y*t<e*n;)r.y*=2;return r},r=this.getTargetCovarianceCompressionLevel(),i=this.getTargetSphericalHarmonicsCompressionLevel(),o=new Float32Array(6*e),a=new Float32Array(3*e),l=new Uint8Array(4*e);let c=Float32Array;1===i?c=Uint16Array:2===i&&(c=Uint8Array);const h=p(this.minSphericalHarmonicsDegree);let d=h;d%2!=0&&d++;const u=this.minSphericalHarmonicsDegree?new c(e*h):void 0;this.fillSplatDataArrays(o,a,l,u,void 0,r,i);const m=n(4,6);let f=r>=1?Uint16Array:Float32Array,g=r>=1?s.HalfFloatType:s.FloatType;const S=new f(m.x*m.y*4);S.set(o);const y=new s.DataTexture(S,m.x,m.y,s.RGBAFormat,g);y.needsUpdate=!0,this.material.uniforms.covariancesTexture.value=y,this.material.uniforms.covariancesTextureSize.value.copy(m);const C=n(4,4),A=new Uint32Array(C.x*C.y*4);xe.updateCenterColorsPaddedData(0,t,a,l,A);const x=new s.DataTexture(A,C.x,C.y,s.RGBAIntegerFormat,s.UnsignedIntType);if(x.internalFormat="RGBA32UI",x.needsUpdate=!0,this.material.uniforms.centersColorsTexture.value=x,this.material.uniforms.centersColorsTextureSize.value.copy(C),this.material.uniformsNeedUpdate=!0,this.splatDataTextures={baseData:{covariances:o,centers:a,colors:l,sphericalHarmonics:u},covariances:{data:S,texture:y,size:m,compressionLevel:r},centerColors:{data:A,texture:x,size:C}},u){const e=4,r=n(e,d),o=new c(r.x*r.y*e);for(let e=0;e<t;e++){const t=h*e,n=d*e;for(let e=0;e<h;e++)o[n+e]=u[t+e]}const a=2===i?s.UnsignedByteType:s.HalfFloatType,l=new s.DataTexture(o,r.x,r.y,s.RGBAFormat,a);l.needsUpdate=!0,this.material.uniforms.sphericalHarmonicsTexture.value=l,this.material.uniforms.sphericalHarmonicsTextureSize.value.copy(r),2===i&&(this.material.uniforms.sphericalHarmonics8BitMode.value=1),this.material.uniformsNeedUpdate=!0,this.splatDataTextures.sphericalHarmonics={componentCount:h,paddedComponentCount:d,data:o,texture:l,size:r,compressionLevel:i}}if(this.dynamicMode){const e=n(1,4),r=new Uint32Array(e.x*e.y*1);for(let e=0;e<t;e++)r[e]=this.globalSplatIndexToSceneIndexMap[e];const i=new s.DataTexture(r,e.x,e.y,s.RedIntegerFormat,s.UnsignedIntType);i.internalFormat="R32UI",i.needsUpdate=!0,this.material.uniforms.transformIndexesTexture.value=i,this.material.uniforms.transformIndexesTextureSize.value.copy(e),this.material.uniformsNeedUpdate=!0,this.splatDataTextures.tansformIndexes={data:r,texture:i,size:e}}}updateDataTextures(){const e=this.getSplatCount(),t=this.splatDataTextures.covariances.compressionLevel,n=this.splatDataTextures.sphericalHarmonics,s=n?n.compressionLevel:0;this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances,this.splatDataTextures.baseData.centers,this.splatDataTextures.baseData.colors,this.splatDataTextures.baseData.sphericalHarmonics,void 0,t,s,this.lastBuildSplatCount,e-1,this.lastBuildSplatCount);const r=this.splatDataTextures.covariances,i=r.data,o=r.texture,a=6*e;for(let e=6*this.lastBuildSplatCount;e<a;e++){const t=this.splatDataTextures.baseData.covariances[e];i[e]=t}const l=this.renderer?this.renderer.properties.get(o):null;if(l&&l.__webglTexture){const n=t?2:4;this.updateDataTexture(i,r,l,4,6,n,this.lastBuildSplatCount,e-1)}else o.needsUpdate=!0;const c=this.splatDataTextures.centerColors,h=c.data,d=c.texture;xe.updateCenterColorsPaddedData(this.lastBuildSplatCount,e,this.splatDataTextures.baseData.centers,this.splatDataTextures.baseData.colors,h);const p=this.renderer?this.renderer.properties.get(d):null;if(p&&p.__webglTexture?this.updateDataTexture(h,c,p,4,4,4,this.lastBuildSplatCount,e-1):d.needsUpdate=!0,this.splatDataTextures.baseData.sphericalHarmonics){const t=n.componentCount,r=n.paddedComponentCount,i=n.data;for(let n=this.lastBuildSplatCount;n<e;n++){const e=t*n,s=r*n;for(let n=0;n<t;n++)i[s+n]=this.splatDataTextures.baseData.sphericalHarmonics[e+n]}const o=n.texture,a=this.renderer?this.renderer.properties.get(o):null;if(a&&a.__webglTexture){const t=4;let o=4;1===s?o=2:2===s&&(o=1),this.updateDataTexture(i,n,a,t,r,o,this.lastBuildSplatCount,e-1)}else o.needsUpdate=!0}if(this.dynamicMode){const t=this.splatDataTextures.tansformIndexes,n=t.data;for(let t=this.lastBuildSplatCount;t<e;t++)n[t]=this.globalSplatIndexToSceneIndexMap[t];const s=t.texture,r=this.renderer?this.renderer.properties.get(s):null;r&&r.__webglTexture?this.updateDataTexture(n,t,r,1,1,1,this.lastBuildSplatCount,e-1):s.needsUpdate=!0}}getTargetCovarianceCompressionLevel(){return this.halfPrecisionCovariancesOnGPU?1:0}getTargetSphericalHarmonicsCompressionLevel(){return Math.max(1,this.getMaximumSplatBufferCompressionLevel())}getMaximumSplatBufferCompressionLevel(){let e;for(let t=0;t<this.scenes.length;t++){const n=this.getScene(t).splatBuffer;(0===t||n.compressionLevel>e)&&(e=n.compressionLevel)}return e}getMinimumSplatBufferCompressionLevel(){let e;for(let t=0;t<this.scenes.length;t++){const n=this.getScene(t).splatBuffer;(0===t||n.compressionLevel<e)&&(e=n.compressionLevel)}return e}static computeTextureUpdateRegion(e,t,n,s,r){const i=r/s,o=e*i,a=Math.floor(o/n),l=a*n*s,c=t*i,h=Math.floor(c/n);return{dataStart:l,dataEnd:h*n*s+n*s,startRow:a,endRow:h}}updateDataTexture(e,t,n,s,r,i,o,a){const l=this.renderer.getContext(),c=xe.computeTextureUpdateRegion(o,a,t.size.x,s,r),h=c.dataEnd-c.dataStart,d=new e.constructor(e.buffer,c.dataStart*i,h),p=c.endRow-c.startRow+1,u=t.texture,m=this.webGLUtils.convert(u.type),f=this.webGLUtils.convert(u.format,u.colorSpace),g=l.getParameter(l.TEXTURE_BINDING_2D);l.bindTexture(l.TEXTURE_2D,n.__webglTexture),l.texSubImage2D(l.TEXTURE_2D,0,0,c.startRow,t.size.x,p,f,m,d),l.bindTexture(l.TEXTURE_2D,g)}static updateCenterColorsPaddedData(e,t,n,s,r){for(let l=e;l<t;l++){const e=4*l,t=3*l,c=4*l;r[c]=(i=s)[a=e]+(i[a+1]<<8)+(i[a+2]<<16)+(i[a+3]<<24),r[c+1]=o(n[t]),r[c+2]=o(n[t+1]),r[c+3]=o(n[t+2])}var i,a}updateVisibleRegion(e){const t=this.getSplatCount(),n=new s.Vector3;if(!e){const e=new s.Vector3;this.scenes.forEach((t=>{e.add(t.splatBuffer.sceneCenter)})),e.multiplyScalar(1/this.scenes.length),this.calculatedSceneCenter.copy(e),this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter),this.material.uniformsNeedUpdate=!0}for(let s=e?this.lastBuildSplatCount:0;s<t;s++){this.getSplatCenter(s,n,!1);const e=n.sub(this.calculatedSceneCenter).length();e>this.maxSplatDistanceFromSceneCenter&&(this.maxSplatDistanceFromSceneCenter=e)}this.maxSplatDistanceFromSceneCenter-this.visibleRegionBufferRadius>1&&(this.visibleRegionBufferRadius=this.maxSplatDistanceFromSceneCenter,this.visibleRegionRadius=Math.max(this.visibleRegionBufferRadius-1,0)),this.finalBuild&&(this.visibleRegionRadius=this.visibleRegionBufferRadius=this.maxSplatDistanceFromSceneCenter),this.updateVisibleRegionFadeDistance()}updateVisibleRegionFadeDistance(e=Se.Default){const t=this.finalBuild?.012:.003,n=e===Se.Default?t:.003;this.visibleRegionFadeStartRadius=(this.visibleRegionRadius-this.visibleRegionFadeStartRadius)*n+this.visibleRegionFadeStartRadius;const s=(this.visibleRegionBufferRadius>0?this.visibleRegionFadeStartRadius/this.visibleRegionBufferRadius:0)>.99,r=s||e===Se.Instant?1:0;this.material.uniforms.visibleRegionFadeStartRadius.value=this.visibleRegionFadeStartRadius,this.material.uniforms.visibleRegionRadius.value=this.visibleRegionRadius,this.material.uniforms.firstRenderTime.value=this.firstRenderTime,this.material.uniforms.currentTime.value=performance.now(),this.material.uniforms.fadeInComplete.value=r,this.material.uniformsNeedUpdate=!0,this.visibleRegionChanging=!s}updateRenderIndexes(e,t){const n=this.geometry;n.attributes.splatIndex.set(e),n.attributes.splatIndex.needsUpdate=!0,t>0&&-1===this.firstRenderTime&&(this.firstRenderTime=performance.now()),n.instanceCount=t}updateTransforms(){for(let e=0;e<this.scenes.length;e++){this.getScene(e).updateTransform()}}updateUniforms=function(){const e=new s.Vector2;return function(t,n,s,r,i,o){if(this.getSplatCount()>0){if(e.set(t.x*this.devicePixelRatio,t.y*this.devicePixelRatio),this.material.uniforms.viewport.value.copy(e),this.material.uniforms.basisViewport.value.set(1/e.x,1/e.y),this.material.uniforms.focal.value.set(n,s),this.material.uniforms.orthographicMode.value=r?1:0,this.material.uniforms.orthoZoom.value=i,this.material.uniforms.inverseFocalAdjustment.value=o,this.dynamicMode)for(let e=0;e<this.scenes.length;e++)this.material.uniforms.transforms.value[e].copy(this.getScene(e).transform);this.material.uniformsNeedUpdate=!0}}}();setSplatScale(e=1){this.splatScale=e,this.material.uniforms.splatScale.value=e,this.material.uniformsNeedUpdate=!0}getSplatScale(){return this.splatScale}setPointCloudModeEnabled(e){this.pointCloudModeEnabled=e,this.material.uniforms.pointCloudModeEnabled.value=e?1:0,this.material.uniformsNeedUpdate=!0}getPointCloudModeEnabled(){return this.pointCloudModeEnabled}getSplatDataTextures(){return this.splatDataTextures}getSplatCount(){return xe.getTotalSplatCountForScenes(this.scenes)}static getTotalSplatCountForScenes(e){let t=0;for(let n of e)n&&n.splatBuffer&&(t+=n.splatBuffer.getSplatCount());return t}static getTotalSplatCountForSplatBuffers(e){let t=0;for(let n of e)t+=n.getSplatCount();return t}getMaxSplatCount(){return xe.getTotalMaxSplatCountForScenes(this.scenes)}static getTotalMaxSplatCountForScenes(e){let t=0;for(let n of e)n&&n.splatBuffer&&(t+=n.splatBuffer.getMaxSplatCount());return t}static getTotalMaxSplatCountForSplatBuffers(e){let t=0;for(let n of e)t+=n.getMaxSplatCount();return t}disposeDistancesComputationGPUResources(){if(!this.renderer)return;const e=this.renderer.getContext();this.distancesTransformFeedback.vao&&(e.deleteVertexArray(this.distancesTransformFeedback.vao),this.distancesTransformFeedback.vao=null),this.distancesTransformFeedback.program&&(e.deleteProgram(this.distancesTransformFeedback.program),e.deleteShader(this.distancesTransformFeedback.vertexShader),e.deleteShader(this.distancesTransformFeedback.fragmentShader),this.distancesTransformFeedback.program=null,this.distancesTransformFeedback.vertexShader=null,this.distancesTransformFeedback.fragmentShader=null),this.disposeDistancesComputationGPUBufferResources(),this.distancesTransformFeedback.id&&(e.deleteTransformFeedback(this.distancesTransformFeedback.id),this.distancesTransformFeedback.id=null)}disposeDistancesComputationGPUBufferResources(){if(!this.renderer)return;const e=this.renderer.getContext();this.distancesTransformFeedback.centersBuffer&&(this.distancesTransformFeedback.centersBuffer=null,e.deleteBuffer(this.distancesTransformFeedback.centersBuffer)),this.distancesTransformFeedback.outDistancesBuffer&&(e.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer),this.distancesTransformFeedback.outDistancesBuffer=null)}setRenderer(e){if(e!==this.renderer){this.renderer=e;const t=this.renderer.getContext(),n=new fe(t),r=new ge(t,n,{});if(n.init(r),this.webGLUtils=new s.WebGLUtils(t,n,r),this.enableDistancesComputationOnGPU&&this.getSplatCount()>0){this.setupDistancesComputationTransformFeedback();const{centers:e,sceneIndexes:t}=this.getDataForDistancesComputation(0,this.getSplatCount()-1);this.refreshGPUBuffersForDistancesComputation(e,t)}}}setupDistancesComputationTransformFeedback=function(){let e;return function(){const t=this.getMaxSplatCount();if(!this.renderer)return;const n=this.lastRenderer!==this.renderer,s=e!==t;if(!n&&!s)return;n?this.disposeDistancesComputationGPUResources():s&&this.disposeDistancesComputationGPUBufferResources();const r=this.renderer.getContext(),i=(e,t,n)=>{const s=e.createShader(t);if(!s)return console.error("Fatal error: gl could not create a shader object."),null;e.shaderSource(s,n),e.compileShader(s);if(!e.getShaderParameter(s,e.COMPILE_STATUS)){let n="unknown";t===e.VERTEX_SHADER?n="vertex shader":t===e.FRAGMENT_SHADER&&(n="fragement shader");const r=e.getShaderInfoLog(s);return console.error("Failed to compile "+n+" with these errors:"+r),e.deleteShader(s),null}return s};let o;this.integerBasedDistancesComputation?(o="#version 300 es\n                in ivec4 center;\n                flat out int distance;",this.dynamicMode?o+=`\n                        in uint transformIndex;\n                        uniform ivec4 transforms[${m.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[transformIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `:o+="\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    "):(o="#version 300 es\n                in vec4 center;\n                flat out float distance;",this.dynamicMode?o+=`\n                        in uint transformIndex;\n                        uniform mat4 transforms[${m.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[transformIndex] * vec4(center.xyz, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `:o+="\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    ");const a=r.getParameter(r.VERTEX_ARRAY_BINDING),l=r.getParameter(r.CURRENT_PROGRAM),c=!!l&&r.getProgramParameter(l,r.DELETE_STATUS);if(n&&(this.distancesTransformFeedback.vao=r.createVertexArray()),r.bindVertexArray(this.distancesTransformFeedback.vao),n){const e=r.createProgram(),t=i(r,r.VERTEX_SHADER,o),n=i(r,r.FRAGMENT_SHADER,"#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            ");if(!t||!n)throw new Error("Could not compile shaders for distances computation on GPU.");r.attachShader(e,t),r.attachShader(e,n),r.transformFeedbackVaryings(e,["distance"],r.SEPARATE_ATTRIBS),r.linkProgram(e);if(!r.getProgramParameter(e,r.LINK_STATUS)){const s=r.getProgramInfoLog(e);throw console.error("Fatal error: Failed to link program: "+s),r.deleteProgram(e),r.deleteShader(n),r.deleteShader(t),new Error("Could not link shaders for distances computation on GPU.")}this.distancesTransformFeedback.program=e,this.distancesTransformFeedback.vertexShader=t,this.distancesTransformFeedback.vertexShader=n}if(r.useProgram(this.distancesTransformFeedback.program),this.distancesTransformFeedback.centersLoc=r.getAttribLocation(this.distancesTransformFeedback.program,"center"),this.dynamicMode){this.distancesTransformFeedback.transformIndexesLoc=r.getAttribLocation(this.distancesTransformFeedback.program,"transformIndex");for(let e=0;e<this.scenes.length;e++)this.distancesTransformFeedback.transformsLocs[e]=r.getUniformLocation(this.distancesTransformFeedback.program,`transforms[${e}]`)}else this.distancesTransformFeedback.modelViewProjLoc=r.getUniformLocation(this.distancesTransformFeedback.program,"modelViewProj");(n||s)&&(this.distancesTransformFeedback.centersBuffer=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),r.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc),this.integerBasedDistancesComputation?r.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc,4,r.INT,0,0):r.vertexAttribPointer(this.distancesTransformFeedback.centersLoc,4,r.FLOAT,!1,0,0),this.dynamicMode&&(this.distancesTransformFeedback.transformIndexesBuffer=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,this.distancesTransformFeedback.transformIndexesBuffer),r.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc),r.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc,1,r.UNSIGNED_INT,0,0))),(n||s)&&(this.distancesTransformFeedback.outDistancesBuffer=r.createBuffer()),r.bindBuffer(r.ARRAY_BUFFER,this.distancesTransformFeedback.outDistancesBuffer),r.bufferData(r.ARRAY_BUFFER,4*t,r.STATIC_READ),n&&(this.distancesTransformFeedback.id=r.createTransformFeedback()),r.bindTransformFeedback(r.TRANSFORM_FEEDBACK,this.distancesTransformFeedback.id),r.bindBufferBase(r.TRANSFORM_FEEDBACK_BUFFER,0,this.distancesTransformFeedback.outDistancesBuffer),l&&!0!==c&&r.useProgram(l),a&&r.bindVertexArray(a),this.lastRenderer=this.renderer,e=t}}();updateGPUCentersBufferForDistancesComputation(e,t,n){if(!this.renderer)return;const s=this.renderer.getContext(),r=s.getParameter(s.VERTEX_ARRAY_BINDING);s.bindVertexArray(this.distancesTransformFeedback.vao);const i=this.integerBasedDistancesComputation?Uint32Array:Float32Array,o=16*n;if(s.bindBuffer(s.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),e)s.bufferSubData(s.ARRAY_BUFFER,o,t);else{const e=new i(16*this.getMaxSplatCount());e.set(t),s.bufferData(s.ARRAY_BUFFER,e,s.STATIC_DRAW)}s.bindBuffer(s.ARRAY_BUFFER,null),r&&s.bindVertexArray(r)}updateGPUTransformIndexesBufferForDistancesComputation(e,t,n){if(!this.renderer||!this.dynamicMode)return;const s=this.renderer.getContext(),r=s.getParameter(s.VERTEX_ARRAY_BINDING);s.bindVertexArray(this.distancesTransformFeedback.vao);const i=4*n;if(s.bindBuffer(s.ARRAY_BUFFER,this.distancesTransformFeedback.transformIndexesBuffer),e)s.bufferSubData(s.ARRAY_BUFFER,i,t);else{const e=new Uint32Array(4*this.getMaxSplatCount());e.set(t),s.bufferData(s.ARRAY_BUFFER,e,s.STATIC_DRAW)}s.bindBuffer(s.ARRAY_BUFFER,null),r&&s.bindVertexArray(r)}getSceneIndexes(e,t){let n;n=new Uint32Array(t-e+1);for(let s=e;s<=t;s++)n[s]=this.globalSplatIndexToSceneIndexMap[s];return n}fillTransformsArray=function(){const e=[];return function(t){e.length!==t.length&&(e.length=t.length);for(let t=0;t<this.scenes.length;t++){const n=this.getScene(t).transform.elements;for(let s=0;s<16;s++)e[16*t+s]=n[s]}t.set(e)}}();computeDistancesOnGPU=function(){const e=new s.Matrix4;return function(t,n){if(!this.renderer)return;const s=this.renderer.getContext(),r=s.getParameter(s.VERTEX_ARRAY_BINDING),i=s.getParameter(s.CURRENT_PROGRAM),o=!!i&&s.getProgramParameter(i,s.DELETE_STATUS);if(s.bindVertexArray(this.distancesTransformFeedback.vao),s.useProgram(this.distancesTransformFeedback.program),s.enable(s.RASTERIZER_DISCARD),this.dynamicMode)for(let n=0;n<this.scenes.length;n++)if(e.copy(this.getScene(n).transform),e.premultiply(t),this.integerBasedDistancesComputation){const t=xe.getIntegerMatrixArray(e),r=[t[2],t[6],t[10],t[14]];s.uniform4i(this.distancesTransformFeedback.transformsLocs[n],r[0],r[1],r[2],r[3])}else s.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[n],!1,e.elements);else if(this.integerBasedDistancesComputation){const e=xe.getIntegerMatrixArray(t),n=[e[2],e[6],e[10]];s.uniform3i(this.distancesTransformFeedback.modelViewProjLoc,n[0],n[1],n[2])}else{const e=[t.elements[2],t.elements[6],t.elements[10]];s.uniform3f(this.distancesTransformFeedback.modelViewProjLoc,e[0],e[1],e[2])}s.bindBuffer(s.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),s.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc),this.integerBasedDistancesComputation?s.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc,4,s.INT,0,0):s.vertexAttribPointer(this.distancesTransformFeedback.centersLoc,4,s.FLOAT,!1,0,0),this.dynamicMode&&(s.bindBuffer(s.ARRAY_BUFFER,this.distancesTransformFeedback.transformIndexesBuffer),s.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc),s.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc,1,s.UNSIGNED_INT,0,0)),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,this.distancesTransformFeedback.id),s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,0,this.distancesTransformFeedback.outDistancesBuffer),s.beginTransformFeedback(s.POINTS),s.drawArrays(s.POINTS,0,this.getSplatCount()),s.endTransformFeedback(),s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,0,null),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,null),s.disable(s.RASTERIZER_DISCARD);const a=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);s.flush();const l=new Promise((e=>{const t=()=>{if(this.disposed)e();else{const r=0,i=0;switch(s.clientWaitSync(a,i,r)){case s.TIMEOUT_EXPIRED:return this.computeDistancesOnGPUSyncTimeout=setTimeout(t),this.computeDistancesOnGPUSyncTimeout;case s.WAIT_FAILED:throw new Error("should never get here");default:this.computeDistancesOnGPUSyncTimeout=null,s.deleteSync(a);const r=s.getParameter(s.VERTEX_ARRAY_BINDING);s.bindVertexArray(this.distancesTransformFeedback.vao),s.bindBuffer(s.ARRAY_BUFFER,this.distancesTransformFeedback.outDistancesBuffer),s.getBufferSubData(s.ARRAY_BUFFER,0,n),s.bindBuffer(s.ARRAY_BUFFER,null),r&&s.bindVertexArray(r),e()}}};this.computeDistancesOnGPUSyncTimeout=setTimeout(t)}));return i&&!0!==o&&s.useProgram(i),r&&s.bindVertexArray(r),l}}();getLocalSplatParameters(e,t,n){null==n&&(n=!this.dynamicMode),t.splatBuffer=this.getSplatBufferForSplat(e),t.localIndex=this.getSplatLocalIndex(e),t.sceneTransform=n?this.getSceneTransformForSplat(e):null}fillSplatDataArrays(e,t,n,s,r,i=0,o=1,a,l,c=0){for(let h=0;h<this.scenes.length;h++){null==r&&(r=!this.dynamicMode);const d=this.getScene(h),p=d.splatBuffer,u=r?d.transform:null;e&&p.fillSplatCovarianceArray(e,u,a,l,c,i),t&&p.fillSplatCenterArray(t,u,a,l,c),n&&p.fillSplatColorArray(n,d.minimumAlpha,a,l,c),s&&p.fillSphericalHarmonicsArray(s,this.minSphericalHarmonicsDegree,u,a,l,c,o),c+=p.getSplatCount()}}getIntegerCenters(e,t,n=!1){const s=t-e+1,r=new Float32Array(3*s);let i;this.fillSplatDataArrays(null,r,null,null,void 0,void 0,void 0,e);let o=n?4:3;i=new Int32Array(s*o);for(let e=0;e<s;e++){for(let t=0;t<3;t++)i[e*o+t]=Math.round(1e3*r[3*e+t]);n&&(i[e*o+3]=1e3)}return i}getFloatCenters(e,t,n=!1){const s=t-e+1,r=new Float32Array(3*s);if(this.fillSplatDataArrays(null,r,null,null,void 0,void 0,void 0,e),!n)return r;let i=new Float32Array(4*s);for(let e=0;e<s;e++){for(let t=0;t<3;t++)i[4*e+t]=r[3*e+t];i[4*e+3]=1}return i}getSplatCenter=function(){const e={};return function(t,n,s){this.getLocalSplatParameters(t,e,s),e.splatBuffer.getSplatCenter(e.localIndex,n,e.sceneTransform)}}();getSplatScaleAndRotation=function(){const e={};return function(t,n,s,r){this.getLocalSplatParameters(t,e,r),e.splatBuffer.getSplatScaleAndRotation(e.localIndex,n,s,e.sceneTransform)}}();getSplatColor=function(){const e={};return function(t,n){this.getLocalSplatParameters(t,e),e.splatBuffer.getSplatColor(e.localIndex,n)}}();getSceneTransform(e,t){const n=this.getScene(e);n.updateTransform(),t.copy(n.transform)}getScene(e){if(e<0||e>=this.scenes.length)throw new Error("SplatMesh::getScene() -> Invalid scene index.");return this.scenes[e]}getSplatBufferForSplat(e){return this.getScene(this.globalSplatIndexToSceneIndexMap[e]).splatBuffer}getSceneIndexForSplat(e){return this.globalSplatIndexToSceneIndexMap[e]}getSceneTransformForSplat(e){return this.getScene(this.globalSplatIndexToSceneIndexMap[e]).transform}getSplatLocalIndex(e){return this.globalSplatIndexToLocalSplatIndexMap[e]}static getIntegerMatrixArray(e){const t=e.elements,n=[];for(let e=0;e<16;e++)n[e]=Math.round(1e3*t[e]);return n}}function ve(e){let t,n,s,r,i,o,a,l,c,h,d,p,u,m,f,g,S,y;e.onmessage=C=>{if(C.data.centers)centers=C.data.centers,transformIndexes=C.data.transformIndexes,r?new Int32Array(n,m+C.data.range.from*y.BytesPerInt*4,4*C.data.range.count).set(new Int32Array(centers)):new Float32Array(n,m+C.data.range.from*y.BytesPerFloat*4,4*C.data.range.count).set(new Float32Array(centers)),i&&new Uint32Array(n,c+4*C.data.range.from,C.data.range.count).set(new Uint32Array(transformIndexes)),e.postMessage({centerDataSet:!0});else if(C.data.sort){const A=C.data.sort.splatRenderCount||0,x=C.data.sort.splatSortCount||0,v=C.data.sort.usePrecomputedDistances;let b,w,T;s||(b=C.data.sort.indexesToSort,T=C.data.sort.transforms,v&&(w=C.data.sort.precomputedDistances)),function(C,A,x,v,b,w,T){const F=performance.now();if(!s&&(new Uint32Array(n,a,b.byteLength/y.BytesPerInt).set(b),new Float32Array(n,h,T.byteLength/y.BytesPerFloat).set(T),v)){let e;e=r?new Int32Array(n,d,w.byteLength/y.BytesPerInt):new Float32Array(n,d,w.byteLength/y.BytesPerFloat),e.set(w)}g||(g=new Uint32Array(y.DepthMapRange)),new Float32Array(n,f,16).set(x),new Uint32Array(n,u,y.DepthMapRange).set(g),t.exports.sortIndexes(a,m,d,p,u,f,l,c,h,y.DepthMapRange,C,A,o,v,r,i);const B={sortDone:!0,splatSortCount:C,splatRenderCount:A,sortTime:0};if(!s){const e=new Uint32Array(n,l,A);(!S||S.length<A)&&(S=new Uint32Array(A)),S.set(e),B.sortedIndexes=S}const M=performance.now();B.sortTime=M-F,e.postMessage(B)}(x,A,C.data.sort.modelViewProj,v,b,w,T)}else if(C.data.init){y=C.data.init.Constants,o=C.data.init.splatCount,s=C.data.init.useSharedMemory,r=C.data.init.integerBasedSort,i=C.data.init.dynamicMode;const g=r?4*y.BytesPerInt:4*y.BytesPerFloat,S=new Uint8Array(C.data.init.sorterWasmBytes),A=16*y.BytesPerFloat,x=o*y.BytesPerInt,v=o*g,b=A,w=r?o*y.BytesPerInt:o*y.BytesPerFloat,T=o*y.BytesPerInt,F=o*y.BytesPerInt,B=y.DepthMapRange*y.BytesPerInt*2,M=i?o*y.BytesPerInt:0,E=i?y.MaxScenes*A:0,D=32*y.MemoryPageSize,P=x+v+b+w+T+B+F+M+E+D,R=Math.floor(P/y.MemoryPageSize)+1,I={module:{},env:{memory:new WebAssembly.Memory({initial:2*R,maximum:4*R,shared:!0})}};WebAssembly.compile(S).then((e=>WebAssembly.instantiate(e,I))).then((r=>{t=r,a=0,m=a+x,f=m+v,d=f+b,p=d+w,u=p+T,l=u+B,c=l+F,h=c+M,n=I.env.memory.buffer,s?e.postMessage({sortSetupPhase1Complete:!0,indexesToSortBuffer:n,indexesToSortOffset:a,sortedIndexesBuffer:n,sortedIndexesOffset:l,precomputedDistancesBuffer:n,precomputedDistancesOffset:d,transformsBuffer:n,transformsOffset:h}):e.postMessage({sortSetupPhase1Complete:!0})}))}}}const be={None:0,VR:1,AR:2};class we{static createButton(e){const t=document.createElement("button");function n(){t.style.display="",t.style.cursor="auto",t.style.left="calc(50% - 75px)",t.style.width="150px",t.onmouseenter=null,t.onmouseleave=null,t.onclick=null}function s(e){e.style.position="absolute",e.style.bottom="20px",e.style.padding="12px 6px",e.style.border="1px solid #fff",e.style.borderRadius="4px",e.style.background="rgba(0,0,0,0.1)",e.style.color="#fff",e.style.font="normal 13px sans-serif",e.style.textAlign="center",e.style.opacity="0.5",e.style.outline="none",e.style.zIndex="999"}if("xr"in navigator)return t.id="VRButton",t.style.display="none",s(t),navigator.xr.isSessionSupported("immersive-vr").then((function(s){s?function(){let n=null;async function s(s){s.addEventListener("end",r),await e.xr.setSession(s),t.textContent="EXIT VR",n=s}function r(){n.removeEventListener("end",r),t.textContent="ENTER VR",n=null}t.style.display="",t.style.cursor="pointer",t.style.left="calc(50% - 50px)",t.style.width="100px",t.textContent="ENTER VR";const i={optionalFeatures:["local-floor","bounded-floor","hand-tracking","layers"]};t.onmouseenter=function(){t.style.opacity="1.0"},t.onmouseleave=function(){t.style.opacity="0.5"},t.onclick=function(){null===n?navigator.xr.requestSession("immersive-vr",i).then(s):(n.end(),void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-vr",i).then(s).catch((e=>{console.warn(e)})))},void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-vr",i).then(s).catch((e=>{console.warn(e)}))}():(n(),t.textContent="VR NOT SUPPORTED"),s&&we.xrSessionIsGranted&&t.click()})).catch((function(e){n(),console.warn("Exception when trying to call xr.isSessionSupported",e),t.textContent="VR NOT ALLOWED"})),t;{const e=document.createElement("a");return!1===window.isSecureContext?(e.href=document.location.href.replace(/^http:/,"https:"),e.innerHTML="WEBXR NEEDS HTTPS"):(e.href="https://immersiveweb.dev/",e.innerHTML="WEBXR NOT AVAILABLE"),e.style.left="calc(50% - 90px)",e.style.width="180px",e.style.textDecoration="none",s(e),e}}static registerSessionGrantedListener(){if("undefined"!=typeof navigator&&"xr"in navigator){if(/WebXRViewer\//i.test(navigator.userAgent))return;navigator.xr.addEventListener("sessiongranted",(()=>{we.xrSessionIsGranted=!0}))}}}we.xrSessionIsGranted=!1,we.registerSessionGrantedListener();class Te{static createButton(e,t={}){const n=document.createElement("button");function s(){n.style.display="",n.style.cursor="auto",n.style.left="calc(50% - 75px)",n.style.width="150px",n.onmouseenter=null,n.onmouseleave=null,n.onclick=null}function r(e){e.style.position="absolute",e.style.bottom="20px",e.style.padding="12px 6px",e.style.border="1px solid #fff",e.style.borderRadius="4px",e.style.background="rgba(0,0,0,0.1)",e.style.color="#fff",e.style.font="normal 13px sans-serif",e.style.textAlign="center",e.style.opacity="0.5",e.style.outline="none",e.style.zIndex="999"}if("xr"in navigator)return n.id="ARButton",n.style.display="none",r(n),navigator.xr.isSessionSupported("immersive-ar").then((function(r){r?function(){if(void 0===t.domOverlay){const e=document.createElement("div");e.style.display="none",document.body.appendChild(e);const n=document.createElementNS("http://www.w3.org/2000/svg","svg");n.setAttribute("width",38),n.setAttribute("height",38),n.style.position="absolute",n.style.right="20px",n.style.top="20px",n.addEventListener("click",(function(){s.end()})),e.appendChild(n);const r=document.createElementNS("http://www.w3.org/2000/svg","path");r.setAttribute("d","M 12,12 L 28,28 M 28,12 12,28"),r.setAttribute("stroke","#fff"),r.setAttribute("stroke-width",2),n.appendChild(r),void 0===t.optionalFeatures&&(t.optionalFeatures=[]),t.optionalFeatures.push("dom-overlay"),t.domOverlay={root:e}}let s=null;async function r(r){r.addEventListener("end",i),e.xr.setReferenceSpaceType("local"),await e.xr.setSession(r),n.textContent="STOP AR",t.domOverlay.root.style.display="",s=r}function i(){s.removeEventListener("end",i),n.textContent="START AR",t.domOverlay.root.style.display="none",s=null}n.style.display="",n.style.cursor="pointer",n.style.left="calc(50% - 50px)",n.style.width="100px",n.textContent="START AR",n.onmouseenter=function(){n.style.opacity="1.0"},n.onmouseleave=function(){n.style.opacity="0.5"},n.onclick=function(){null===s?navigator.xr.requestSession("immersive-ar",t).then(r):(s.end(),void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-ar",t).then(r).catch((e=>{console.warn(e)})))},void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-ar",t).then(r).catch((e=>{console.warn(e)}))}():(s(),n.textContent="AR NOT SUPPORTED")})).catch((function(e){s(),console.warn("Exception when trying to call xr.isSessionSupported",e),n.textContent="AR NOT ALLOWED"})),n;{const e=document.createElement("a");return!1===window.isSecureContext?(e.href=document.location.href.replace(/^http:/,"https:"),e.innerHTML="WEBXR NEEDS HTTPS"):(e.href="https://immersiveweb.dev/",e.innerHTML="WEBXR NOT AVAILABLE"),e.style.left="calc(50% - 90px)",e.style.width="180px",e.style.textDecoration="none",r(e),e}}}const Fe={Always:0,OnChange:1,Never:2};class Be{constructor(e={}){e.cameraUp||(e.cameraUp=[0,1,0]),this.cameraUp=(new s.Vector3).fromArray(e.cameraUp),e.initialCameraPosition||(e.initialCameraPosition=[0,10,15]),this.initialCameraPosition=(new s.Vector3).fromArray(e.initialCameraPosition),e.initialCameraLookAt||(e.initialCameraLookAt=[0,0,0]),this.initialCameraLookAt=(new s.Vector3).fromArray(e.initialCameraLookAt),this.dropInMode=e.dropInMode||!1,void 0!==e.selfDrivenMode&&null!==e.selfDrivenMode||(e.selfDrivenMode=!0),this.selfDrivenMode=e.selfDrivenMode&&!this.dropInMode,this.selfDrivenUpdateFunc=this.selfDrivenUpdate.bind(this),void 0===e.useBuiltInControls&&(e.useBuiltInControls=!0),this.useBuiltInControls=e.useBuiltInControls,this.rootElement=e.rootElement,this.ignoreDevicePixelRatio=e.ignoreDevicePixelRatio||!1,this.devicePixelRatio=this.ignoreDevicePixelRatio?1:window.devicePixelRatio,this.halfPrecisionCovariancesOnGPU=e.halfPrecisionCovariancesOnGPU||!1,this.threeScene=e.threeScene,this.renderer=e.renderer,this.camera=e.camera,this.gpuAcceleratedSort=e.gpuAcceleratedSort||!1,void 0!==e.integerBasedSort&&null!==e.integerBasedSort||(e.integerBasedSort=!0),this.integerBasedSort=e.integerBasedSort,void 0!==e.sharedMemoryForWorkers&&null!==e.sharedMemoryForWorkers||(e.sharedMemoryForWorkers=!1),this.sharedMemoryForWorkers=e.sharedMemoryForWorkers,this.dynamicScene=!!e.dynamicScene,this.antialiased=e.antialiased||!1,this.webXRMode=e.webXRMode||be.None,this.webXRMode!==be.None&&(this.gpuAcceleratedSort=!1),this.webXRActive=!1,this.renderMode=e.renderMode||Fe.Always,this.sceneRevealMode=e.sceneRevealMode||Se.Default,this.focalAdjustment=e.focalAdjustment||1,this.maxScreenSpaceSplatSize=e.maxScreenSpaceSplatSize||2048,this.logLevel=e.logLevel||ye.None,this.sphericalHarmonicsDegree=e.sphericalHarmonicsDegree||0,this.createSplatMesh(),this.controls=null,this.perspectiveControls=null,this.orthographicControls=null,this.orthographicCamera=null,this.perspectiveCamera=null,this.showMeshCursor=!1,this.showControlPlane=!1,this.showInfo=!1,this.sceneHelper=null,this.sortWorker=null,this.sortRunning=!1,this.splatRenderCount=0,this.sortWorkerIndexesToSort=null,this.sortWorkerSortedIndexes=null,this.sortWorkerPrecomputedDistances=null,this.sortWorkerTransforms=null,this.runAfterFirstSort=[],this.selfDrivenModeRunning=!1,this.splatRenderReady=!1,this.raycaster=new ce,this.infoPanel=null,this.startInOrthographicMode=!1,this.currentFPS=0,this.lastSortTime=0,this.consecutiveRenderFrames=0,this.previousCameraTarget=new s.Vector3,this.nextCameraTarget=new s.Vector3,this.mousePosition=new s.Vector2,this.mouseDownPosition=new s.Vector2,this.mouseDownTime=null,this.resizeObserver=null,this.mouseMoveListener=null,this.mouseDownListener=null,this.mouseUpListener=null,this.keyDownListener=null,this.sortPromise=null,this.sortPromiseResolver=null,this.splatSceneDownloadPromises={},this.splatSceneDownloadAndBuildPromise=null,this.splatSceneRemovalPromise=null,this.loadingSpinner=new J(null,this.rootElement||document.body),this.loadingSpinner.hide(),this.loadingProgressBar=new ee(this.rootElement||document.body),this.loadingProgressBar.hide(),this.infoPanel=new te(this.rootElement||document.body),this.infoPanel.hide(),this.usingExternalCamera=!(!this.dropInMode&&!this.camera),this.usingExternalRenderer=!(!this.dropInMode&&!this.renderer),this.initialized=!1,this.disposing=!1,this.disposed=!1,this.dropInMode||this.init()}createSplatMesh(){this.splatMesh=new xe(this.dynamicScene,this.halfPrecisionCovariancesOnGPU,this.devicePixelRatio,this.gpuAcceleratedSort,this.integerBasedSort,this.antialiased,this.maxScreenSpaceSplatSize,this.logLevel,this.sphericalHarmonicsDegree),this.splatMesh.frustumCulled=!1}init(){this.initialized||(this.rootElement||(this.usingExternalRenderer?this.rootElement=this.renderer.domElement.parentElement||document.body:(this.rootElement=document.createElement("div"),this.rootElement.style.width="100%",this.rootElement.style.height="100%",this.rootElement.style.position="absolute",document.body.appendChild(this.rootElement))),this.setupCamera(),this.setupRenderer(),this.setupWebXR(),this.setupControls(),this.setupEventHandlers(),this.threeScene=this.threeScene||new s.Scene,this.sceneHelper=new se(this.threeScene),this.sceneHelper.setupMeshCursor(),this.sceneHelper.setupFocusMarker(),this.sceneHelper.setupControlPlane(),this.loadingProgressBar.setContainer(this.rootElement),this.loadingSpinner.setContainer(this.rootElement),this.infoPanel.setContainer(this.rootElement),this.initialized=!0)}setupCamera(){if(!this.usingExternalCamera){const e=new s.Vector2;this.getRenderDimensions(e),this.perspectiveCamera=new s.PerspectiveCamera(50,e.x/e.y,.1,1e3),this.orthographicCamera=new s.OrthographicCamera(e.x/-2,e.x/2,e.y/2,e.y/-2,.1,1e3),this.camera=this.startInOrthographicMode?this.orthographicCamera:this.perspectiveCamera,this.camera.position.copy(this.initialCameraPosition),this.camera.up.copy(this.cameraUp).normalize(),this.camera.lookAt(this.initialCameraLookAt)}}setupRenderer(){if(!this.usingExternalRenderer){const e=new s.Vector2;this.getRenderDimensions(e),this.renderer=new s.WebGLRenderer({antialias:!1,precision:"highp"}),this.renderer.setPixelRatio(this.devicePixelRatio),this.renderer.autoClear=!0,this.renderer.setClearColor(new s.Color(0),0),this.renderer.setSize(e.x,e.y),this.resizeObserver=new ResizeObserver((()=>{this.getRenderDimensions(e),this.renderer.setSize(e.x,e.y),this.forceRenderNextFrame()})),this.resizeObserver.observe(this.rootElement),this.rootElement.appendChild(this.renderer.domElement)}}setupWebXR(){this.webXRMode&&(this.webXRMode===be.VR?this.rootElement.appendChild(we.createButton(this.renderer)):this.webXRMode===be.AR&&this.rootElement.appendChild(Te.createButton(this.renderer)),this.renderer.xr.addEventListener("sessionstart",(e=>{this.webXRActive=!0})),this.renderer.xr.addEventListener("sessionend",(e=>{this.webXRActive=!1})),this.renderer.xr.enabled=!0,this.camera.position.copy(this.initialCameraPosition),this.camera.up.copy(this.cameraUp).normalize(),this.camera.lookAt(this.initialCameraLookAt))}setupControls(){if(this.useBuiltInControls&&this.webXRMode===be.None){this.usingExternalCamera?this.camera.isOrthographicCamera?this.orthographicControls=new $(this.camera,this.renderer.domElement):this.perspectiveControls=new $(this.camera,this.renderer.domElement):(this.perspectiveControls=new $(this.perspectiveCamera,this.renderer.domElement),this.orthographicControls=new $(this.orthographicCamera,this.renderer.domElement));for(let e of[this.perspectiveControls,this.orthographicControls])e&&(e.listenToKeyEvents(window),e.rotateSpeed=.5,e.minPolarAngle=Math.PI/5,e.maxPolarAngle=Math.PI/2.5,e.enableDamping=!0,e.dampingFactor=.05,e.target.copy(this.initialCameraLookAt),e.update());this.controls=this.camera.isOrthographicCamera?this.orthographicControls:this.perspectiveControls}}setupEventHandlers(){this.useBuiltInControls&&this.webXRMode===be.None&&(this.mouseMoveListener=this.onMouseMove.bind(this),this.renderer.domElement.addEventListener("pointermove",this.mouseMoveListener,!1),this.mouseDownListener=this.onMouseDown.bind(this),this.renderer.domElement.addEventListener("pointerdown",this.mouseDownListener,!1),this.mouseUpListener=this.onMouseUp.bind(this),this.renderer.domElement.addEventListener("pointerup",this.mouseUpListener,!1),this.keyDownListener=this.onKeyDown.bind(this),window.addEventListener("keydown",this.keyDownListener,!1))}removeEventHandlers(){this.useBuiltInControls&&(this.renderer.domElement.removeEventListener("pointermove",this.mouseMoveListener),this.mouseMoveListener=null,this.renderer.domElement.removeEventListener("pointerdown",this.mouseDownListener),this.mouseDownListener=null,this.renderer.domElement.removeEventListener("pointerup",this.mouseUpListener),this.mouseUpListener=null,window.removeEventListener("keydown",this.keyDownListener),this.keyDownListener=null)}setRenderMode(e){this.renderMode=e}onKeyDown=function(){const e=new s.Vector3,t=new s.Matrix4,n=new s.Matrix4;return function(s){switch(e.set(0,0,-1),e.transformDirection(this.camera.matrixWorld),t.makeRotationAxis(e,Math.PI/128),n.makeRotationAxis(e,-Math.PI/128),s.code){case"KeyG":this.focalAdjustment+=.02,this.forceRenderNextFrame();break;case"KeyF":this.focalAdjustment-=.02,this.forceRenderNextFrame();break;case"KeyA":this.camera.up.transformDirection(t);break;case"KeyD":this.camera.up.transformDirection(n);break;case"KeyC":this.showMeshCursor=!this.showMeshCursor;break;case"KeyU":this.showControlPlane=!this.showControlPlane;break;case"KeyI":this.showInfo=!this.showInfo,this.showInfo?this.infoPanel.show():this.infoPanel.hide();break;case"KeyO":this.usingExternalCamera||this.setOrthographicMode(!this.camera.isOrthographicCamera);break;case"KeyP":this.usingExternalCamera||this.splatMesh.setPointCloudModeEnabled(!this.splatMesh.getPointCloudModeEnabled());break;case"Equal":this.usingExternalCamera||this.splatMesh.setSplatScale(this.splatMesh.getSplatScale()+.05);break;case"Minus":this.usingExternalCamera||this.splatMesh.setSplatScale(Math.max(this.splatMesh.getSplatScale()-.05,0))}}}();onMouseMove(e){this.mousePosition.set(e.offsetX,e.offsetY)}onMouseDown(){this.mouseDownPosition.copy(this.mousePosition),this.mouseDownTime=c()}onMouseUp=function(){const e=new s.Vector2;return function(t){e.copy(this.mousePosition).sub(this.mouseDownPosition);c()-this.mouseDownTime<.5&&e.length()<2&&this.onMouseClick(t)}}();onMouseClick(e){this.mousePosition.set(e.offsetX,e.offsetY)}checkForFocalPointChange=function(){const e=new s.Vector2,t=new s.Vector3,n=[];return function(){if(!this.transitioningCameraTarget&&(this.getRenderDimensions(e),n.length=0,this.raycaster.setFromCameraAndScreenPosition(this.camera,this.mousePosition,e),this.raycaster.intersectSplatMesh(this.splatMesh,n),n.length>0)){const e=n[0].origin;t.copy(e).sub(this.camera.position),t.length()>.75&&(this.previousCameraTarget.copy(this.controls.target),this.nextCameraTarget.copy(e),this.transitioningCameraTarget=!0,this.transitioningCameraTargetStartTime=c())}}}();getRenderDimensions(e){this.rootElement?(e.x=this.rootElement.offsetWidth,e.y=this.rootElement.offsetHeight):this.renderer.getSize(e)}setOrthographicMode(e){if(e===this.camera.isOrthographicCamera)return;const t=this.camera,n=e?this.orthographicCamera:this.perspectiveCamera;if(n.position.copy(t.position),n.up.copy(t.up),n.rotation.copy(t.rotation),n.quaternion.copy(t.quaternion),n.matrix.copy(t.matrix),this.camera=n,this.controls){const s=e=>{e.saveState(),e.reset()},r=this.controls,i=e?this.orthographicControls:this.perspectiveControls;s(i),s(r),i.target.copy(r.target),e?Be.setCameraZoomFromPosition(n,t,r):Be.setCameraPositionFromZoom(n,t,i),this.controls=i,this.camera.lookAt(this.controls.target)}}static setCameraPositionFromZoom=function(){const e=new s.Vector3;return function(t,n,s){const r=1/(.001*n.zoom);e.copy(s.target).sub(t.position).normalize().multiplyScalar(r).negate(),t.position.copy(s.target).add(e)}}();static setCameraZoomFromPosition=function(){const e=new s.Vector3;return function(t,n,s){const r=e.copy(s.target).sub(n.position).length();t.zoom=1/(.001*r)}}();updateSplatMesh=function(){const e=new s.Vector2;return function(){if(!this.splatMesh)return;if(this.splatMesh.getSplatCount()>0){this.splatMesh.updateTransforms(),this.getRenderDimensions(e);const t=.5*this.camera.projectionMatrix.elements[0]*this.devicePixelRatio*e.x,n=.5*this.camera.projectionMatrix.elements[5]*this.devicePixelRatio*e.y,s=this.camera.isOrthographicCamera?1/this.devicePixelRatio:1,r=this.focalAdjustment*s,i=1/r;this.adjustForWebXRStereo(e),this.splatMesh.updateUniforms(e,t*r,n*r,this.camera.isOrthographicCamera,this.camera.zoom||1,i)}}}();adjustForWebXRStereo(e){if(this.camera&&this.webXRActive){const t=this.renderer.xr.getCamera().projectionMatrix.elements[0],n=this.camera.projectionMatrix.elements[0];e.x*=n/t}}isLoadingOrUnloading(){return Object.keys(this.splatSceneDownloadPromises).length>0||null!==this.splatSceneDownloadAndBuildPromise||null!==this.splatSceneRemovalPromise}isDisposingOrDisposed(){return this.disposing||this.disposed}addSplatSceneDownloadPromise(e){this.splatSceneDownloadPromises[e.id]=e}removeSplatSceneDownloadPromise(e){delete this.splatSceneDownloadPromises[e.id]}setSplatSceneDownloadAndBuildPromise(e){this.splatSceneDownloadAndBuildPromise=e}clearSplatSceneDownloadAndBuildPromise(){this.splatSceneDownloadAndBuildPromise=null}addSplatScene(e,t={}){if(this.isLoadingOrUnloading())throw new Error("Cannot add splat scene while another load or unload is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot add splat scene after dispose() is called.");const n=void 0!==t.format&&null!==t.format?t.format:j(e),s=Be.isStreamable(n)&&t.streamView,r=void 0===t.showLoadingUI||null===t.showLoadingUI||t.showLoadingUI;let i=null;r&&(this.loadingSpinner.removeAllTasks(),i=this.loadingSpinner.addTask("Downloading..."));const o=(e,t,n)=>{if(r)if(n===O)if(100==e)this.loadingSpinner.setMessageForTask(i,"Download complete!");else if(s)this.loadingSpinner.setMessageForTask(i,"Downloading splats...");else{const e=t?`: ${t}`:"...";this.loadingSpinner.setMessageForTask(i,`Downloading${e}`)}else n===L?this.loadingSpinner.setMessageForTask(i,"Processing splats..."):this.loadingSpinner.setMessageForTask(i,"Ready!")};let a=!1,l=0;const c=(e,t)=>{r&&((e&&s||t&&!s)&&this.runAfterFirstSort.push((()=>{this.loadingSpinner.removeTask(i),t||a||this.loadingProgressBar.show()})),s&&(t?(a=!0,this.loadingProgressBar.hide()):this.loadingProgressBar.setProgress(l)))};return(s?this.downloadAndBuildSingleSplatSceneStreaming.bind(this):this.downloadAndBuildSingleSplatSceneNonStreaming.bind(this))(e,n,t.splatAlphaRemovalThreshold,((e,n,i)=>{!s&&t.onProgress&&t.onProgress(0,"0%",L);const o={rotation:t.rotation||t.orientation,position:t.position,scale:t.scale,splatAlphaRemovalThreshold:t.splatAlphaRemovalThreshold};return this.addSplatBuffers([e],[o],i,n&&r,r).then((()=>{!s&&t.onProgress&&t.onProgress(100,"100%",L),c(n,i)}))}).bind(this),((e,n,s)=>{l=e,o(e,n,s),t.onProgress&&t.onProgress(e,n,s)}),(()=>{this.loadingProgressBar.hide(),this.loadingSpinner.removeAllTasks()}).bind(this))}downloadAndBuildSingleSplatSceneNonStreaming(e,t,n,s,r,o){const a=this.downloadSplatSceneToSplatBuffer(e,n,r,!1,void 0,t).then((e=>(this.removeSplatSceneDownloadPromise(a),s(e,!0,!0).then((()=>{this.clearSplatSceneDownloadAndBuildPromise()}))))).catch((t=>{if(o&&o(),this.clearSplatSceneDownloadAndBuildPromise(),this.removeSplatSceneDownloadPromise(a),!(t instanceof i))throw new Error(`Viewer::addSplatScene -> Could not load file ${e}`)}));return this.addSplatSceneDownloadPromise(a),this.setSplatSceneDownloadAndBuildPromise(a),a}downloadAndBuildSingleSplatSceneStreaming(e,t,n,s,o,a){let l,c,h,p,u=0,m=!1;const f=[],g=()=>{if(f.length>0&&!m&&!this.isDisposingOrDisposed()){m=!0;const e=f.shift();s(e.splatBuffer,e.firstBuild,e.finalBuild).then((()=>{m=!1,e.firstBuild?(c=null,l()):e.finalBuild&&(h(),this.clearSplatSceneDownloadAndBuildPromise()),f.length>0&&d((()=>g()))}))}};let S=this.downloadSplatSceneToSplatBuffer(e,n,o,!0,((e,t)=>{this.isDisposingOrDisposed()||(t||0===f.length||e.getSplatCount()>f[0].splatBuffer.getSplatCount())&&(f.push({splatBuffer:e,firstBuild:0===u,finalBuild:t}),u++,g())}),t);const y=new r(((e,t)=>{l=e,c=t}),S.abortHandler),C=new r(((e,t)=>{h=e,p=t}));return this.addSplatSceneDownloadPromise(S),this.setSplatSceneDownloadAndBuildPromise(C),S.then((()=>{this.removeSplatSceneDownloadPromise(S)})).catch((e=>{this.clearSplatSceneDownloadAndBuildPromise(),this.removeSplatSceneDownloadPromise(S),e instanceof i||(p(e),c&&c(e),a&&a(e))})),y}addSplatScenes(e,t=!0,n=void 0){if(this.isLoadingOrUnloading())throw new Error("Cannot add splat scene while another load or unload is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot add splat scene after dispose() is called.");const s=e.length,o=[];t&&(this.loadingSpinner.removeAllTasks(),this.loadingSpinner.show());const a=(e,r,i)=>{o[e]=r;let a=0;for(let e=0;e<s;e++)a+=o[e]||0;a/=s,i=`${a.toFixed(2)}%`,t&&this.loadingSpinner.setMessage(100==a?"Download complete!":`Downloading: ${i}`),n&&n(a,i,O)},l=[],c=[],h=[];for(let t=0;t<e.length;t++){const n=e[t],s=void 0!==n.format&&null!==n.format?n.format:j(n.path),r=this.downloadSplatSceneToSplatBuffer(n.path,n.splatAlphaRemovalThreshold,a.bind(this,t),!1,void 0,s);h.push(r.abortHandler),l.push(r),c.push(r.promise),this.addSplatSceneDownloadPromise(r)}const d=new r(((s,r)=>{Promise.all(c).then((r=>{t&&this.loadingSpinner.hide(),n&&options.onProgress(0,"0%",L),this.addSplatBuffers(r,e,!0,t,t).then((()=>{n&&n(100,"100%",L),this.clearSplatSceneDownloadAndBuildPromise(),s()}))})).catch((e=>{t&&this.loadingSpinner.hide(),this.clearSplatSceneDownloadAndBuildPromise(),e instanceof i?s():r(new Error("Viewer::addSplatScenes -> Could not load one or more splat scenes."))})).finally((()=>{for(let e of l)this.removeSplatSceneDownloadPromise(e)}))}),(()=>{for(let e of h)e()}));return this.setSplatSceneDownloadAndBuildPromise(d),d}downloadSplatSceneToSplatBuffer(e,t=1,n=void 0,s=!1,i=void 0,o){return o===W.Splat?V.loadFromURL(e,n,s,i,t,0,!1):o===W.KSplat?N.loadFromURL(e,n,s,i):o===W.Ply?_.loadFromURL(e,n,s,i,t,0,this.sphericalHarmonicsDegree):r.reject(new Error(`Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${e}`))}static isStreamable(e){return e===W.Splat||e===W.KSplat||e===W.Ply}addSplatBuffers=function(){return function(e,t=[],n=!0,s=!0,r=!0){if(this.isDisposingOrDisposed())return Promise.resolve();this.splatRenderReady=!1;let i=null;const o=e=>{this.isDisposingOrDisposed()||(null!==i&&(this.loadingSpinner.removeTask(i),i=null),!this.gpuAcceleratedSort&&this.sortWorker&&this.sortWorker.postMessage({centers:e.centers.buffer,transformIndexes:e.sceneIndexes.buffer,range:{from:e.from,to:e.to,count:e.count}}),this.splatRenderReady=!0,this.sortNeededForSceneChange=!0)};return new Promise((a=>{s&&(i=this.loadingSpinner.addTask("Processing splats...")),d((()=>{if(this.isDisposingOrDisposed())a();else{const s=this.addSplatBuffersToMesh(e,t,n,r),i=this.splatMesh.getMaxSplatCount();this.sortWorker&&this.sortWorker.maxSplatCount!==i&&this.disposeSortWorker();(!this.sortWorker&&i>0?this.setupSortWorker(this.splatMesh):Promise.resolve()).then((()=>{o(s),a()}))}}),!0)}))}}();addSplatBuffersToMesh(e,t,n=!0,s=!1){if(this.isDisposingOrDisposed())return;const r=this.splatMesh.splatBuffers||[],i=this.splatMesh.splatBufferOptions||[];let o;r.push(...e),i.push(...t),this.renderer&&this.splatMesh.setRenderer(this.renderer);return this.splatMesh.build(r,i,!0,n,(e=>{if(this.isDisposingOrDisposed())return;const t=this.splatMesh.getSplatCount();s&&t>=15e5&&(e||o||(this.loadingSpinner.setMinimized(!0,!0),o=this.loadingSpinner.addTask("Optimizing splats...")))}),(e=>{this.isDisposingOrDisposed()||e&&o&&this.loadingSpinner.removeTask(o)}))}setupSortWorker(e){if(!this.isDisposingOrDisposed())return new Promise((t=>{const n=this.integerBasedSort?Int32Array:Float32Array,s=e.getSplatCount(),r=e.getMaxSplatCount();this.sortWorker=function(e,t,n,s){const r=new Worker(URL.createObjectURL(new Blob(["(",ve.toString(),")(self)"],{type:"application/javascript"}))),i=atob("AGFzbQEAAAAADAZkeWxpbmsAAAAAAAEbA2AAAGAQf39/f39/f39/f39/f39/fwBgAAF/AhIBA2VudgZtZW1vcnkCAwCAgAQDBAMAAQIHOQMRX193YXNtX2NhbGxfY3RvcnMAAAtzb3J0SW5kZXhlcwABE2Vtc2NyaXB0ZW5fdGxzX2luaXQAAgrHEAMDAAELuxAFAXwDewJ/A30CfiALIAprIQwCQCAOBEAgDQRAQfj///8HIQ5BiICAgHghDSALIAxNDQIgDCEBA0AgAyABQQJ0IgVqIAIgACAFaigCAEECdGooAgAiBTYCACAFIA4gBSAOSBshDiAFIA0gBSANShshDSABQQFqIgEgC0cNAAsMAgsgDwRAQfj///8HIQ5BiICAgHghDSALIAxNDQJBfyEPIAwhAgNAIA8gByAAIAJBAnQiFGooAgAiFUECdGooAgAiCkcEQAJ+IAX9CQIIIAggCkEGdGoiD/0JAgAgDyoCEP0gASAPKgIg/SACIA8qAjD9IAP95gEgBf0JAhggD/0JAgQgDyoCFP0gASAPKgIk/SACIA8qAjT9IAP95gH95AEgBf0JAiggD/0JAgggDyoCGP0gASAPKgIo/SACIA8qAjj9IAP95gH95AEgBf0JAjggD/0JAgwgDyoCHP0gASAPKgIs/SACIA8qAjz9IAP95gH95AEiEf0fArv9FCAR/R8Du/0iAf0MAAAAAABAj0AAAAAAAECPQCIS/fIBIhP9IQEiEJlEAAAAAAAA4ENjBEAgELAMAQtCgICAgICAgICAfwshGQJ+IBP9IQAiEJlEAAAAAAAA4ENjBEAgELAMAQtCgICAgICAgICAfwv9EiETAn4gEf0fALv9FCAR/R8Bu/0iASAS/fIBIhH9IQEiEJlEAAAAAAAA4ENjBEAgELAMAQtCgICAgICAgICAfwshGiATIBn9HgEhEgJ+IBH9IQAiEJlEAAAAAAAA4ENjBEAgELAMAQtCgICAgICAgICAfwv9EiAa/R4BIBL9DQABAgMICQoLEBESExgZGhshEiAKIQ8LIAMgFGogASAVQQR0av0AAAAgEv21ASIR/RsAIBH9GwFqIBH9GwJqIBH9GwNqIgo2AgAgCiAOIAogDkgbIQ4gCiANIAogDUobIQ0gAkEBaiICIAtHDQALDAILAn8gBSoCGLtEAAAAAABAj0CiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyEKAn8gBSoCCLtEAAAAAABAj0CiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyECAn8gBSoCKLtEAAAAAABAj0CiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyEFQfj///8HIQ5BiICAgHghDSALIAxNDQEgAv0RIAr9HAEgBf0cAiESIAwhBQNAIAMgBUECdCICaiABIAAgAmooAgBBBHRq/QAAACAS/bUBIhH9GwAgEf0bAWogEf0bAmoiAjYCACACIA4gAiAOSBshDiACIA0gAiANShshDSAFQQFqIgUgC0cNAAsMAQsgDQRAQfj///8HIQ5BiICAgHghDSALIAxNDQEgDCEBA0AgAyABQQJ0IgVqAn8gAiAAIAVqKAIAQQJ0aioCALtEAAAAAAAAsECiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyIKNgIAIAogDiAKIA5IGyEOIAogDSAKIA1KGyENIAFBAWoiASALRw0ACwwBCwJAIA9FBEAgCyAMSw0BQYiAgIB4IQ1B+P///wchDgwCC0H4////ByEOQYiAgIB4IQ0gCyAMTQ0BQX8hDyAMIQIDQCAPIAcgACACQQJ0IhRqKAIAQQJ0IhVqKAIAIgpHBEAgBf0JAgggCCAKQQZ0aiIP/QkCACAPKgIQ/SABIA8qAiD9IAIgDyoCMP0gA/3mASAF/QkCGCAP/QkCBCAPKgIU/SABIA8qAiT9IAIgDyoCNP0gA/3mAf3kASAF/QkCKCAP/QkCCCAPKgIY/SABIA8qAij9IAIgDyoCOP0gA/3mAf3kASAF/QkCOCAP/QkCDCAPKgIc/SABIA8qAiz9IAIgDyoCPP0gA/3mAf3kASERIAohDwsgAyAUagJ/IBEgASAVQQJ0IgpqKQIA/RL95gEiEv0fACAS/R8BkiARIBH9DQgJCgsMDQ4PAAAAAAAAAAAgASAKQQhyaikCAP0S/eYBIhL9HwCSIBL9HwGSu0QAAAAAAACwQKIiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLIgo2AgAgCiAOIAogDkgbIQ4gCiANIAogDUobIQ0gAkEBaiICIAtHDQALDAELIAUqAighFiAFKgIYIRcgBSoCCCEYQfj///8HIQ5BiICAgHghDSAMIQUDQAJ/IBggASAAIAVBAnQiB2ooAgBBBHRqIgIqAgCUIBcgAioCBJSSIBYgAioCCJSSu0QAAAAAAACwQKIiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLIQogAyAHaiAKNgIAIAogDiAKIA5IGyEOIAogDSAKIA1KGyENIAVBAWoiBSALRw0ACwsgCyAMSwRAIAlBAWuzIA2yIA6yk5UhFiAMIQ0DQAJ/IBYgAyANQQJ0aiIBKAIAIA5rspQiF4tDAAAAT10EQCAXqAwBC0GAgICAeAshCiABIAo2AgAgBCAKQQJ0aiIBIAEoAgBBAWo2AgAgDUEBaiINIAtHDQALCyAJQQJPBEAgBCgCACENQQEhDgNAIAQgDkECdGoiASABKAIAIA1qIg02AgAgDkEBaiIOIAlHDQALCyAMQQBKBEAgDCEOA0AgBiAOQQFrIgFBAnQiAmogACACaigCADYCACAOQQFKIQIgASEOIAINAAsLIAsgDEoEQCALIQ4DQCAGIAsgBCADIA5BAWsiDkECdCIBaigCAEECdGoiAigCACIFa0ECdGogACABaigCADYCACACIAVBAWs2AgAgDCAOSA0ACwsLBABBAAs="),o=new Uint8Array(i.length);for(let e=0;e<i.length;e++)o[e]=i.charCodeAt(e);return r.postMessage({init:{sorterWasmBytes:o.buffer,splatCount:e,useSharedMemory:t,integerBasedSort:n,dynamicMode:s,Constants:{BytesPerFloat:m.BytesPerFloat,BytesPerInt:m.BytesPerInt,DepthMapRange:m.DepthMapRange,MemoryPageSize:m.MemoryPageSize,MaxScenes:m.MaxScenes}}}),r}(r,this.sharedMemoryForWorkers,this.integerBasedSort,this.splatMesh.dynamicMode);let i=0;this.sortWorker.onmessage=e=>{if(e.data.sortDone){if(this.sortRunning=!1,this.sharedMemoryForWorkers)this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes,e.data.splatRenderCount);else{const t=new Uint32Array(e.data.sortedIndexes.buffer,0,e.data.splatRenderCount);this.splatMesh.updateRenderIndexes(t,e.data.splatRenderCount)}this.lastSortTime=e.data.sortTime,this.sortPromiseResolver(),this.sortPromiseResolver=null,this.forceRenderNextFrame(),0===i&&(this.runAfterFirstSort.forEach((e=>{e()})),this.runAfterFirstSort.length=0),i++}else if(e.data.sortCanceled)this.sortRunning=!1;else if(e.data.sortSetupPhase1Complete){this.logLevel>=ye.Info&&console.log("Sorting web worker WASM setup complete."),this.sharedMemoryForWorkers?(this.sortWorkerSortedIndexes=new Uint32Array(e.data.sortedIndexesBuffer,e.data.sortedIndexesOffset,r),this.sortWorkerIndexesToSort=new Uint32Array(e.data.indexesToSortBuffer,e.data.indexesToSortOffset,r),this.sortWorkerPrecomputedDistances=new n(e.data.precomputedDistancesBuffer,e.data.precomputedDistancesOffset,r),this.sortWorkerTransforms=new Float32Array(e.data.transformsBuffer,e.data.transformsOffset,16*m.MaxScenes)):(this.sortWorkerIndexesToSort=new Uint32Array(r),this.sortWorkerPrecomputedDistances=new n(r),this.sortWorkerTransforms=new Float32Array(16*m.MaxScenes));for(let e=0;e<s;e++)this.sortWorkerIndexesToSort[e]=e;if(this.sortWorker.maxSplatCount=r,this.logLevel>=ye.Info){console.log("Sorting web worker ready.");const e=this.splatMesh.getSplatDataTextures(),t=e.covariances.size,n=e.centerColors.size;console.log("Covariances texture size: "+t.x+" x "+t.y),console.log("Centers/colors texture size: "+n.x+" x "+n.y)}t()}}}))}disposeSortWorker(){this.sortWorker&&this.sortWorker.terminate(),this.sortWorker=null,this.sortPromise=null,this.sortPromiseResolver&&(this.sortPromiseResolver(),this.sortPromiseResolver=null),this.sortRunning=!1}removeSplatScene(e,t=!0){if(this.isLoadingOrUnloading())throw new Error("Cannot remove splat scene while another load or unload is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot remove splat scene after dispose() is called.");let n;return this.splatSceneRemovalPromise=new Promise(((s,r)=>{let i;t&&(this.loadingSpinner.removeAllTasks(),this.loadingSpinner.show(),i=this.loadingSpinner.addTask("Removing splat scene..."));const o=()=>{t&&(this.loadingSpinner.hide(),this.loadingSpinner.removeTask(i))},a=e=>{o(),this.splatSceneRemovalPromise=null,e?r(e):s()},l=()=>!!this.isDisposingOrDisposed()&&(a(),!0);n=this.sortPromise||Promise.resolve(),n.then((()=>{if(l())return;const t=[],s=[],r=[],i=this.splatMesh.visibleRegionFadeStartRadius;for(let n=0;n<this.splatMesh.scenes.length;n++)if(n!==e){const e=this.splatMesh.scenes[n];t.push(e.splatBuffer),s.push(this.splatMesh.sceneOptions[n]),r.push({position:e.position.clone(),quaternion:e.quaternion.clone(),scale:e.scale.clone()})}this.disposeSortWorker(),this.splatMesh.dispose(),this.createSplatMesh(),this.addSplatBuffers(t,s,!0,!1,!0).then((()=>{l()||(o(),this.splatMesh.visibleRegionFadeStartRadius=i,this.splatMesh.scenes.forEach(((e,t)=>{e.position.copy(r[t].position),e.quaternion.copy(r[t].quaternion),e.scale.copy(r[t].scale)})),this.splatMesh.updateTransforms(),this.splatRenderReady=!1,this.updateSplatSort(!0).then((()=>{l()?this.splatRenderReady=!0:(n=this.sortPromise||Promise.resolve(),n.then((()=>{this.splatRenderReady=!0,a()})))})))})).catch((e=>{a(e)}))}))})),this.splatSceneRemovalPromise}start(){if(!this.selfDrivenMode)throw new Error("Cannot start viewer unless it is in self driven mode.");this.webXRMode?this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc):this.requestFrameId=requestAnimationFrame(this.selfDrivenUpdateFunc),this.selfDrivenModeRunning=!0}stop(){this.selfDrivenMode&&this.selfDrivenModeRunning&&(this.webXRMode||cancelAnimationFrame(this.requestFrameId),this.selfDrivenModeRunning=!1)}async dispose(){this.disposing=!0;let e=[],t=[];for(let n in this.splatSceneDownloadPromises)if(this.splatSceneDownloadPromises.hasOwnProperty(n)){const s=this.splatSceneDownloadPromises[n];t.push(s),e.push(s.promise)}this.sortPromise&&e.push(this.sortPromise);const n=Promise.all(e).finally((()=>{this.stop(),this.controls&&(this.controls.dispose(),this.controls=null),this.splatMesh&&(this.splatMesh.dispose(),this.splatMesh=null),this.sceneHelper&&(this.sceneHelper.dispose(),this.sceneHelper=null),this.resizeObserver&&(this.resizeObserver.unobserve(this.rootElement),this.resizeObserver=null),this.disposeSortWorker(),this.removeEventHandlers(),this.loadingSpinner.removeAllTasks(),this.loadingSpinner.setContainer(null),this.loadingProgressBar.hide(),this.loadingProgressBar.setContainer(null),this.infoPanel.setContainer(null),this.camera=null,this.threeScene=null,this.splatRenderReady=!1,this.initialized=!1,this.renderer&&(this.usingExternalRenderer||(this.rootElement.removeChild(this.renderer.domElement),this.renderer.dispose()),this.renderer=null),this.usingExternalRenderer||document.body.removeChild(this.rootElement),this.sortWorkerSortedIndexes=null,this.sortWorkerIndexesToSort=null,this.sortWorkerPrecomputedDistances=null,this.sortWorkerTransforms=null,this.disposed=!0,this.disposing=!1}));return t.forEach((e=>{e.abort()})),n}selfDrivenUpdate(){this.selfDrivenMode&&!this.webXRMode&&(this.requestFrameId=requestAnimationFrame(this.selfDrivenUpdateFunc)),this.update(),this.shouldRender()?(this.render(),this.consecutiveRenderFrames++):this.consecutiveRenderFrames=0,this.renderNextFrame=!1}forceRenderNextFrame(){this.renderNextFrame=!0}shouldRender=function(){let e=0;const t=new s.Vector3,n=new s.Quaternion,r=1e-4;return function(){let s=!1,i=!1;if(this.camera){const e=this.camera.position,s=this.camera.quaternion;i=Math.abs(e.x-t.x)>r||Math.abs(e.y-t.y)>r||Math.abs(e.z-t.z)>r||Math.abs(s.x-n.x)>r||Math.abs(s.y-n.y)>r||Math.abs(s.z-n.z)>r||Math.abs(s.w-n.w)>r}return s=this.renderMode!==Fe.Never&&(0===e||this.splatMesh.visibleRegionChanging||i||this.renderMode===Fe.Always||!0===this.dynamicMode||this.renderNextFrame),this.camera&&(t.copy(this.camera.position),n.copy(this.camera.quaternion)),e++,s}}();render=function(){if(!this.initialized||!this.splatRenderReady)return;const e=this.renderer.autoClear;(e=>{for(let t of e.children)if(t.visible)return!0;return!1})(this.threeScene)&&(this.renderer.render(this.threeScene,this.camera),this.renderer.autoClear=!1),this.renderer.render(this.splatMesh,this.camera),this.renderer.autoClear=!1,this.sceneHelper.getFocusMarkerOpacity()>0&&this.renderer.render(this.sceneHelper.focusMarker,this.camera),this.showControlPlane&&this.renderer.render(this.sceneHelper.controlPlane,this.camera),this.renderer.autoClear=e};update(e,t){this.dropInMode&&this.updateForDropInMode(e,t),this.initialized&&this.splatRenderReady&&(this.controls&&(this.controls.update(),this.camera.isOrthographicCamera&&!this.usingExternalCamera&&Be.setCameraPositionFromZoom(this.camera,this.camera,this.controls)),this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode),this.updateSplatSort(),this.updateForRendererSizeChanges(),this.updateSplatMesh(),this.updateMeshCursor(),this.updateFPS(),this.timingSensitiveUpdates(),this.updateInfoPanel(),this.updateControlPlane())}updateForDropInMode(e,t){this.renderer=e,this.splatMesh&&this.splatMesh.setRenderer(this.renderer),this.camera=t,this.controls&&(this.controls.object=t),this.init()}updateFPS=function(){let e=c(),t=0;return function(){if(this.consecutiveRenderFrames>60){const n=c();n-e>=1?(this.currentFPS=t,t=0,e=n):t++}else this.currentFPS=null}}();updateForRendererSizeChanges=function(){const e=new s.Vector2,t=new s.Vector2;let n;return function(){this.usingExternalCamera||(this.renderer.getSize(t),void 0!==n&&n===this.camera.isOrthographicCamera&&t.x===e.x&&t.y===e.y||(this.camera.isOrthographicCamera?(this.camera.left=-t.x/2,this.camera.right=t.x/2,this.camera.top=t.y/2,this.camera.bottom=-t.y/2):this.camera.aspect=t.x/t.y,this.camera.updateProjectionMatrix(),e.copy(t),n=this.camera.isOrthographicCamera))}}();timingSensitiveUpdates=function(){let e;return function(){const t=c();e||(e=t);const n=t-e;this.updateCameraTransition(t),this.updateFocusMarker(n),e=t}}();updateCameraTransition=function(){let e=new s.Vector3,t=new s.Vector3,n=new s.Vector3;return function(s){if(this.transitioningCameraTarget){t.copy(this.previousCameraTarget).sub(this.camera.position).normalize(),n.copy(this.nextCameraTarget).sub(this.camera.position).normalize();const r=Math.acos(t.dot(n)),i=(r/(Math.PI/3)*.65+.3)/r*(s-this.transitioningCameraTargetStartTime);e.copy(this.previousCameraTarget).lerp(this.nextCameraTarget,i),this.camera.lookAt(e),this.controls.target.copy(e),i>=1&&(this.transitioningCameraTarget=!1)}}}();updateFocusMarker=function(){const e=new s.Vector2;let t=!1;return function(n){if(this.getRenderDimensions(e),this.transitioningCameraTarget){this.sceneHelper.setFocusMarkerVisibility(!0);const s=Math.max(this.sceneHelper.getFocusMarkerOpacity(),0);let r=Math.min(s+10*n,1);this.sceneHelper.setFocusMarkerOpacity(r),this.sceneHelper.updateFocusMarker(this.nextCameraTarget,this.camera,e),t=!0,this.forceRenderNextFrame()}else{let s;if(s=t?1:Math.min(this.sceneHelper.getFocusMarkerOpacity(),1),s>0){this.sceneHelper.updateFocusMarker(this.nextCameraTarget,this.camera,e);let t=Math.max(s-2.5*n,0);this.sceneHelper.setFocusMarkerOpacity(t),0===t&&this.sceneHelper.setFocusMarkerVisibility(!1)}s>0&&this.forceRenderNextFrame(),t=!1}}}();updateMeshCursor=function(){const e=[],t=new s.Vector2;return function(){this.showMeshCursor?(this.forceRenderNextFrame(),this.getRenderDimensions(t),e.length=0,this.raycaster.setFromCameraAndScreenPosition(this.camera,this.mousePosition,t),this.raycaster.intersectSplatMesh(this.splatMesh,e),e.length>0?(this.sceneHelper.setMeshCursorVisibility(!0),this.sceneHelper.positionAndOrientMeshCursor(e[0].origin,this.camera)):this.sceneHelper.setMeshCursorVisibility(!1)):(this.sceneHelper.getMeschCursorVisibility()&&this.forceRenderNextFrame(),this.sceneHelper.setMeshCursorVisibility(!1))}}();updateInfoPanel=function(){const e=new s.Vector2;return function(){if(!this.showInfo)return;const t=this.splatMesh.getSplatCount();this.getRenderDimensions(e);const n=this.controls?this.controls.target:null,s=this.showMeshCursor?this.sceneHelper.meshCursor.position:null,r=t>0?this.splatRenderCount/t*100:0;this.infoPanel.update(e,this.camera.position,n,this.camera.up,this.camera.isOrthographicCamera,s,this.currentFPS||"N/A",t,this.splatRenderCount,r,this.lastSortTime,this.focalAdjustment,this.splatMesh.getSplatScale(),this.splatMesh.getPointCloudModeEnabled())}}();updateControlPlane(){this.showControlPlane?(this.sceneHelper.setControlPlaneVisibility(!0),this.sceneHelper.positionAndOrientControlPlane(this.controls.target,this.camera.up)):this.sceneHelper.setControlPlaneVisibility(!1)}updateSplatSort=function(){const e=new s.Matrix4,t=[],n=new s.Vector3(0,0,-1),r=new s.Vector3(0,0,-1),i=new s.Vector3,o=new s.Vector3,a=[],l=[{angleThreshold:.55,sortFractions:[.125,.33333,.75]},{angleThreshold:.65,sortFractions:[.33333,.66667]},{angleThreshold:.8,sortFractions:[.5]}];return async function(s=!1){if(this.sortRunning)return;if(this.splatMesh.getSplatCount()<=0)return;let c=0,h=0,d=!1,p=!1;if(r.set(0,0,-1).applyQuaternion(this.camera.quaternion),c=r.dot(n),h=o.copy(this.camera.position).sub(i).length(),!s&&!(this.sortNeededForSceneChange||this.splatMesh.dynamicMode||0!==a.length||(c<=.99&&(d=!0),h>=1&&(p=!0),d||p)))return;this.sortRunning=!0;const{splatRenderCount:u,shouldSortAll:m}=this.gatherSceneNodesForSort();this.splatRenderCount=u,e.copy(this.camera.matrixWorld).invert();const f=this.perspectiveCamera||this.camera;if(e.premultiply(f.projectionMatrix),e.multiply(this.splatMesh.matrixWorld),this.gpuAcceleratedSort&&(a.length<=1||a.length%2==0)&&await this.splatMesh.computeDistancesOnGPU(e,this.sortWorkerPrecomputedDistances),this.splatMesh.dynamicMode||m)a.push(this.splatRenderCount);else if(0===a.length){for(let e of l)if(c<e.angleThreshold){for(let t of e.sortFractions)a.push(Math.floor(this.splatRenderCount*t));break}a.push(this.splatRenderCount)}let g=Math.min(a.shift(),this.splatRenderCount);t[0]=this.camera.position.x,t[1]=this.camera.position.y,t[2]=this.camera.position.z;const S={modelViewProj:e.elements,cameraPosition:t,splatRenderCount:this.splatRenderCount,splatSortCount:g,usePrecomputedDistances:this.gpuAcceleratedSort};this.splatMesh.dynamicMode&&this.splatMesh.fillTransformsArray(this.sortWorkerTransforms),this.sharedMemoryForWorkers||(S.indexesToSort=this.sortWorkerIndexesToSort,S.transforms=this.sortWorkerTransforms,this.gpuAcceleratedSort&&(S.precomputedDistances=this.sortWorkerPrecomputedDistances)),this.sortPromise=new Promise((e=>{this.sortPromiseResolver=e})),this.sortWorker.postMessage({sort:S}),0===a.length&&(i.copy(this.camera.position),n.copy(r)),this.sortNeededForSceneChange=!1}}();gatherSceneNodesForSort=function(){const e=[];let t=null;const n=new s.Vector3,r=new s.Vector3,i=new s.Vector3,o=new s.Matrix4,a=new s.Matrix4,l=new s.Matrix4,c=new s.Vector3,h=new s.Vector3(0,0,-1),d=new s.Vector3,p=e=>d.copy(e.max).sub(e.min).length();return function(d=!1){this.getRenderDimensions(c);const u=c.y/2/Math.tan(this.camera.fov/2*s.MathUtils.DEG2RAD),f=Math.atan(c.x/2/u),g=Math.atan(c.y/2/u),S=Math.cos(f),y=Math.cos(g),C=this.splatMesh.getSplatTree();if(C){a.copy(this.camera.matrixWorld).invert(),a.multiply(this.splatMesh.matrixWorld);let t=0,s=0;for(let c=0;c<C.subTrees.length;c++){const u=C.subTrees[c];o.copy(a),this.splatMesh.dynamicMode&&(this.splatMesh.getSceneTransform(c,l),o.multiply(l));const m=u.nodesWithIndexes.length;for(let a=0;a<m;a++){const l=u.nodesWithIndexes[a];if(!l.data||!l.data.indexes||0===l.data.indexes.length)continue;i.copy(l.center).applyMatrix4(o);const c=i.length();i.normalize(),n.copy(i).setX(0).normalize(),r.copy(i).setY(0).normalize();const m=h.dot(r),f=h.dot(n),g=p(l);!d&&(m<S-.6||f<y-.6)&&c>g||(s+=l.data.indexes.length,e[t]=l,l.data.distanceToNode=c,t++)}}e.length=t,e.sort(((e,t)=>e.data.distanceToNode<t.data.distanceToNode?-1:1));let c=s*m.BytesPerInt;for(let n=0;n<t;n++){const t=e[n],s=t.data.indexes.length,r=s*m.BytesPerInt;new Uint32Array(this.sortWorkerIndexesToSort.buffer,c-r,s).set(t.data.indexes),c-=r}return{splatRenderCount:s,shouldSortAll:!1}}{const e=this.splatMesh.getSplatCount();if(!t||t.length!==e){t=new Uint32Array(e);for(let n=0;n<e;n++)t[n]=n}return this.sortWorkerIndexesToSort.set(t),{splatRenderCount:e,shouldSortAll:!0}}}}();getSplatMesh(){return this.splatMesh}getSplatScene(e){return this.splatMesh.getScene(e)}isMobile(){return navigator.userAgent.includes("Mobi")}}class Me extends s.Group{constructor(e={}){super(),e.selfDrivenMode=!1,e.useBuiltInControls=!1,e.rootElement=null,e.ignoreDevicePixelRatio=!1,e.dropInMode=!0,e.camera=void 0,e.renderer=void 0,this.viewer=new Be(e),this.splatMesh=null,this.callbackMesh=Me.createCallbackMesh(),this.add(this.callbackMesh),this.callbackMesh.onBeforeRender=Me.onBeforeRender.bind(this,this.viewer)}addSplatScene(e,t={}){return!1!==t.showLoadingUI&&(t.showLoadingUI=!0),this.viewer.addSplatScene(e,t)}addSplatScenes(e,t){return!1!==t&&(t=!0),this.viewer.addSplatScenes(e,t)}getSplatScene(e){return this.viewer.getSplatScene(e)}removeSplatScene(e){return this.viewer.removeSplatScene(e)}dispose(){return this.viewer.dispose()}static onBeforeRender(e,t,n,s){this.splatMesh!==this.viewer.splatMesh&&(this.splatMesh&&this.remove(this.splatMesh),this.splatMesh=this.viewer.splatMesh,this.add(this.viewer.splatMesh)),e.update(t,s)}static createCallbackMesh(){const e=new s.SphereGeometry(1,8,8),t=new s.MeshBasicMaterial;t.colorWrite=!1,t.depthWrite=!1;const n=new s.Mesh(e,t);return n.frustumCulled=!1,n}}e.AbortablePromise=r,e.CompressedPlyParser=P,e.DropInViewer=Me,e.KSplatLoader=N,e.LoaderUtils=G,e.LogLevel=ye,e.OrbitControls=$,e.PlyLoader=_,e.PlyParser=R,e.RenderMode=Fe,e.SceneFormat=W,e.SceneRevealMode=Se,e.SplatBuffer=v,e.SplatBufferGenerator=k,e.SplatLoader=V,e.SplatParser=U,e.SplatPartitioner=I,e.Viewer=Be,e.WebXRMode=be}));
//# sourceMappingURL=gaussian-splats-3d.umd.min.cjs.map
