{"version":3,"file":"gaussian-splats-3d.module.min.js","sources":["../src/AbortablePromise.js","../src/Util.js","../src/loaders/UncompressedSplatArray.js","../src/Constants.js","../src/loaders/SplatBuffer.js","../src/loaders/ply/CompressedPlyParser.js","../src/loaders/ply/PlyParser.js","../src/loaders/SplatPartitioner.js","../src/loaders/SplatBufferGenerator.js","../src/loaders/LoaderStatus.js","../src/loaders/ply/PlyLoader.js","../src/loaders/splat/SplatParser.js","../src/loaders/splat/SplatLoader.js","../src/loaders/ksplat/KSplatLoader.js","../src/loaders/SceneFormat.js","../src/loaders/Utils.js","../src/OrbitControls.js","../src/ui/LoadingSpinner.js","../src/ui/Util.js","../src/ui/LoadingProgressBar.js","../src/ui/InfoPanel.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/SplatScene.js","../src/splattree/SplatTree.js","../src/three-shim/WebGLExtensions.js","../src/three-shim/WebGLCapabilities.js","../src/SceneRevealMode.js","../src/LogLevel.js","../src/SplatMesh.js","../src/worker/SortWorker.js","../src/webxr/WebXRMode.js","../src/webxr/VRButton.js","../src/webxr/ARButton.js","../src/RenderMode.js","../src/Viewer.js","../src/worker/sorter.wasm","../src/DropInViewer.js"],"sourcesContent":["/**\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\n *\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\n */\nexport class AbortablePromise {\n\n    static idGen = 0;\n\n    constructor(promiseFunc, abortHandler) {\n\n        let promiseResolve;\n        let promiseReject;\n        this.promise = new Promise((resolve, reject) => {\n            promiseResolve = resolve.bind(this);\n            promiseReject = reject.bind(this);\n        });\n\n        const resolve = (...args) => {\n            promiseResolve(...args);\n        };\n\n        const reject = (error) => {\n            promiseReject(error);\n        };\n\n        promiseFunc(resolve.bind(this), reject.bind(this));\n        this.abortHandler = abortHandler;\n        this.id = AbortablePromise.idGen++;\n    }\n\n    then(onResolve) {\n        return new AbortablePromise((resolve, reject) => {\n            this.promise = this.promise\n            .then((...args) => {\n                const onResolveResult = onResolve(...args);\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\n                    onResolveResult.then((...args2) => {\n                        resolve(...args2);\n                    });\n                } else {\n                    resolve(onResolveResult);\n                }\n            })\n            .catch((error) => {\n                reject(error);\n            });\n        }, this.abortHandler);\n    }\n\n    catch(onFail) {\n        return new AbortablePromise((resolve) => {\n            this.promise = this.promise.then((...args) => {\n                resolve(...args);\n            })\n            .catch(onFail);\n        }, this.abortHandler);\n    }\n\n    abort() {\n        if (this.abortHandler) this.abortHandler();\n    }\n\n}\n\nexport class AbortedPromiseError extends Error {\n\n    constructor(msg) {\n        super(msg);\n    }\n\n}\n","import { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\n\nexport const floatToHalf = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(val) {\n        floatView[0] = val;\n        const x = int32View[0];\n\n        let bits = (x >> 16) & 0x8000;\n        let m = (x >> 12) & 0x07ff;\n        const e = (x >> 23) & 0xff;\n\n        if (e < 103) return bits;\n\n        if (e > 142) {\n            bits |= 0x7c00;\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\n            return bits;\n        }\n\n        if (e < 113) {\n            m |= 0x0800;\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n            return bits;\n        }\n\n        bits |= (( e - 112) << 10) | (m >> 1);\n        bits += m & 1;\n        return bits;\n    };\n\n}();\n\nexport const uintEncodedFloat = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(f) {\n        floatView[0] = f;\n        return int32View[0];\n    };\n\n}();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n    return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const rgbaArrayToInteger = function(arr, offset) {\n    return arr[offset] + (arr[offset + 1] << 8) + (arr[offset + 2] << 16) + (arr[offset + 3] << 24);\n};\n\nexport const fetchWithProgress = function(path, onProgress, saveChunks = true) {\n\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    let aborted = false;\n    let rejectFunc = null;\n    const abortHandler = () => {\n        abortController.abort();\n        rejectFunc(new AbortedPromiseError('Fetch aborted.'));\n        aborted = true;\n    };\n\n    return new AbortablePromise((resolve, reject) => {\n        rejectFunc = reject;\n        fetch(path, { signal })\n        .then(async (data) => {\n            const reader = data.body.getReader();\n            let bytesDownloaded = 0;\n            let _fileSize = data.headers.get('Content-Length');\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n            const chunks = [];\n\n            while (!aborted) {\n                try {\n                    const { value: chunk, done } = await reader.read();\n                    if (done) {\n                        if (onProgress) {\n                            onProgress(100, '100%', chunk, fileSize);\n                        }\n                        if (saveChunks) {\n                            const buffer = new Blob(chunks).arrayBuffer();\n                            resolve(buffer);\n                        } else {\n                            resolve();\n                        }\n                        break;\n                    }\n                    bytesDownloaded += chunk.length;\n                    let percent;\n                    let percentLabel;\n                    if (fileSize !== undefined) {\n                        percent = bytesDownloaded / fileSize * 100;\n                        percentLabel = `${percent.toFixed(2)}%`;\n                    }\n                    if (saveChunks) chunks.push(chunk);\n                    if (onProgress) {\n                        const cancelSaveChucnks = onProgress(percent, percentLabel, chunk, fileSize);\n                        if (cancelSaveChucnks) saveChunks = false;\n                    }\n                } catch (error) {\n                    reject(error);\n                    break;\n                }\n            }\n        });\n    }, abortHandler);\n\n};\n\nexport const clamp = function(val, min, max) {\n    return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n    return performance.now() / 1000;\n};\n\nexport const disposeAllMeshes = (object3D) => {\n    if (object3D.geometry) {\n        object3D.geometry.dispose();\n        object3D.geometry = null;\n    }\n    if (object3D.material) {\n        object3D.material.dispose();\n        object3D.material = null;\n    }\n    if (object3D.children) {\n        for (let child of object3D.children) {\n            disposeAllMeshes(child);\n        }\n    }\n};\n\nexport const delayedExecute = (func, fast) => {\n    return new Promise((resolve) => {\n        window.setTimeout(() => {\n            resolve(func());\n        }, fast ? 1 : 50);\n    });\n};\n\n\nexport const getSphericalHarmonicsComponentCountForDegree = (sphericalHarmonicsDegree = 0) => {\n    switch (sphericalHarmonicsDegree) {\n        case 1:\n            return 9;\n        case 2:\n            return 24;\n    }\n    return 0;\n};\n","import { getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\n\nconst BASE_COMPONENT_COUNT = 14;\n\nexport class UncompressedSplatArray {\n\n    static OFFSET = {\n        X: 0,\n        Y: 1,\n        Z: 2,\n        SCALE0: 3,\n        SCALE1: 4,\n        SCALE2: 5,\n        ROTATION0: 6,\n        ROTATION1: 7,\n        ROTATION2: 8,\n        ROTATION3: 9,\n        FDC0: 10,\n        FDC1: 11,\n        FDC2: 12,\n        OPACITY: 13,\n        FRC0: 14,\n        FRC1: 15,\n        FRC2: 16,\n        FRC3: 17,\n        FRC4: 18,\n        FRC5: 19,\n        FRC6: 20,\n        FRC7: 21,\n        FRC8: 22,\n        FRC9: 23,\n        FRC10: 24,\n        FRC11: 25,\n        FRC12: 26,\n        FRC13: 27,\n        FRC14: 28,\n        FRC15: 29,\n        FRC16: 30,\n        FRC17: 31,\n        FRC18: 32,\n        FRC19: 33,\n        FRC20: 34,\n        FRC21: 35,\n        FRC22: 36,\n        FRC23: 37,\n    };\n\n    constructor(sphericalHarmonicsDegree = 0) {\n        this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\n        this.sphericalHarmonicsCount = getSphericalHarmonicsComponentCountForDegree(this.sphericalHarmonicsDegree);\n        this.componentCount = this.sphericalHarmonicsCount + BASE_COMPONENT_COUNT;\n        this.defaultSphericalHarmonics = new Array(this.sphericalHarmonicsCount).fill(0);\n        this.splats = [];\n        this.splatCount = 0;\n    }\n\n    static createSplat(sphericalHarmonicsDegree = 0) {\n        const baseSplat = [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n        let shEntries = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n        for (let i = 0; i < shEntries; i++) baseSplat.push(0);\n        return baseSplat;\n    }\n\n    addSplat(splat) {\n        this.splats.push(splat);\n        this.splatCount++;\n    }\n\n    getSplat(index) {\n        return this.splats[index];\n    }\n\n    addDefaultSplat() {\n        const newSplat = UncompressedSplatArray.createSplat(this.sphericalHarmonicsDegree);\n        this.addSplat(newSplat);\n        return newSplat;\n    }\n\n    addSplatFromComonents(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity, ...rest) {\n        const newSplat = [x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity, ...this.defaultSphericalHarmonics];\n        for (let i = 0; i < rest.length && i < this.sphericalHarmonicsCount; i++) {\n            newSplat[i] = rest[i];\n        }\n        this.addSplat(newSplat);\n        return newSplat;\n    }\n\n    addSplatFromArray(src, srcIndex) {\n        const srcSplat = src.splats[srcIndex];\n        const newSplat = UncompressedSplatArray.createSplat(this.sphericalHarmonicsDegree);\n        for (let i = 0; i < this.componentCount && i < srcSplat.length; i++) {\n            newSplat[i] = srcSplat[i];\n        }\n        this.addSplat(newSplat);\n    }\n}\n","export class Constants {\n\n    static DepthMapRange = 1 << 16;\n    static MemoryPageSize = 65536;\n    static BytesPerFloat = 4;\n    static BytesPerInt = 4;\n    static MaxScenes = 32;\n    static StreamingSectionSize = 524288;\n    static SphericalHarmonics8BitCompressionRange = 3;\n}\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { clamp, getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\nimport { Constants } from '../Constants.js';\n\nconst SphericalHarmonics8BitCompressionHalfRange = Constants.SphericalHarmonics8BitCompressionRange / 2.0;\n\nconst toHalfFloat = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\n\nconst toUint8 = (v) => {\n    v = clamp(v, -SphericalHarmonics8BitCompressionHalfRange, SphericalHarmonics8BitCompressionHalfRange);\n    return clamp(Math.floor((v * (0.5 / SphericalHarmonics8BitCompressionHalfRange) + 0.5) * 255), 0, 255);\n};\n\nconst fromUint8 = (v) => {\n    return (v / 255) * Constants.SphericalHarmonics8BitCompressionRange - SphericalHarmonics8BitCompressionHalfRange;\n};\n\nconst fromHalfFloat = THREE.DataUtils.fromHalfFloat.bind(THREE.DataUtils);\n\nconst fromHalfFloatToUint8 = (v) => {\n    return toUint8(fromHalfFloat(v));\n};\n\nconst toUncompressedFloat = (f, compressionLevel, isSH = false) => {\n    if (compressionLevel === 0) {\n        return f;\n    } else if (compressionLevel === 1 || compressionLevel === 2 && !isSH) {\n        return THREE.DataUtils.fromHalfFloat(f);\n    } else if (compressionLevel === 2) {\n        return fromUint8(f);\n    }\n};\n\nconst dataViewFloatForCompressionLevel = (dataView, floatIndex, compressionLevel, isSH = false) => {\n    if (compressionLevel === 0) {\n        return dataView.getFloat32(floatIndex * 4, true);\n    } else if (compressionLevel === 1 || compressionLevel === 2 && !isSH) {\n        return dataView.getUint16(floatIndex * 2, true);\n    } else {\n        return dataView.getUint8(floatIndex, true);\n    }\n};\n\n/**\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\n */\nexport class SplatBuffer {\n\n    static CurrentMajorVersion = 0;\n    static CurrentMinorVersion = 1;\n\n    static CenterComponentCount = 3;\n    static ScaleComponentCount = 3;\n    static RotationComponentCount = 4;\n    static ColorComponentCount = 4;\n    static CovarianceComponentCount = 6;\n\n    static SplatScaleOffsetFloat = 3;\n    static SplatRotationOffsetFloat = 6;\n\n    static CompressionLevels = {\n        0: {\n            BytesPerCenter: 12,\n            BytesPerScale: 12,\n            BytesPerRotation: 16,\n            BytesPerColor: 4,\n            ScaleOffsetBytes: 12,\n            RotationffsetBytes: 24,\n            ColorOffsetBytes: 40,\n            SphericalHarmonicsOffsetBytes: 44,\n            ScaleRange: 1,\n            BytesPerSphericalHarmonicsComponent: 4,\n            SphericalHarmonicsOffsetFloat: 11,\n            SphericalHarmonicsDegrees: {\n                0: { BytesPerSplat: 44 },\n                1: { BytesPerSplat: 80 },\n                2: { BytesPerSplat: 140 }\n            },\n        },\n        1: {\n            BytesPerCenter: 6,\n            BytesPerScale: 6,\n            BytesPerRotation: 8,\n            BytesPerColor: 4,\n            ScaleOffsetBytes: 6,\n            RotationffsetBytes: 12,\n            ColorOffsetBytes: 20,\n            SphericalHarmonicsOffsetBytes: 24,\n            ScaleRange: 32767,\n            BytesPerSphericalHarmonicsComponent: 2,\n            SphericalHarmonicsOffsetFloat: 12,\n            SphericalHarmonicsDegrees: {\n                0: { BytesPerSplat: 24 },\n                1: { BytesPerSplat: 42 },\n                2: { BytesPerSplat: 72 }\n            },\n        },\n        2: {\n            BytesPerCenter: 6,\n            BytesPerScale: 6,\n            BytesPerRotation: 8,\n            BytesPerColor: 4,\n            ScaleOffsetBytes: 6,\n            RotationffsetBytes: 12,\n            ColorOffsetBytes: 20,\n            SphericalHarmonicsOffsetBytes: 24,\n            ScaleRange: 32767,\n            BytesPerSphericalHarmonicsComponent: 1,\n            SphericalHarmonicsOffsetFloat: 12,\n            SphericalHarmonicsDegrees: {\n                0: { BytesPerSplat: 24 },\n                1: { BytesPerSplat: 33 },\n                2: { BytesPerSplat: 48 }\n            },\n        }\n    };\n\n    static CovarianceSizeFloats = 6;\n\n    static HeaderSizeBytes = 4096;\n    static SectionHeaderSizeBytes = 1024;\n\n    static BucketStorageSizeBytes = 12;\n    static BucketStorageSizeFloats = 3;\n\n    static BucketBlockSize = 5.0;\n    static BucketSize = 256;\n\n    constructor(bufferData, secLoadedCountsToMax = true) {\n        this.constructFromBuffer(bufferData, secLoadedCountsToMax);\n    }\n\n    getSplatCount() {\n        return this.splatCount;\n    }\n\n    getMaxSplatCount() {\n        return this.maxSplatCount;\n    }\n\n    getMinSphericalHarmonicsDegree() {\n        let minSphericalHarmonicsDegree = 0;\n        for (let i = 0; i < this.sections.length; i++) {\n            const section = this.sections[i];\n            if (i === 0 || section.sphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\n                minSphericalHarmonicsDegree = section.sphericalHarmonicsDegree;\n            }\n        }\n        return minSphericalHarmonicsDegree;\n    }\n\n    getBucketIndex(section, localSplatIndex) {\n        let bucketIndex;\n        const maxSplatIndexInFullBuckets = section.fullBucketCount * section.bucketSize;\n        if (localSplatIndex < maxSplatIndexInFullBuckets) {\n            bucketIndex = Math.floor(localSplatIndex / section.bucketSize);\n        } else {\n            let bucketSplatIndex = maxSplatIndexInFullBuckets;\n            bucketIndex = section.fullBucketCount;\n            let partiallyFullBucketIndex = 0;\n            while (bucketSplatIndex < section.splatCount) {\n                let currentPartiallyFilledBucketSize = section.partiallyFilledBucketLengths[partiallyFullBucketIndex];\n                if (localSplatIndex >= bucketSplatIndex && localSplatIndex < bucketSplatIndex + currentPartiallyFilledBucketSize) {\n                    break;\n                }\n                bucketSplatIndex += currentPartiallyFilledBucketSize;\n                bucketIndex++;\n                partiallyFullBucketIndex++;\n            }\n        }\n        return bucketIndex;\n    }\n\n    getSplatCenter(globalSplatIndex, outCenter, transform) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n\n        const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\n        const dataView = new DataView(this.bufferData, section.dataBase + srcSplatCentersBase);\n\n        const x = dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\n        const y = dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\n        const z = dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\n        if (this.compressionLevel >= 1) {\n            const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n            const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n            const sf = section.compressionScaleFactor;\n            const sr = section.compressionScaleRange;\n            outCenter.x = (x - sr) * sf + section.bucketArray[bucketBase];\n            outCenter.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\n            outCenter.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\n        } else {\n            outCenter.x = x;\n            outCenter.y = y;\n            outCenter.z = z;\n        }\n        if (transform) outCenter.applyMatrix4(transform);\n    }\n\n    getSplatScaleAndRotation = function() {\n\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const tempMatrix = new THREE.Matrix4();\n        const tempPosition = new THREE.Vector3();\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n\n        return function(index, outScale, outRotation, transform) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[index];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = index - section.splatCountOffset;\n\n            const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\n\n            scale.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel), this.compressionLevel));\n\n            rotation.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel), this.compressionLevel));\n\n            if (transform) {\n                scaleMatrix.makeScale(scale.x, scale.y, scale.z);\n                rotationMatrix.makeRotationFromQuaternion(rotation);\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\n            } else {\n                outScale.copy(scale);\n                outRotation.copy(rotation);\n            }\n        };\n\n    }();\n\n    getSplatColor(globalSplatIndex, outColor) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n\n        const srcSplatColorsBase = section.bytesPerSplat * localSplatIndex +\n                                   SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\n        const splatColorsArray = new Uint8Array(this.bufferData, section.dataBase + srcSplatColorsBase, 4);\n\n        outColor.set(splatColorsArray[0], splatColorsArray[1],\n                     splatColorsArray[2], splatColorsArray[3]);\n    }\n\n    fillSplatCenterArray(outCenterArray, transform, srcFrom, srcTo, destFrom) {\n        const splatCount = this.splatCount;\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n\n        const center = new THREE.Vector3();\n        for (let i = srcFrom; i <= srcTo; i++) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n            const centerDestBase = (i - srcFrom + destFrom) * SplatBuffer.CenterComponentCount;\n\n            const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatCentersBase);\n\n            const x = dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\n            const y = dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\n            const z = dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\n            if (this.compressionLevel >= 1) {\n                const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n                const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n                const sf = section.compressionScaleFactor;\n                const sr = section.compressionScaleRange;\n                center.x = (x - sr) * sf + section.bucketArray[bucketBase];\n                center.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\n                center.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\n            } else {\n                center.x = x;\n                center.y = y;\n                center.z = z;\n            }\n            if (transform) {\n                center.applyMatrix4(transform);\n            }\n            outCenterArray[centerDestBase] = center.x;\n            outCenterArray[centerDestBase + 1] = center.y;\n            outCenterArray[centerDestBase + 2] = center.z;\n        }\n    }\n\n    static computeCovariance = function() {\n\n        const tempMatrix4 = new THREE.Matrix4();\n        const scaleMatrix = new THREE.Matrix3();\n        const rotationMatrix = new THREE.Matrix3();\n        const covarianceMatrix = new THREE.Matrix3();\n        const transformedCovariance = new THREE.Matrix3();\n        const transform3x3 = new THREE.Matrix3();\n        const transform3x3Transpose = new THREE.Matrix3();\n\n        return function(scale, rotation, transform, outCovariance, outOffset = 0, desiredOutputCompressionLevel) {\n\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n            scaleMatrix.setFromMatrix4(tempMatrix4);\n\n            tempMatrix4.makeRotationFromQuaternion(rotation);\n            rotationMatrix.setFromMatrix4(tempMatrix4);\n\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\n\n            if (transform) {\n                transform3x3.setFromMatrix4(transform);\n                transform3x3Transpose.copy(transform3x3).transpose();\n                transformedCovariance.multiply(transform3x3Transpose);\n                transformedCovariance.premultiply(transform3x3);\n            }\n\n            if (desiredOutputCompressionLevel >= 1) {\n                outCovariance[outOffset] = toHalfFloat(transformedCovariance.elements[0]);\n                outCovariance[outOffset + 1] = toHalfFloat(transformedCovariance.elements[3]);\n                outCovariance[outOffset + 2] = toHalfFloat(transformedCovariance.elements[6]);\n                outCovariance[outOffset + 3] = toHalfFloat(transformedCovariance.elements[4]);\n                outCovariance[outOffset + 4] = toHalfFloat(transformedCovariance.elements[7]);\n                outCovariance[outOffset + 5] = toHalfFloat(transformedCovariance.elements[8]);\n            } else {\n                outCovariance[outOffset] = transformedCovariance.elements[0];\n                outCovariance[outOffset + 1] = transformedCovariance.elements[3];\n                outCovariance[outOffset + 2] = transformedCovariance.elements[6];\n                outCovariance[outOffset + 3] = transformedCovariance.elements[4];\n                outCovariance[outOffset + 4] = transformedCovariance.elements[7];\n                outCovariance[outOffset + 5] = transformedCovariance.elements[8];\n            }\n\n        };\n\n    }();\n\n    fillSplatCovarianceArray(covarianceArray, transform, srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\n        const splatCount = this.splatCount;\n\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n\n        for (let i = srcFrom; i <= srcTo; i++) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n\n            const covarianceDestBase = (i - srcFrom + destFrom) * SplatBuffer.CovarianceComponentCount;\n            const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\n\n            scale.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel), this.compressionLevel));\n            rotation.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel), this.compressionLevel));\n\n            SplatBuffer.computeCovariance(scale, rotation, transform, covarianceArray, covarianceDestBase, desiredOutputCompressionLevel);\n        }\n    }\n\n    fillSplatColorArray(outColorArray, minimumAlpha, srcFrom, srcTo, destFrom) {\n        const splatCount = this.splatCount;\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n\n        for (let i = srcFrom; i <= srcTo; i++) {\n\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n\n            const colorDestBase = (i - srcFrom + destFrom) * SplatBuffer.ColorComponentCount;\n            const srcSplatColorsBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\n\n            const dataView = new Uint8Array(this.bufferData, section.dataBase + srcSplatColorsBase);\n\n            let alpha = dataView[3];\n            alpha = (alpha >= minimumAlpha) ? alpha : 0;\n\n            outColorArray[colorDestBase] = dataView[0];\n            outColorArray[colorDestBase + 1] = dataView[1];\n            outColorArray[colorDestBase + 2] = dataView[2];\n            outColorArray[colorDestBase + 3] = alpha;\n        }\n    }\n\n    fillSphericalHarmonicsArray = function() {\n\n        const sphericalHarmonicVectors = [];\n        for (let i = 0; i < 15; i++) {\n            sphericalHarmonicVectors[i] = new THREE.Vector3();\n        }\n\n        const tempMatrix3 = new THREE.Matrix3();\n\n        const sh11 = [];\n        const sh12 = [];\n        const sh13 = [];\n\n        const sh21 = [];\n        const sh22 = [];\n        const sh23 = [];\n        const sh24 = [];\n        const sh25 = [];\n\n        const shIn1 = [];\n        const shIn2 = [];\n        const shIn3 = [];\n        const shIn4 = [];\n        const shIn5 = [];\n\n        const shOut1 = [];\n        const shOut2 = [];\n        const shOut3 = [];\n        const shOut4 = [];\n        const shOut5 = [];\n\n        const noop = (v) => v;\n\n        const set3 = (array, val1, val2, val3) => {\n            array[0] = val1;\n            array[1] = val2;\n            array[2] = val3;\n        };\n\n        const set3FromArray = (array, srcDestView, stride, srcBase, compressionLevel) => {\n            array[0] = dataViewFloatForCompressionLevel(srcDestView, srcBase, compressionLevel, true);\n            array[1] = dataViewFloatForCompressionLevel(srcDestView, srcBase + stride, compressionLevel, true);\n            array[2] = dataViewFloatForCompressionLevel(srcDestView, srcBase + stride + stride, compressionLevel, true);\n        };\n\n        const copy3 = (srcArray, destArray) => {\n            destArray[0] = srcArray[0];\n            destArray[1] = srcArray[1];\n            destArray[2] = srcArray[2];\n        };\n\n        const setOutput3 = (srcArray, destArray, destBase, conversionFunc) => {\n            destArray[destBase] = conversionFunc(srcArray[0]);\n            destArray[destBase + 1] = conversionFunc(srcArray[1]);\n            destArray[destBase + 2] = conversionFunc(srcArray[2]);\n        };\n\n        const toUncompressedFloatArray3 = (src, dest, compressionLevel) => {\n            dest[0] = toUncompressedFloat(src[0], compressionLevel, true);\n            dest[1] = toUncompressedFloat(src[1], compressionLevel, true);\n            dest[2] = toUncompressedFloat(src[2], compressionLevel, true);\n            return dest;\n        };\n\n        return function(outSphericalHarmonicsArray, outSphericalHarmonicsDegree, transform,\n                        srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\n            const splatCount = this.splatCount;\n\n            srcFrom = srcFrom || 0;\n            srcTo = srcTo || splatCount - 1;\n            if (destFrom === undefined) destFrom = srcFrom;\n\n            if (transform && outSphericalHarmonicsDegree >= 1) {\n                tempMatrix3.setFromMatrix4(transform);\n                set3(sh11, tempMatrix3.elements[4], -tempMatrix3.elements[7], tempMatrix3.elements[1]);\n                set3(sh12, -tempMatrix3.elements[5], tempMatrix3.elements[8], -tempMatrix3.elements[2]);\n                set3(sh13, tempMatrix3.elements[3], -tempMatrix3.elements[6], tempMatrix3.elements[0]);\n            }\n\n            for (let i = srcFrom; i <= srcTo; i++) {\n\n                const sectionIndex = this.globalSplatIndexToSectionMap[i];\n                const section = this.sections[sectionIndex];\n                outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, section.sphericalHarmonicsDegree);\n                const outSphericalHarmonicsComponentsCount = getSphericalHarmonicsComponentCountForDegree(outSphericalHarmonicsDegree);\n\n                const localSplatIndex = i - section.splatCountOffset;\n\n                const srcSplatSHBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].SphericalHarmonicsOffsetBytes;\n\n                const dataView = new DataView(this.bufferData, section.dataBase + srcSplatSHBase);\n\n                const shDestBase = (i - srcFrom + destFrom) * outSphericalHarmonicsComponentsCount;\n\n                let compressionLevelForOutputConversion = transform ? 0 : this.compressionLevel;\n                let outputConversionFunc = noop;\n                if (compressionLevelForOutputConversion !== desiredOutputCompressionLevel) {\n                    if (compressionLevelForOutputConversion === 1) {\n                        if (desiredOutputCompressionLevel === 0) outputConversionFunc = fromHalfFloat;\n                        else if (desiredOutputCompressionLevel == 2) outputConversionFunc = fromHalfFloatToUint8;\n                    } else if (compressionLevelForOutputConversion === 0) {\n                        if (desiredOutputCompressionLevel === 1) outputConversionFunc = toHalfFloat;\n                        else if (desiredOutputCompressionLevel == 2) outputConversionFunc = toUint8;\n                    }\n                }\n\n                if (outSphericalHarmonicsDegree >= 1) {\n\n                    set3FromArray(shIn1, dataView, 3, 0, this.compressionLevel);\n                    set3FromArray(shIn2, dataView, 3, 1, this.compressionLevel);\n                    set3FromArray(shIn3, dataView, 3, 2, this.compressionLevel);\n\n                    if (transform) {\n                        toUncompressedFloatArray3(shIn1, shIn1, this.compressionLevel);\n                        toUncompressedFloatArray3(shIn2, shIn2, this.compressionLevel);\n                        toUncompressedFloatArray3(shIn3, shIn3, this.compressionLevel);\n                        SplatBuffer.rotateSphericalHarmonics3(shIn1, shIn2, shIn3, sh11, sh12, sh13, shOut1, shOut2, shOut3);\n                    } else {\n                        copy3(shIn1, shOut1);\n                        copy3(shIn2, shOut2);\n                        copy3(shIn3, shOut3);\n                    }\n\n                    setOutput3(shOut1, outSphericalHarmonicsArray, shDestBase, outputConversionFunc);\n                    setOutput3(shOut2, outSphericalHarmonicsArray, shDestBase + 3, outputConversionFunc);\n                    setOutput3(shOut3, outSphericalHarmonicsArray, shDestBase + 6, outputConversionFunc);\n\n                    if (outSphericalHarmonicsDegree >= 2) {\n\n                        set3FromArray(shIn1, dataView, 5, 9, this.compressionLevel);\n                        set3FromArray(shIn2, dataView, 5, 10, this.compressionLevel);\n                        set3FromArray(shIn3, dataView, 5, 11, this.compressionLevel);\n                        set3FromArray(shIn4, dataView, 5, 12, this.compressionLevel);\n                        set3FromArray(shIn5, dataView, 5, 13, this.compressionLevel);\n\n                        if (transform) {\n                            toUncompressedFloatArray3(shIn1, shIn1, this.compressionLevel);\n                            toUncompressedFloatArray3(shIn2, shIn2, this.compressionLevel);\n                            toUncompressedFloatArray3(shIn3, shIn3, this.compressionLevel);\n                            toUncompressedFloatArray3(shIn4, shIn4, this.compressionLevel);\n                            toUncompressedFloatArray3(shIn5, shIn5, this.compressionLevel);\n                            SplatBuffer.rotateSphericalHarmonics5(shIn1, shIn2, shIn3, shIn4, shIn5,\n                                                                  sh11, sh12, sh13, sh21, sh22, sh23, sh24, sh25,\n                                                                  shOut1, shOut2, shOut3, shOut4, shOut5);\n                        } else {\n                            copy3(shIn1, shOut1);\n                            copy3(shIn2, shOut2);\n                            copy3(shIn3, shOut3);\n                            copy3(shIn4, shOut4);\n                            copy3(shIn5, shOut5);\n                        }\n\n                        setOutput3(shOut1, outSphericalHarmonicsArray, shDestBase + 9, outputConversionFunc);\n                        setOutput3(shOut2, outSphericalHarmonicsArray, shDestBase + 12, outputConversionFunc);\n                        setOutput3(shOut3, outSphericalHarmonicsArray, shDestBase + 15, outputConversionFunc);\n                        setOutput3(shOut4, outSphericalHarmonicsArray, shDestBase + 18, outputConversionFunc);\n                        setOutput3(shOut5, outSphericalHarmonicsArray, shDestBase + 21, outputConversionFunc);\n                    }\n                }\n            }\n        };\n\n    }();\n\n    static dot3 = (v1, v2, v3, transformRow, outArray) => {\n        outArray[0] = outArray[1] = outArray[2] = 0;\n        const t0 = transformRow[0];\n        const t1 = transformRow[1];\n        const t2 = transformRow[2];\n        SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\n        SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\n        SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\n    };\n\n    static addInto3 = (val1, val2, val3, destArray) => {\n        destArray[0] = destArray[0] + val1;\n        destArray[1] = destArray[1] + val2;\n        destArray[2] = destArray[2] + val3;\n    };\n\n    static dot5 = (v1, v2, v3, v4, v5, transformRow, outArray) => {\n        outArray[0] = outArray[1] = outArray[2] = 0;\n        const t0 = transformRow[0];\n        const t1 = transformRow[1];\n        const t2 = transformRow[2];\n        const t3 = transformRow[3];\n        const t4 = transformRow[4];\n        SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\n        SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\n        SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\n        SplatBuffer.addInto3(v4[0] * t3, v4[1] * t3, v4[2] * t3, outArray);\n        SplatBuffer.addInto3(v5[0] * t4, v5[1] * t4, v5[2] * t4, outArray);\n    };\n\n    static rotateSphericalHarmonics3 = (in1, in2, in3, tsh11, tsh12, tsh13, out1, out2, out3) => {\n        SplatBuffer.dot3(in1, in2, in3, tsh11, out1);\n        SplatBuffer.dot3(in1, in2, in3, tsh12, out2);\n        SplatBuffer.dot3(in1, in2, in3, tsh13, out3);\n    };\n\n    static rotateSphericalHarmonics5 = (in1, in2, in3, in4, in5, tsh11, tsh12, tsh13,\n                                        tsh21, tsh22, tsh23, tsh24, tsh25, out1, out2, out3, out4, out5) => {\n\n        const kSqrt0104 = Math.sqrt(1.0 / 4.0);\n        const kSqrt0304 = Math.sqrt(3.0 / 4.0);\n        const kSqrt0103 = Math.sqrt(1.0 / 3.0);\n        const kSqrt0403 = Math.sqrt(4.0 / 3.0);\n        const kSqrt0112 = Math.sqrt(1.0 / 12.0);\n\n        tsh21[0] = kSqrt0104 * ((tsh13[2] * tsh11[0] + tsh13[0] * tsh11[2]) + (tsh11[2] * tsh13[0] + tsh11[0] * tsh13[2]));\n        tsh21[1] = (tsh13[1] * tsh11[0] + tsh11[1] * tsh13[0]);\n        tsh21[2] = kSqrt0304 * (tsh13[1] * tsh11[1] + tsh11[1] * tsh13[1]);\n        tsh21[3] = (tsh13[1] * tsh11[2] + tsh11[1] * tsh13[2]);\n        tsh21[4] = kSqrt0104 * ((tsh13[2] * tsh11[2] - tsh13[0] * tsh11[0]) + (tsh11[2] * tsh13[2] - tsh11[0] * tsh13[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh21, out1);\n\n        tsh22[0] = kSqrt0104 * ((tsh12[2] * tsh11[0] + tsh12[0] * tsh11[2]) + (tsh11[2] * tsh12[0] + tsh11[0] * tsh12[2]));\n        tsh22[1] = tsh12[1] * tsh11[0] + tsh11[1] * tsh12[0];\n        tsh22[2] = kSqrt0304 * (tsh12[1] * tsh11[1] + tsh11[1] * tsh12[1]);\n        tsh22[3] = tsh12[1] * tsh11[2] + tsh11[1] * tsh12[2];\n        tsh22[4] = kSqrt0104 * ((tsh12[2] * tsh11[2] - tsh12[0] * tsh11[0]) + (tsh11[2] * tsh12[2] - tsh11[0] * tsh12[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh22, out2);\n\n        tsh23[0] = kSqrt0103 * (tsh12[2] * tsh12[0] + tsh12[0] * tsh12[2]) + -kSqrt0112 *\n                   ((tsh13[2] * tsh13[0] + tsh13[0] * tsh13[2]) + (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\n        tsh23[1] = kSqrt0403 * tsh12[1] * tsh12[0] + -kSqrt0103 * (tsh13[1] * tsh13[0] + tsh11[1] * tsh11[0]);\n        tsh23[2] = tsh12[1] * tsh12[1] + -kSqrt0104 * (tsh13[1] * tsh13[1] + tsh11[1] * tsh11[1]);\n        tsh23[3] = kSqrt0403 * tsh12[1] * tsh12[2] + -kSqrt0103 * (tsh13[1] * tsh13[2] + tsh11[1] * tsh11[2]);\n        tsh23[4] = kSqrt0103 * (tsh12[2] * tsh12[2] - tsh12[0] * tsh12[0]) + -kSqrt0112 *\n                   ((tsh13[2] * tsh13[2] - tsh13[0] * tsh13[0]) + (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh23, out3);\n\n        tsh24[0] = kSqrt0104 * ((tsh12[2] * tsh13[0] + tsh12[0] * tsh13[2]) + (tsh13[2] * tsh12[0] + tsh13[0] * tsh12[2]));\n        tsh24[1] = tsh12[1] * tsh13[0] + tsh13[1] * tsh12[0];\n        tsh24[2] = kSqrt0304 * (tsh12[1] * tsh13[1] + tsh13[1] * tsh12[1]);\n        tsh24[3] = tsh12[1] * tsh13[2] + tsh13[1] * tsh12[2];\n        tsh24[4] = kSqrt0104 * ((tsh12[2] * tsh13[2] - tsh12[0] * tsh13[0]) + (tsh13[2] * tsh12[2] - tsh13[0] * tsh12[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh24, out4);\n\n        tsh25[0] = kSqrt0104 * ((tsh13[2] * tsh13[0] + tsh13[0] * tsh13[2]) - (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\n        tsh25[1] = (tsh13[1] * tsh13[0] - tsh11[1] * tsh11[0]);\n        tsh25[2] = kSqrt0304 * (tsh13[1] * tsh13[1] - tsh11[1] * tsh11[1]);\n        tsh25[3] = (tsh13[1] * tsh13[2] - tsh11[1] * tsh11[2]);\n        tsh25[4] = kSqrt0104 * ((tsh13[2] * tsh13[2] - tsh13[0] * tsh13[0]) - (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh25, out5);\n    };\n\n    static parseHeader(buffer) {\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const versionMajor = headerArrayUint8[0];\n        const versionMinor = headerArrayUint8[1];\n        const maxSectionCount = headerArrayUint32[1];\n        const sectionCount = headerArrayUint32[2];\n        const maxSplatCount = headerArrayUint32[3];\n        const splatCount = headerArrayUint32[4];\n        const compressionLevel = headerArrayUint16[10];\n        const sceneCenter = new THREE.Vector3(headerArrayFloat32[6], headerArrayFloat32[7], headerArrayFloat32[8]);\n\n        return {\n            versionMajor,\n            versionMinor,\n            maxSectionCount,\n            sectionCount,\n            maxSplatCount,\n            splatCount,\n            compressionLevel,\n            sceneCenter\n        };\n    }\n\n    static writeHeaderCountsToBuffer(sectionCount, splatCount, buffer) {\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        headerArrayUint32[2] = sectionCount;\n        headerArrayUint32[4] = splatCount;\n    }\n\n    static writeHeaderToBuffer(header, buffer) {\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        headerArrayUint8[0] = header.versionMajor;\n        headerArrayUint8[1] = header.versionMinor;\n        headerArrayUint8[2] = 0; // unused for now\n        headerArrayUint8[3] = 0; // unused for now\n        headerArrayUint32[1] = header.maxSectionCount;\n        headerArrayUint32[2] = header.sectionCount;\n        headerArrayUint32[3] = header.maxSplatCount;\n        headerArrayUint32[4] = header.splatCount;\n        headerArrayUint16[10] = header.compressionLevel;\n        headerArrayFloat32[6] = header.sceneCenter.x;\n        headerArrayFloat32[7] = header.sceneCenter.y;\n        headerArrayFloat32[8] = header.sceneCenter.z;\n    }\n\n    static parseSectionHeaders(header, buffer, offset = 0, secLoadedCountsToMax) {\n        const compressionLevel = header.compressionLevel;\n\n        const maxSectionCount = header.maxSectionCount;\n        const sectionHeaderArrayUint16 = new Uint16Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 2);\n        const sectionHeaderArrayUint32 = new Uint32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\n        const sectionHeaderArrayFloat32 = new Float32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\n\n        const sectionHeaders = [];\n        let sectionHeaderBase = 0;\n        let sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n        let sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n        let sectionBase = SplatBuffer.HeaderSizeBytes + header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes;\n        let splatCountOffset = 0;\n        for (let i = 0; i < maxSectionCount; i++) {\n            const maxSplatCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 1];\n            const bucketSize = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 2];\n            const bucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 3];\n            const bucketBlockSize = sectionHeaderArrayFloat32[sectionHeaderBaseUint32 + 4];\n            const halfBucketBlockSize = bucketBlockSize / 2.0;\n            const bucketStorageSizeBytes = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 10];\n            const compressionScaleRange = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 6] ||\n                                          SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n            const fullBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 8];\n            const partiallyFilledBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 9];\n            const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n            const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\n\n            const sphericalHarmonicsDegree = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 20];\n            const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree);\n\n            const splatDataStorageSizeBytes = bytesPerSplat * maxSplatCount;\n            const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;\n            const sectionHeader = {\n                bytesPerSplat: bytesPerSplat,\n                splatCountOffset: splatCountOffset,\n                splatCount: secLoadedCountsToMax ? maxSplatCount : 0,\n                maxSplatCount: maxSplatCount,\n                bucketSize: bucketSize,\n                bucketCount: bucketCount,\n                bucketBlockSize: bucketBlockSize,\n                halfBucketBlockSize: halfBucketBlockSize,\n                bucketStorageSizeBytes: bucketStorageSizeBytes,\n                bucketsStorageSizeBytes: bucketsStorageSizeBytes,\n                splatDataStorageSizeBytes: splatDataStorageSizeBytes,\n                storageSizeBytes: storageSizeBytes,\n                compressionScaleRange: compressionScaleRange,\n                compressionScaleFactor: halfBucketBlockSize / compressionScaleRange,\n                base: sectionBase,\n                bucketsBase: sectionBase + bucketsMetaDataSizeBytes,\n                dataBase: sectionBase + bucketsStorageSizeBytes,\n                fullBucketCount: fullBucketCount,\n                partiallyFilledBucketCount: partiallyFilledBucketCount,\n                sphericalHarmonicsDegree: sphericalHarmonicsDegree\n            };\n            sectionHeaders[i] = sectionHeader;\n            sectionBase += storageSizeBytes;\n            sectionHeaderBase += SplatBuffer.SectionHeaderSizeBytes;\n            sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n            sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n            splatCountOffset += maxSplatCount;\n        }\n\n        return sectionHeaders;\n    }\n\n\n    static writeSectionHeaderToBuffer(sectionHeader, compressionLevel, buffer, offset = 0) {\n        const sectionHeadeArrayUint16 = new Uint16Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 2);\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n        const sectionHeadeArrayFloat32 = new Float32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n\n        sectionHeadeArrayUint32[0] = sectionHeader.splatCount;\n        sectionHeadeArrayUint32[1] = sectionHeader.maxSplatCount;\n        sectionHeadeArrayUint32[2] = compressionLevel >= 1 ? sectionHeader.bucketSize : 0;\n        sectionHeadeArrayUint32[3] = compressionLevel >= 1 ? sectionHeader.bucketCount : 0;\n        sectionHeadeArrayFloat32[4] = compressionLevel >= 1 ? sectionHeader.bucketBlockSize : 0.0;\n        sectionHeadeArrayUint16[10] = compressionLevel >= 1 ? SplatBuffer.BucketStorageSizeBytes : 0;\n        sectionHeadeArrayUint32[6] = compressionLevel >= 1 ? sectionHeader.compressionScaleRange : 0;\n        sectionHeadeArrayUint32[7] = sectionHeader.storageSizeBytes;\n        sectionHeadeArrayUint32[8] = compressionLevel >= 1 ? sectionHeader.fullBucketCount : 0;\n        sectionHeadeArrayUint32[9] = compressionLevel >= 1 ? sectionHeader.partiallyFilledBucketCount : 0;\n        sectionHeadeArrayUint16[20] = sectionHeader.sphericalHarmonicsDegree;\n\n    }\n\n    static writeSectionHeaderSplatCountToBuffer(splatCount, buffer, offset = 0) {\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n        sectionHeadeArrayUint32[0] = splatCount;\n    }\n\n    constructFromBuffer(bufferData, secLoadedCountsToMax) {\n        this.bufferData = bufferData;\n\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSectionMap = [];\n\n        const header = SplatBuffer.parseHeader(this.bufferData);\n        this.versionMajor = header.versionMajor;\n        this.versionMinor = header.versionMinor;\n        this.maxSectionCount = header.maxSectionCount;\n        this.sectionCount = secLoadedCountsToMax ? header.maxSectionCount : 0;\n        this.maxSplatCount = header.maxSplatCount;\n        this.splatCount = secLoadedCountsToMax ? header.maxSplatCount : 0;\n        this.compressionLevel = header.compressionLevel;\n        this.sceneCenter = new THREE.Vector3().copy(header.sceneCenter);\n\n        this.sections = SplatBuffer.parseSectionHeaders(header, this.bufferData, SplatBuffer.HeaderSizeBytes, secLoadedCountsToMax);\n\n        this.linkBufferArrays();\n        this.buildMaps();\n    }\n\n    static calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree) {\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n        const sphericalHarmonicsComponentsPerSplat = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n        const sphericalHarmonicsBytesPerSplat = SplatBuffer.CompressionLevels[compressionLevel].BytesPerSphericalHarmonicsComponent *\n                                                sphericalHarmonicsComponentsPerSplat;\n        const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation +\n                              bytesPerColor + sphericalHarmonicsBytesPerSplat;\n        return {\n            bytesPerCenter,\n            bytesPerScale,\n            bytesPerRotation,\n            bytesPerColor,\n            sphericalHarmonicsComponentsPerSplat,\n            sphericalHarmonicsBytesPerSplat,\n            bytesPerSplat\n        };\n    }\n\n    linkBufferArrays() {\n        for (let i = 0; i < this.maxSectionCount; i++) {\n            const section = this.sections[i];\n            section.bucketArray = new Float32Array(this.bufferData, section.bucketsBase,\n                                                   section.bucketCount * SplatBuffer.BucketStorageSizeFloats);\n            if (section.partiallyFilledBucketCount > 0) {\n                section.partiallyFilledBucketLengths = new Uint32Array(this.bufferData, section.base,\n                                                                       section.partiallyFilledBucketCount);\n            }\n        }\n    }\n\n    buildMaps() {\n        let cumulativeSplatCount = 0;\n        for (let i = 0; i < this.maxSectionCount; i++) {\n            const section = this.sections[i];\n            for (let j = 0; j < section.maxSplatCount; j++) {\n                const globalSplatIndex = cumulativeSplatCount + j;\n                this.globalSplatIndexToLocalSplatIndexMap[globalSplatIndex] = j;\n                this.globalSplatIndexToSectionMap[globalSplatIndex] = i;\n            }\n            cumulativeSplatCount += section.maxSplatCount;\n        }\n    }\n\n    updateLoadedCounts(newSectionCount, newSplatCount) {\n        SplatBuffer.writeHeaderCountsToBuffer(newSectionCount, newSplatCount, this.bufferData);\n        this.sectionCount = newSectionCount;\n        this.splatCount = newSplatCount;\n    }\n\n    updateSectionLoadedCounts(sectionIndex, newSplatCount) {\n        const sectionHeaderOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * sectionIndex;\n        SplatBuffer.writeSectionHeaderSplatCountToBuffer(newSplatCount, this.bufferData, sectionHeaderOffset);\n        this.sections[sectionIndex].splatCount = newSplatCount;\n    }\n\n    static generateFromUncompressedSplatArrays(splatArrays, minimumAlpha, compressionLevel,\n                                               sceneCenter, blockSize, bucketSize, options = []) {\n\n        const copyBetweenBuffers = (srcBuffer, srcOffset, destBuffer, destOffset, byteCount = 0) => {\n            const src = new Uint8Array(srcBuffer, srcOffset);\n            const dest = new Uint8Array(destBuffer, destOffset);\n            for (let i = 0; i < byteCount; i++) {\n                dest[i] = src[i];\n            }\n        };\n\n        let sphericalHarmonicsDegree = 0;\n\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\n            const splatArray = splatArrays[sa];\n            if (sa === 0 || splatArray.sphericalHarmonicsDegree < sphericalHarmonicsDegree) {\n                if (sa > 0 && splatArray.sphericalHarmonicsDegree !== sphericalHarmonicsDegree) {\n                    const msg = 'SplatBuffer::generateFromUncompressedSplatArrays() -> ' +\n                                'all splat arrays must have the same spherical harmonics degree.';\n                    throw new Error(msg);\n                }\n                sphericalHarmonicsDegree = splatArray.sphericalHarmonicsDegree;\n            }\n        }\n\n        const {bytesPerCenter, bytesPerScale, bytesPerRotation, bytesPerColor, sphericalHarmonicsComponentsPerSplat,\n              sphericalHarmonicsBytesPerSplat, bytesPerSplat} =\n              SplatBuffer.calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree);\n\n        const compressionScaleRange = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n\n        const sectionBuffers = [];\n        const sectionHeaderBuffers = [];\n        let totalSplatCount = 0;\n\n        const tempRotation = new THREE.Quaternion();\n\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\n            const splatArray = splatArrays[sa];\n\n            const sectionOptions = options[sa] || {};\n\n            const sectionBlockSize = (sectionOptions.blockSizeFactor || 1) * (blockSize || SplatBuffer.BucketBlockSize);\n            const sectionBucketSize = Math.ceil((sectionOptions.bucketSizeFactor || 1) * (bucketSize || SplatBuffer.BucketSize));\n\n            const validSplats = new UncompressedSplatArray(sphericalHarmonicsDegree);\n\n            for (let i = 0; i < splatArray.splatCount; i++) {\n                const targetSplat = splatArray.splats[i];\n                let alpha;\n                if (targetSplat[UncompressedSplatArray.OFFSET.OPACITY]) {\n                    alpha = targetSplat[UncompressedSplatArray.OFFSET.OPACITY];\n                } else {\n                    alpha = 255;\n                }\n                if (alpha >= minimumAlpha) {\n                    validSplats.addSplat(targetSplat);\n                }\n            }\n\n            const bucketInfo = SplatBuffer.computeBucketsForUncompressedSplatArray(validSplats, sectionBlockSize, sectionBucketSize);\n            const fullBucketCount = bucketInfo.fullBuckets.length;\n            const partiallyFullBucketLengths = bucketInfo.partiallyFullBuckets.map((bucket) => bucket.splats.length);\n            const partiallyFilledBucketCount = partiallyFullBucketLengths.length;\n            const buckets = [...bucketInfo.fullBuckets, ...bucketInfo.partiallyFullBuckets];\n\n            const sectionDataSizeBytes = validSplats.splats.length * bytesPerSplat;\n            const bucketMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n            const bucketDataBytes = compressionLevel >= 1 ? buckets.length *\n                                                            SplatBuffer.BucketStorageSizeBytes + bucketMetaDataSizeBytes : 0;\n            const sectionSizeBytes = sectionDataSizeBytes + bucketDataBytes;\n            const sectionBuffer = new ArrayBuffer(sectionSizeBytes);\n\n            const blockHalfSize = sectionBlockSize / 2.0;\n            const compressionScaleFactor = compressionScaleRange / blockHalfSize;\n            const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n\n            const tempCenterBuffer = new ArrayBuffer(bytesPerCenter);\n            const tempScaleBuffer = new ArrayBuffer(bytesPerScale);\n            const tempRotationBuffer = new ArrayBuffer(bytesPerRotation);\n            const tempColorBuffer = new ArrayBuffer(bytesPerColor);\n            const tempSHBuffer = new ArrayBuffer(sphericalHarmonicsBytesPerSplat);\n\n            const bucketCenter = new THREE.Vector3();\n            const bucketCenterDelta = new THREE.Vector3();\n            let outSplatCount = 0;\n            for (let b = 0; b < buckets.length; b++) {\n                const bucket = buckets[b];\n                bucketCenter.fromArray(bucket.center);\n                for (let i = 0; i < bucket.splats.length; i++) {\n                    let row = bucket.splats[i];\n                    const targetSplat = validSplats.splats[row];\n\n                    const centerBase = bucketDataBytes + outSplatCount * bytesPerSplat;\n                    const scaleBase = centerBase + bytesPerCenter;\n                    const rotationBase = scaleBase + bytesPerScale;\n                    const colorBase = rotationBase + bytesPerRotation;\n                    const sphericalHarmonicsBase = colorBase + bytesPerColor;\n                    if (compressionLevel === 0) {\n                        const center = new Float32Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\n                        const rot = new Float32Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\n                        const scale = new Float32Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\n                        if (targetSplat[UncompressedSplatArray.OFFSET.SCALE0] !== undefined) {\n                            tempRotation.set(targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION3]);\n                            tempRotation.normalize();\n                            rot.set([tempRotation.x, tempRotation.y, tempRotation.z, tempRotation.w]);\n                            scale.set([targetSplat[UncompressedSplatArray.OFFSET.SCALE0],\n                                       targetSplat[UncompressedSplatArray.OFFSET.SCALE1],\n                                       targetSplat[UncompressedSplatArray.OFFSET.SCALE2]]);\n                        } else {\n                            rot.set([1.0, 0.0, 0.0, 0.0]);\n                            scale.set([0.01, 0.01, 0.01]);\n                        }\n                        center.set([targetSplat[UncompressedSplatArray.OFFSET.X],\n                                    targetSplat[UncompressedSplatArray.OFFSET.Y],\n                                    targetSplat[UncompressedSplatArray.OFFSET.Z]]);\n                        if (sphericalHarmonicsDegree > 0) {\n                           const shOut = new Float32Array(sectionBuffer, sphericalHarmonicsBase, sphericalHarmonicsComponentsPerSplat);\n                           if (sphericalHarmonicsDegree >= 1) {\n                                for (let s = 0; s < 9; s++) shOut[s] = targetSplat[UncompressedSplatArray.OFFSET.FRC0 + s];\n                                if (sphericalHarmonicsDegree >= 2) {\n                                    for (let s = 0; s < 15; s++) shOut[s + 9] = targetSplat[UncompressedSplatArray.OFFSET.FRC9 + s];\n                                }\n                           }\n                        }\n                    } else {\n                        const center = new Uint16Array(tempCenterBuffer, 0, SplatBuffer.CenterComponentCount);\n                        const rot = new Uint16Array(tempRotationBuffer, 0, SplatBuffer.RotationComponentCount);\n                        const scale = new Uint16Array(tempScaleBuffer, 0, SplatBuffer.ScaleComponentCount);\n\n                        if (targetSplat[UncompressedSplatArray.OFFSET.SCALE0] !== undefined) {\n                            tempRotation.set(targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION3]);\n                            tempRotation.normalize();\n                            rot.set([toHalfFloat(tempRotation.x), toHalfFloat(tempRotation.y),\n                                     toHalfFloat(tempRotation.z), toHalfFloat(tempRotation.w)]);\n                            scale.set([toHalfFloat(targetSplat[UncompressedSplatArray.OFFSET.SCALE0]),\n                                       toHalfFloat(targetSplat[UncompressedSplatArray.OFFSET.SCALE1]),\n                                       toHalfFloat(targetSplat[UncompressedSplatArray.OFFSET.SCALE2])]);\n                        } else {\n                            rot.set([toHalfFloat(1.), 0, 0, 0]);\n                            scale.set([toHalfFloat(0.01), toHalfFloat(0.01), toHalfFloat(0.01)]);\n                        }\n                        bucketCenterDelta.set(targetSplat[UncompressedSplatArray.OFFSET.X],\n                                              targetSplat[UncompressedSplatArray.OFFSET.Y],\n                                              targetSplat[UncompressedSplatArray.OFFSET.Z]).sub(bucketCenter);\n                        bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\n                        bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\n                        bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\n                        bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\n                        bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\n                        bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\n                        center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\n                        if (sphericalHarmonicsDegree > 0) {\n                            const SHArrayType = compressionLevel === 1 ? Uint16Array : Uint8Array;\n                            const bytesPerSHComponent = compressionLevel === 1 ? 2 : 1;\n                            const shOut = new SHArrayType(tempSHBuffer, 0, sphericalHarmonicsComponentsPerSplat);\n                            if (sphericalHarmonicsDegree >= 1) {\n                                for (let s = 0; s < 9; s++) {\n                                    const srcVal = targetSplat[UncompressedSplatArray.OFFSET.FRC0 + s];\n                                    shOut[s] = compressionLevel === 1 ? toHalfFloat(srcVal) : toUint8(srcVal);\n                                }\n                                const degree1ByteCount = 9 * bytesPerSHComponent;\n                                copyBetweenBuffers(shOut.buffer, 0, sectionBuffer, sphericalHarmonicsBase, degree1ByteCount);\n                                if (sphericalHarmonicsDegree >= 2) {\n                                    for (let s = 0; s < 15; s++) {\n                                        const srcVal = targetSplat[UncompressedSplatArray.OFFSET.FRC9 + s];\n                                        shOut[s + 9] = compressionLevel === 1 ? toHalfFloat(srcVal) : toUint8(srcVal);\n                                    }\n                                    const degree2ByteCount = 15 * bytesPerSHComponent;\n                                    copyBetweenBuffers(shOut.buffer, degree1ByteCount, sectionBuffer,\n                                                       sphericalHarmonicsBase + degree1ByteCount, degree2ByteCount);\n                                }\n                            }\n                        }\n\n                        copyBetweenBuffers(center.buffer, 0, sectionBuffer, centerBase, 6);\n                        copyBetweenBuffers(scale.buffer, 0, sectionBuffer, scaleBase, 6);\n                        copyBetweenBuffers(rot.buffer, 0, sectionBuffer, rotationBase, 8);\n                    }\n\n                    const rgba = new Uint8ClampedArray(tempColorBuffer, 0, 4);\n\n                    if (targetSplat[UncompressedSplatArray.OFFSET.FDC0] !== undefined) {\n                        rgba.set([targetSplat[UncompressedSplatArray.OFFSET.FDC0],\n                                  targetSplat[UncompressedSplatArray.OFFSET.FDC1],\n                                  targetSplat[UncompressedSplatArray.OFFSET.FDC2]]);\n                    } else {\n                        rgba.set([255, 0, 0]);\n                    }\n                    if (targetSplat[UncompressedSplatArray.OFFSET.OPACITY] !== undefined) {\n                        rgba[3] = targetSplat[UncompressedSplatArray.OFFSET.OPACITY];\n                    } else {\n                        rgba[3] = 255;\n                    }\n\n                    copyBetweenBuffers(rgba.buffer, 0, sectionBuffer, colorBase, 4);\n\n                    outSplatCount++;\n                }\n            }\n            totalSplatCount += outSplatCount;\n\n            if (compressionLevel >= 1) {\n                const bucketMetaDataArray = new Uint32Array(sectionBuffer, 0, partiallyFullBucketLengths.length * 4);\n                for (let pfb = 0; pfb < partiallyFullBucketLengths.length; pfb ++) {\n                    bucketMetaDataArray[pfb] = partiallyFullBucketLengths[pfb];\n                }\n                const bucketArray = new Float32Array(sectionBuffer, bucketMetaDataSizeBytes,\n                                                     buckets.length * SplatBuffer.BucketStorageSizeFloats);\n                for (let b = 0; b < buckets.length; b++) {\n                    const bucket = buckets[b];\n                    const base = b * 3;\n                    bucketArray[base] = bucket.center[0];\n                    bucketArray[base + 1] = bucket.center[1];\n                    bucketArray[base + 2] = bucket.center[2];\n                }\n            }\n            sectionBuffers.push(sectionBuffer);\n\n            const sectionHeaderBuffer = new ArrayBuffer(SplatBuffer.SectionHeaderSizeBytes);\n            SplatBuffer.writeSectionHeaderToBuffer({\n                maxSplatCount: outSplatCount,\n                splatCount: outSplatCount,\n                bucketSize: sectionBucketSize,\n                bucketCount: buckets.length,\n                bucketBlockSize: sectionBlockSize,\n                compressionScaleRange: compressionScaleRange,\n                storageSizeBytes: sectionSizeBytes,\n                fullBucketCount: fullBucketCount,\n                partiallyFilledBucketCount: partiallyFilledBucketCount,\n                sphericalHarmonicsDegree: sphericalHarmonicsDegree\n            }, compressionLevel, sectionHeaderBuffer, 0);\n            sectionHeaderBuffers.push(sectionHeaderBuffer);\n\n        }\n\n        let sectionsCumulativeSizeBytes = 0;\n        for (let sectionBuffer of sectionBuffers) sectionsCumulativeSizeBytes += sectionBuffer.byteLength;\n        const unifiedBufferSize = SplatBuffer.HeaderSizeBytes +\n                                  SplatBuffer.SectionHeaderSizeBytes * sectionBuffers.length + sectionsCumulativeSizeBytes;\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n\n        SplatBuffer.writeHeaderToBuffer({\n            versionMajor: 0,\n            versionMinor: 1,\n            maxSectionCount: sectionBuffers.length,\n            sectionCount: sectionBuffers.length,\n            maxSplatCount: totalSplatCount,\n            splatCount: totalSplatCount,\n            compressionLevel: compressionLevel,\n            sceneCenter: sceneCenter\n        }, unifiedBuffer);\n\n        let currentUnifiedBase = SplatBuffer.HeaderSizeBytes;\n        for (let sectionHeaderBuffer of sectionHeaderBuffers) {\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, SplatBuffer.SectionHeaderSizeBytes).set(new Uint8Array(sectionHeaderBuffer));\n            currentUnifiedBase += SplatBuffer.SectionHeaderSizeBytes;\n        }\n\n        for (let sectionBuffer of sectionBuffers) {\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, sectionBuffer.byteLength).set(new Uint8Array(sectionBuffer));\n            currentUnifiedBase += sectionBuffer.byteLength;\n        }\n\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\n        return splatBuffer;\n    }\n\n    static computeBucketsForUncompressedSplatArray(splatArray, blockSize, bucketSize) {\n        let splatCount = splatArray.splatCount;\n        const halfBlockSize = blockSize / 2.0;\n\n        const min = new THREE.Vector3();\n        const max = new THREE.Vector3();\n\n        for (let i = 0; i < splatCount; i++) {\n            const targetSplat = splatArray.splats[i];\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\n            if (i === 0 || center[0] < min.x) min.x = center[0];\n            if (i === 0 || center[0] > max.x) max.x = center[0];\n            if (i === 0 || center[1] < min.y) min.y = center[1];\n            if (i === 0 || center[1] > max.y) max.y = center[1];\n            if (i === 0 || center[2] < min.z) min.z = center[2];\n            if (i === 0 || center[2] > max.z) max.z = center[2];\n        }\n\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n        const blockCenter = new THREE.Vector3();\n        const fullBuckets = [];\n        const partiallyFullBuckets = {};\n\n        for (let i = 0; i < splatCount; i++) {\n            const targetSplat = splatArray.splats[i];\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\n            const xBlock = Math.floor((center[0] - min.x) / blockSize);\n            const yBlock = Math.floor((center[1] - min.y) / blockSize);\n            const zBlock = Math.floor((center[2] - min.z) / blockSize);\n\n            blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\n            blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\n            blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\n\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n            let bucket = partiallyFullBuckets[bucketId];\n            if (!bucket) {\n                partiallyFullBuckets[bucketId] = bucket = {\n                    'splats': [],\n                    'center': blockCenter.toArray()\n                };\n            }\n\n            bucket.splats.push(i);\n            if (bucket.splats.length >= bucketSize) {\n                fullBuckets.push(bucket);\n                partiallyFullBuckets[bucketId] = null;\n            }\n        }\n\n        const partiallyFullBucketArray = [];\n        for (let bucketId in partiallyFullBuckets) {\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n                const bucket = partiallyFullBuckets[bucketId];\n                if (bucket) {\n                    partiallyFullBucketArray.push(bucket);\n                }\n            }\n        }\n\n        return {\n            'fullBuckets': fullBuckets,\n            'partiallyFullBuckets': partiallyFullBucketArray,\n        };\n    }\n\n}\n","import { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { clamp } from '../../Util.js';\nimport * as THREE from 'three';\n\nconst HeaderMagicBytes = new Uint8Array([112, 108, 121, 10]);\nconst HeaderEndTokenBytes = new Uint8Array([10, 101, 110, 100, 95, 104, 101, 97, 100, 101, 114, 10]);\nconst HeaderEndToken = 'end_header';\n\nconst DataTypeMap = new Map([\n  ['char', Int8Array],\n  ['uchar', Uint8Array],\n  ['short', Int16Array],\n  ['ushort', Uint16Array],\n  ['int', Int32Array],\n  ['uint', Uint32Array],\n  ['float', Float32Array],\n  ['double', Float64Array],\n]);\n\nconst unpackUnorm = (value, bits) => {\n  const t = (1 << bits) - 1;\n  return (value & t) / t;\n};\n\nconst unpack111011 = (result, value) => {\n  result.x = unpackUnorm(value >>> 21, 11);\n  result.y = unpackUnorm(value >>> 11, 10);\n  result.z = unpackUnorm(value, 11);\n};\n\nconst unpack8888 = (result, value) => {\n  result.x = unpackUnorm(value >>> 24, 8);\n  result.y = unpackUnorm(value >>> 16, 8);\n  result.z = unpackUnorm(value >>> 8, 8);\n  result.w = unpackUnorm(value, 8);\n};\n\n// unpack quaternion with 2,10,10,10 format (largest element, 3x10bit element)\nconst unpackRot = (result, value) => {\n  const norm = 1.0 / (Math.sqrt(2) * 0.5);\n  const a = (unpackUnorm(value >>> 20, 10) - 0.5) * norm;\n  const b = (unpackUnorm(value >>> 10, 10) - 0.5) * norm;\n  const c = (unpackUnorm(value, 10) - 0.5) * norm;\n  const m = Math.sqrt(1.0 - (a * a + b * b + c * c));\n\n  switch (value >>> 30) {\n    case 0:\n      result.set(m, a, b, c);\n      break;\n    case 1:\n      result.set(a, m, b, c);\n      break;\n    case 2:\n      result.set(a, b, m, c);\n      break;\n    case 3:\n      result.set(a, b, c, m);\n      break;\n  }\n};\n\nconst lerp = (a, b, t) => {\n  return a * (1 - t) + b * t;\n};\n\nconst getElementPropStorage = (element, name) => {\n  return element.properties.find((p) => p.name === name && p.storage)\n    ?.storage;\n};\n\nexport class CompressedPlyParser {\n\n  static decodeHeaderText(headerText) {\n\n    let element;\n    let chunkElement;\n    let vertexElement;\n\n    const headerLines = headerText.split('\\n').filter((line) => !line.startsWith('comment '));\n\n    let bytesPerSplat = 0;\n    let done = false;\n    for (let i = 1; i < headerLines.length; ++i) {\n      const words = headerLines[i].split(' ');\n\n      switch (words[0]) {\n        case 'format':\n          if (words[1] !== 'binary_little_endian') {\n            throw new Error('Unsupported ply format');\n          }\n          break;\n        case 'element':\n          element = {\n            name: words[1],\n            count: parseInt(words[2], 10),\n            properties: [],\n            storageSizeBytes: 0\n          };\n          if (element.name === 'chunk') chunkElement = element;\n          else if (element.name === 'vertex') vertexElement = element;\n          break;\n        case 'property': {\n          if (!DataTypeMap.has(words[1])) {\n            throw new Error(\n              `Unrecognized property data type '${words[1]}' in ply header`\n            );\n          }\n          const StorageType = DataTypeMap.get(words[1]);\n          const storageSizeByes = StorageType.BYTES_PER_ELEMENT * element.count;\n          if (element.name === 'vertex') bytesPerSplat += StorageType.BYTES_PER_ELEMENT;\n          element.properties.push({\n            type: words[1],\n            name: words[2],\n            storage: null,\n            byteSize: StorageType.BYTES_PER_ELEMENT,\n            storageSizeByes: storageSizeByes\n          });\n          element.storageSizeBytes += storageSizeByes;\n          break;\n        }\n        case HeaderEndToken:\n          done = true;\n        break;\n        default:\n          throw new Error(\n            `Unrecognized header value '${words[0]}' in ply header`\n          );\n      }\n      if (done) break;\n    }\n\n    return {\n      'chunkElement': chunkElement,\n      'vertexElement': vertexElement,\n      'bytesPerSplat': bytesPerSplat,\n      'headerSizeBytes': headerText.indexOf(HeaderEndToken) + HeaderEndToken.length + 1,\n    };\n  }\n\n  static decodeHeader(plyBuffer) {\n\n    /**\n     * Searches for the first occurrence of a sequence within a buffer.\n     * @example\n     * find(new Uint8Array([1, 2, 3, 4]), new Uint8Array([3, 4])); // 2\n     * @param {Uint8Array} buf - The buffer in which to search.\n     * @param {Uint8Array} search - The sequence to search for.\n     * @return {number} The index of the first occurrence of the search sequence in the buffer, or -1 if not found.\n     */\n    const find = (buf, search) => {\n      const endIndex = buf.length - search.length;\n      let i;\n      let j;\n      for (i = 0; i <= endIndex; ++i) {\n        for (j = 0; j < search.length; ++j) {\n          if (buf[i + j] !== search[j]) {\n            break;\n          }\n        }\n        if (j === search.length) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    /**\n     * Checks if array 'a' starts with the same elements as array 'b'.\n     * @example\n     * startsWith(new Uint8Array([1, 2, 3, 4]), new Uint8Array([1, 2])); // true\n     * @param {Uint8Array} a - The array to check against.\n     * @param {Uint8Array} b - The array of elements to look for at the start of 'a'.\n     * @return {boolean} - True if 'a' starts with all elements of 'b', otherwise false.\n     */\n    const startsWith = (a, b) => {\n      if (a.length < b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < b.length; ++i) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    let buf = new Uint8Array(plyBuffer);\n    let endHeaderTokenOffset;\n\n    if (buf.length >= HeaderMagicBytes.length && !startsWith(buf, HeaderMagicBytes)) {\n      throw new Error('Invalid PLY header');\n    }\n\n    endHeaderTokenOffset = find(buf, HeaderEndTokenBytes);\n    if (endHeaderTokenOffset === -1) {\n      throw new Error('End of PLY header not found');\n    }\n\n    const headerText = new TextDecoder('ascii').decode(\n      buf.slice(0, endHeaderTokenOffset)\n    );\n\n    const {chunkElement, vertexElement, bytesPerSplat} = CompressedPlyParser.decodeHeaderText(headerText);\n\n    return {\n      'headerSizeBytes': endHeaderTokenOffset + HeaderEndTokenBytes.length,\n      'bytesPerSplat': bytesPerSplat,\n      'chunkElement': chunkElement,\n      'vertexElement': vertexElement\n    };\n  }\n\n  static readElementData(element, readBuffer, readOffset, fromIndex, toIndex, propertyFilter = null) {\n\n    let dataView = readBuffer instanceof DataView ? readBuffer : new DataView(readBuffer);\n\n    fromIndex = fromIndex || 0;\n    toIndex = toIndex || element.count - 1;\n    for (let e = fromIndex; e <= toIndex; ++e) {\n      for (let j = 0; j < element.properties.length; ++j) {\n        const property = element.properties[j];\n\n        const StorageType = DataTypeMap.get(property.type);\n        const requiredStorageSizeBytes = StorageType.BYTES_PER_ELEMENT * element.count;\n        if ((!property.storage || property.storage.byteLength < requiredStorageSizeBytes) &&\n            (!propertyFilter || propertyFilter(property.name))) {\n          property.storage = new StorageType(element.count);\n        }\n\n        if (property.storage) {\n          switch (property.type) {\n            case 'char':\n              property.storage[e] = dataView.getInt8(readOffset);\n              break;\n            case 'uchar':\n              property.storage[e] = dataView.getUint8(readOffset);\n              break;\n            case 'short':\n              property.storage[e] = dataView.getInt16(readOffset, true);\n              break;\n            case 'ushort':\n              property.storage[e] = dataView.getUint16(readOffset, true);\n              break;\n            case 'int':\n              property.storage[e] = dataView.getInt32(readOffset, true);\n              break;\n            case 'uint':\n              property.storage[e] = dataView.getUint32(readOffset, true);\n              break;\n            case 'float':\n              property.storage[e] = dataView.getFloat32(readOffset, true);\n              break;\n            case 'double':\n              property.storage[e] = dataView.getFloat64(readOffset, true);\n              break;\n          }\n        }\n\n        readOffset += property.byteSize;\n      }\n    }\n\n    return readOffset;\n  }\n\n  static readPly(plyBuffer, propertyFilter = null) {\n\n    const header = CompressedPlyParser.decodeHeader(plyBuffer);\n\n    let readIndex = CompressedPlyParser.readElementData(header.chunkElement, plyBuffer, header.headerSizeBytes, null, null, propertyFilter);\n    CompressedPlyParser.readElementData(header.vertexElement, plyBuffer, readIndex, null, null, propertyFilter);\n\n    return {\n      'chunkElement': header.chunkElement,\n      'vertexElement': header.vertexElement\n    };\n  }\n\n  static getElementStorageArrays(chunkElement, vertexElement) {\n    const minX = getElementPropStorage(chunkElement, 'min_x');\n    const minY = getElementPropStorage(chunkElement, 'min_y');\n    const minZ = getElementPropStorage(chunkElement, 'min_z');\n    const maxX = getElementPropStorage(chunkElement, 'max_x');\n    const maxY = getElementPropStorage(chunkElement, 'max_y');\n    const maxZ = getElementPropStorage(chunkElement, 'max_z');\n    const minScaleX = getElementPropStorage(chunkElement, 'min_scale_x');\n    const minScaleY = getElementPropStorage(chunkElement, 'min_scale_y');\n    const minScaleZ = getElementPropStorage(chunkElement, 'min_scale_z');\n    const maxScaleX = getElementPropStorage(chunkElement, 'max_scale_x');\n    const maxScaleY = getElementPropStorage(chunkElement, 'max_scale_y');\n    const maxScaleZ = getElementPropStorage(chunkElement, 'max_scale_z');\n    const position = getElementPropStorage(vertexElement, 'packed_position');\n    const rotation = getElementPropStorage(vertexElement, 'packed_rotation');\n    const scale = getElementPropStorage(vertexElement, 'packed_scale');\n    const color = getElementPropStorage(vertexElement, 'packed_color');\n    return {\n      positionExtremes: {\n        minX, maxX,\n        minY, maxY,\n        minZ, maxZ\n      },\n      scaleExtremes: {\n        minScaleX, maxScaleX, minScaleY,\n        maxScaleY, minScaleZ, maxScaleZ\n      },\n      position,\n      rotation,\n      scale,\n      color\n    };\n  }\n\n  static decompressSplat = function() {\n\n    const p = new THREE.Vector3();\n    const r = new THREE.Quaternion();\n    const s = new THREE.Vector3();\n    const c = new THREE.Vector4();\n\n    const OFFSET = UncompressedSplatArray.OFFSET;\n\n    return function(index, chunkSplatIndexOffset, positionArray, positionExtremes, scaleArray, scaleExtremes,\n                    rotationArray, colorArray, outSplat) {\n      outSplat = outSplat || UncompressedSplatArray.createSplat();\n\n      const chunkIndex = Math.floor((chunkSplatIndexOffset + index) / 256);\n\n      unpack111011(p, positionArray[index]);\n      unpackRot(r, rotationArray[index]);\n      unpack111011(s, scaleArray[index]);\n      unpack8888(c, colorArray[index]);\n\n      outSplat[OFFSET.X] = lerp(positionExtremes.minX[chunkIndex], positionExtremes.maxX[chunkIndex], p.x);\n      outSplat[OFFSET.Y] = lerp(positionExtremes.minY[chunkIndex], positionExtremes.maxY[chunkIndex], p.y);\n      outSplat[OFFSET.Z] = lerp(positionExtremes.minZ[chunkIndex], positionExtremes.maxZ[chunkIndex], p.z);\n\n      outSplat[OFFSET.ROTATION0] = r.x;\n      outSplat[OFFSET.ROTATION1] = r.y;\n      outSplat[OFFSET.ROTATION2] = r.z;\n      outSplat[OFFSET.ROTATION3] = r.w;\n\n      outSplat[OFFSET.SCALE0] = Math.exp(lerp(scaleExtremes.minScaleX[chunkIndex], scaleExtremes.maxScaleX[chunkIndex], s.x));\n      outSplat[OFFSET.SCALE1] = Math.exp(lerp(scaleExtremes.minScaleY[chunkIndex], scaleExtremes.maxScaleY[chunkIndex], s.y));\n      outSplat[OFFSET.SCALE2] = Math.exp(lerp(scaleExtremes.minScaleZ[chunkIndex], scaleExtremes.maxScaleZ[chunkIndex], s.z));\n\n      outSplat[OFFSET.FDC0] = clamp(Math.floor(c.x * 255), 0, 255);\n      outSplat[OFFSET.FDC1] = clamp(Math.floor(c.y * 255), 0, 255);\n      outSplat[OFFSET.FDC2] = clamp(Math.floor(c.z * 255), 0, 255);\n      outSplat[OFFSET.OPACITY] = clamp(Math.floor(c.w * 255), 0, 255);\n\n      return outSplat;\n    };\n\n  }();\n\n  static parseToUncompressedSplatBufferSection(chunkElement, vertexElement, fromIndex, toIndex, chunkSplatIndexOffset,\n                                               vertexDataBuffer, veretxReadOffset, outBuffer, outOffset, propertyFilter = null) {\n\n    CompressedPlyParser.readElementData(vertexElement, vertexDataBuffer, veretxReadOffset, fromIndex, toIndex, propertyFilter);\n\n    const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n    const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n    const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\n    const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\n\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\n      CompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\n\n    const OFFSET = UncompressedSplatArray.OFFSET;\n    const tempSplat = UncompressedSplatArray.createSplat();\n\n    for (let i = fromIndex; i <= toIndex; ++i) {\n\n      CompressedPlyParser.decompressSplat(i, chunkSplatIndexOffset, position, positionExtremes,\n                                          scale, scaleExtremes, rotation, color, tempSplat);\n\n      const outBase = i * outBytesPerSplat + outOffset;\n      const outCenter = new Float32Array(outBuffer, outBase, 3);\n      const outScale = new Float32Array(outBuffer, outBase + outBytesPerCenter, 3);\n      const outRotation = new Float32Array(outBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\n      const outColor = new Uint8Array(outBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\n\n      outCenter[0] = tempSplat[OFFSET.X];\n      outCenter[1] = tempSplat[OFFSET.Y];\n      outCenter[2] = tempSplat[OFFSET.Z];\n\n      outScale[0] = tempSplat[OFFSET.SCALE0];\n      outScale[1] = tempSplat[OFFSET.SCALE1];\n      outScale[2] = tempSplat[OFFSET.SCALE2];\n\n      outRotation[0] = tempSplat[OFFSET.ROTATION0];\n      outRotation[1] = tempSplat[OFFSET.ROTATION1];\n      outRotation[2] = tempSplat[OFFSET.ROTATION2];\n      outRotation[3] = tempSplat[OFFSET.ROTATION3];\n\n      outColor[0] = tempSplat[OFFSET.FDC0];\n      outColor[1] = tempSplat[OFFSET.FDC1];\n      outColor[2] = tempSplat[OFFSET.FDC2];\n      outColor[3] = tempSplat[OFFSET.OPACITY];\n    }\n  }\n\n  static parseToUncompressedSplatArray(plyBuffer) {\n    const { chunkElement, vertexElement } = CompressedPlyParser.readPly(plyBuffer);\n\n    const splatArray = new UncompressedSplatArray();\n\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\n      CompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\n\n    for (let i = 0; i < vertexElement.count; ++i) {\n\n      splatArray.addDefaultSplat();\n      const newSplat = splatArray.getSplat(splatArray.splatCount - 1);\n\n      CompressedPlyParser.decompressSplat(i, 0, position, positionExtremes, scale, scaleExtremes, rotation, color, newSplat);\n    }\n\n    const mat = new THREE.Matrix4();\n    mat.identity();\n\n    return splatArray;\n  }\n\n}\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { CompressedPlyParser } from './CompressedPlyParser.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { clamp } from '../../Util.js';\n\nexport class PlyParser {\n\n    static HeaderEndToken = 'end_header';\n\n    static BaseFields = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\n                         'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'red', 'green', 'blue', 'opacity'];\n\n    static SphericalHarmonicsFields = Array.from(Array(45)).map((e, i) => (`f_rest_${i}`));\n\n    static Fields = [[...PlyParser.BaseFields], [...PlyParser.BaseFields, ...PlyParser.SphericalHarmonicsFields]];\n\n    static checkTextForEndHeader(endHeaderTestText) {\n        if (endHeaderTestText.includes(PlyParser.HeaderEndToken)) {\n            return true;\n        }\n        return false;\n    }\n\n    static checkBufferForEndHeader(buffer, searchOfset, chunkSize, decoder) {\n        const endHeaderTestChunk = new Uint8Array(buffer, Math.max(0, searchOfset - chunkSize), chunkSize);\n        const endHeaderTestText = decoder.decode(endHeaderTestChunk);\n        return PlyParser.checkTextForEndHeader(endHeaderTestText);\n    }\n\n    static decodeHeaderText(headerText) {\n        const headerLines = headerText.split('\\n');\n\n        const prunedLines = [];\n\n        let splatCount = 0;\n        let propertyTypes = {};\n        let compressed = false;\n\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            prunedLines.push(line);\n            if (line.startsWith('element chunk') || line.match(/[A-Za-z]*packed_[A-Za-z]*/)) {\n                compressed = true;\n            } else if (line.startsWith('element vertex')) {\n                const splatCountMatch = line.match(/\\d+/);\n                if (splatCountMatch) {\n                    splatCount = parseInt(splatCountMatch[0]);\n                }\n            } else if (line.startsWith('property')) {\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (propertyMatch) {\n                    const propertyType = propertyMatch[2];\n                    const propertyName = propertyMatch[3];\n                    propertyTypes[propertyName] = propertyType;\n                }\n            } else if (line === PlyParser.HeaderEndToken) {\n                break;\n            }\n        }\n\n        let bytesPerSplat = 0;\n        let fieldOffsets = {};\n        const fieldSize = {\n            'double': 8,\n            'int': 4,\n            'uint': 4,\n            'float': 4,\n            'short': 2,\n            'ushort': 2,\n            'uchar': 1,\n        };\n\n        const fieldNames = [];\n        for (let fieldName in propertyTypes) {\n            if (propertyTypes.hasOwnProperty(fieldName)) {\n                fieldNames.push(fieldName);\n                const type = propertyTypes[fieldName];\n                fieldOffsets[fieldName] = bytesPerSplat;\n                bytesPerSplat += fieldSize[type];\n            }\n        }\n\n        let sphericalHarmonicsFieldCount = 0;\n        let sphericalHarmonicsCoefficientsPerChannel = 0;\n        for (let fieldName of fieldNames) {\n            if (fieldName.startsWith('f_rest')) sphericalHarmonicsFieldCount++;\n        }\n        sphericalHarmonicsCoefficientsPerChannel = sphericalHarmonicsFieldCount / 3;\n        let sphericalHarmonicsDegree = 0;\n        if (sphericalHarmonicsCoefficientsPerChannel >= 3) sphericalHarmonicsDegree = 1;\n        if (sphericalHarmonicsCoefficientsPerChannel >= 8) sphericalHarmonicsDegree = 2;\n\n        let sphericalHarmonicsDegree1Fields = [];\n        if (sphericalHarmonicsDegree >= 1) {\n            for (let rgb = 0; rgb < 3; rgb++) {\n                for (let i = 0; i < 3; i++) {\n                    sphericalHarmonicsDegree1Fields.push('f_rest_' + (i + sphericalHarmonicsCoefficientsPerChannel * rgb));\n                }\n            }\n        }\n\n        let sphericalHarmonicsDegree2Fields = [];\n        if (sphericalHarmonicsDegree >= 2) {\n            for (let rgb = 0; rgb < 3; rgb++) {\n                for (let i = 0; i < 5; i++) {\n                    sphericalHarmonicsDegree2Fields.push('f_rest_' + (i + sphericalHarmonicsCoefficientsPerChannel * rgb + 3));\n                }\n            }\n        }\n\n        return {\n            'splatCount': splatCount,\n            'propertyTypes': propertyTypes,\n            'compressed': compressed,\n            'headerText': headerText,\n            'headerLines': prunedLines,\n            'headerSizeBytes': headerText.indexOf(PlyParser.HeaderEndToken) + PlyParser.HeaderEndToken.length + 1,\n            'bytesPerSplat': bytesPerSplat,\n            'fieldOffsets': fieldOffsets,\n            'sphericalHarmonicsDegree': sphericalHarmonicsDegree,\n            'sphericalHarmonicsCoefficientsPerChannel': sphericalHarmonicsCoefficientsPerChannel,\n            'sphericalHarmonicsDegree1Fields': sphericalHarmonicsDegree1Fields,\n            'sphericalHarmonicsDegree2Fields': sphericalHarmonicsDegree2Fields\n        };\n    }\n\n    static decodeHeadeFromBuffer(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n        const readChunkSize = 100;\n\n        while (true) {\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n                throw new Error('End of file reached while searching for end of header');\n            }\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += readChunkSize;\n\n            if (PlyParser.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\n                break;\n            }\n        }\n\n        return PlyParser.decodeHeaderText(headerText);\n\n    }\n\n    static findVertexData(plyBuffer, header) {\n        return new DataView(plyBuffer, header.headerSizeBytes);\n    }\n\n    static readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\n        let rawVertex = outVertex || {};\n        for (let property of propertiesToRead) {\n            const propertyType = propertyTypes[property];\n            if (propertyType === 'float') {\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\n            } else if (propertyType === 'uchar') {\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\n            }\n        }\n    }\n\n    static parseToUncompressedSplatBufferSection(header, fromSplat, toSplat, vertexData, vertexDataOffset,\n                                                 toBuffer, toOffset, outSphericalHarmonicsDegree = 0) {\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\n        const outBytesPerColor = SplatBuffer.CompressionLevels[0].BytesPerColor;\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree].BytesPerSplat;\n\n        for (let i = fromSplat; i <= toSplat; i++) {\n\n            const parsedSplat = PlyParser.parseToUncompressedSplat(vertexData, i, header, vertexDataOffset, outSphericalHarmonicsDegree);\n\n            const outBase = i * outBytesPerSplat + toOffset;\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\n\n            outCenter[0] = parsedSplat[UncompressedSplatArray.OFFSET.X];\n            outCenter[1] = parsedSplat[UncompressedSplatArray.OFFSET.Y];\n            outCenter[2] = parsedSplat[UncompressedSplatArray.OFFSET.Z];\n\n            outScale[0] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE0];\n            outScale[1] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE1];\n            outScale[2] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE2];\n\n            outRotation[0] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION0];\n            outRotation[1] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION1];\n            outRotation[2] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION2];\n            outRotation[3] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION3];\n\n            outColor[0] = parsedSplat[UncompressedSplatArray.OFFSET.FDC0];\n            outColor[1] = parsedSplat[UncompressedSplatArray.OFFSET.FDC1];\n            outColor[2] = parsedSplat[UncompressedSplatArray.OFFSET.FDC2];\n            outColor[3] = parsedSplat[UncompressedSplatArray.OFFSET.OPACITY];\n\n            if (outSphericalHarmonicsDegree >= 1) {\n                const outSphericalHarmonics = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale +\n                                                               outBytesPerRotation + outBytesPerColor,\n                                                               parsedSplat.sphericalHarmonicsCount);\n                for (let i = 0; i <= 8; i++) {\n                    outSphericalHarmonics[i] = parsedSplat[UncompressedSplatArray.OFFSET.FRC0 + i];\n                }\n                if (outSphericalHarmonicsDegree >= 2) {\n                    for (let i = 9; i <= 23; i++) {\n                        outSphericalHarmonics[i] = parsedSplat[UncompressedSplatArray.OFFSET.FRC0 + i];\n                    }\n                }\n            }\n        }\n    }\n\n    static parseToUncompressedSplat = function() {\n\n        let rawVertex = {};\n        const tempRotation = new THREE.Quaternion();\n\n        return function(vertexData, row, header, vertexDataOffset = 0, outSphericalHarmonicsDegree = 0) {\n            outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\n            PlyParser.readRawVertexFast(vertexData, row * header.bytesPerSplat + vertexDataOffset, header.fieldOffsets,\n                                        PlyParser.Fields[outSphericalHarmonicsDegree > 0 ? 1 : 0], header.propertyTypes, rawVertex);\n            const newSplat = UncompressedSplatArray.createSplat(outSphericalHarmonicsDegree);\n            if (rawVertex['scale_0'] !== undefined) {\n                newSplat[UncompressedSplatArray.OFFSET.SCALE0] = Math.exp(rawVertex['scale_0']);\n                newSplat[UncompressedSplatArray.OFFSET.SCALE1] = Math.exp(rawVertex['scale_1']);\n                newSplat[UncompressedSplatArray.OFFSET.SCALE2] = Math.exp(rawVertex['scale_2']);\n            } else {\n                newSplat[UncompressedSplatArray.OFFSET.SCALE0] = 0.01;\n                newSplat[UncompressedSplatArray.OFFSET.SCALE1] = 0.01;\n                newSplat[UncompressedSplatArray.OFFSET.SCALE2] = 0.01;\n            }\n\n            if (rawVertex['f_dc_0'] !== undefined) {\n                const SH_C0 = 0.28209479177387814;\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = (0.5 + SH_C0 * rawVertex['f_dc_0']) * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = (0.5 + SH_C0 * rawVertex['f_dc_1']) * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = (0.5 + SH_C0 * rawVertex['f_dc_2']) * 255;\n            } else if (rawVertex['red'] !== undefined) {\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = rawVertex['red'] * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = rawVertex['green'] * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = rawVertex['blue'] * 255;\n            } else {\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = 0;\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = 0;\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = 0;\n            }\n\n            if (rawVertex['opacity'] !== undefined) {\n                newSplat[UncompressedSplatArray.OFFSET.OPACITY] = (1 / (1 + Math.exp(-rawVertex['opacity']))) * 255;\n            }\n\n            newSplat[UncompressedSplatArray.OFFSET.FDC0] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC0]), 0, 255);\n            newSplat[UncompressedSplatArray.OFFSET.FDC1] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC1]), 0, 255);\n            newSplat[UncompressedSplatArray.OFFSET.FDC2] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC2]), 0, 255);\n            newSplat[UncompressedSplatArray.OFFSET.OPACITY] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.OPACITY]), 0, 255);\n\n            if (outSphericalHarmonicsDegree >= 1) {\n                if (rawVertex['f_rest_0'] !== undefined) {\n                    for (let i = 0; i < 9; i++) {\n                        newSplat[UncompressedSplatArray.OFFSET.FRC0 + i] = rawVertex[header.sphericalHarmonicsDegree1Fields[i]];\n                    }\n                    if (outSphericalHarmonicsDegree >= 2) {\n                        for (let i = 0; i < 15; i++) {\n                            newSplat[UncompressedSplatArray.OFFSET.FRC9 + i] = rawVertex[header.sphericalHarmonicsDegree2Fields[i]];\n                        }\n                    }\n                } else {\n                    newSplat[UncompressedSplatArray.OFFSET.FRC0] = 0;\n                    newSplat[UncompressedSplatArray.OFFSET.FRC1] = 0;\n                    newSplat[UncompressedSplatArray.OFFSET.FRC2] = 0;\n                }\n            }\n\n            tempRotation.set(rawVertex['rot_0'], rawVertex['rot_1'], rawVertex['rot_2'], rawVertex['rot_3']);\n            tempRotation.normalize();\n\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION0] = tempRotation.x;\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION1] = tempRotation.y;\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION2] = tempRotation.z;\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION3] = tempRotation.w;\n\n            newSplat[UncompressedSplatArray.OFFSET.X] = rawVertex['x'];\n            newSplat[UncompressedSplatArray.OFFSET.Y] = rawVertex['y'];\n            newSplat[UncompressedSplatArray.OFFSET.Z] = rawVertex['z'];\n\n            return newSplat;\n        };\n\n    }();\n\n    static parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\n\n        const header = PlyParser.decodeHeadeFromBuffer(plyBuffer);\n\n        if (header.compressed) {\n\n            return CompressedPlyParser.parseToUncompressedSplatArray(plyBuffer);\n\n        } else {\n\n            const splatCount = header.splatCount;\n\n            const vertexData = PlyParser.findVertexData(plyBuffer, header);\n\n            // TODO: Eventually properly support multiple degree spherical harmonics\n            // figure out the SH degree from the number of coefficients\n            /* let nRestCoeffs = 0;\n            for (const propertyName in header.propertyTypes) {\n                if (propertyName.startsWith('f_rest_')) {\n                    nRestCoeffs += 1;\n                }\n            }\n            const nCoeffsPerColor = nRestCoeffs / 3;*/\n\n            // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\n            // const sphericalHarmonicsDegree = 0;\n            // console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\n\n            // figure out the order in which spherical harmonics should be read\n            /* const shFeatureOrder = [];\n            for (let rgb = 0; rgb < 3; ++rgb) {\n                shFeatureOrder.push(`f_dc_${rgb}`);\n            }\n            for (let i = 0; i < nCoeffsPerColor; ++i) {\n                for (let rgb = 0; rgb < 3; ++rgb) {\n                    shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\n                }\n            }*/\n\n            const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n\n            for (let row = 0; row < splatCount; row++) {\n                const newSplat = PlyParser.parseToUncompressedSplat(vertexData, row, header, 0, outSphericalHarmonicsDegree);\n                splatArray.addSplat(newSplat);\n            }\n\n            return splatArray;\n        }\n    }\n\n}\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatPartitioner {\n\n    constructor(sectionCount, sectionFilters, groupingParameters, partitionGenerator) {\n        this.sectionCount = sectionCount;\n        this.sectionFilters = sectionFilters;\n        this.groupingParameters = groupingParameters;\n        this.partitionGenerator = partitionGenerator;\n    }\n\n    partitionUncompressedSplatArray(splatArray) {\n        let groupingParameters;\n        let sectionCount;\n        let sectionFilters;\n        if (this.partitionGenerator) {\n            const results = this.partitionGenerator(splatArray);\n            groupingParameters = results.groupingParameters;\n            sectionCount = results.sectionCount;\n            sectionFilters = results.sectionFilters;\n        } else {\n            groupingParameters = this.groupingParameters;\n            sectionCount = this.sectionCount;\n            sectionFilters = this.sectionFilters;\n        }\n\n        const newArrays = [];\n        for (let s = 0; s < sectionCount; s++) {\n            const sectionSplats = new UncompressedSplatArray(splatArray.sphericalHarmonicsDegree);\n            const sectionFilter = sectionFilters[s];\n            for (let i = 0; i < splatArray.splatCount; i++) {\n                if (sectionFilter(i)) {\n                    sectionSplats.addSplatFromArray(splatArray, i);\n                }\n            }\n            newArrays.push(sectionSplats);\n        }\n        return {\n            splatArrays: newArrays,\n            parameters: groupingParameters\n        };\n    }\n\n    static getStandardPartitioner(partitionSize = 0, sceneCenter = new THREE.Vector3(),\n                                  blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\n        const partitionGenerator = (splatArray) => {\n\n            if (partitionSize <= 0) partitionSize = splatArray.splatCount;\n\n            const centerA = new THREE.Vector3();\n            const centerB = new THREE.Vector3();\n            const clampDistance = 0.5;\n            const clampPoint = (point) => {\n                point.x = Math.floor(point.x / clampDistance) * clampDistance;\n                point.y = Math.floor(point.y / clampDistance) * clampDistance;\n                point.z = Math.floor(point.z / clampDistance) * clampDistance;\n            };\n            splatArray.splats.sort((a, b) => {\n                centerA.set(a[UncompressedSplatArray.OFFSET.X],\n                            a[UncompressedSplatArray.OFFSET.Y],\n                            a[UncompressedSplatArray.OFFSET.Z]).sub(sceneCenter);\n                clampPoint(centerA);\n                const centerADist = centerA.lengthSq();\n                centerB.set(b[UncompressedSplatArray.OFFSET.X],\n                            b[UncompressedSplatArray.OFFSET.Y],\n                            b[UncompressedSplatArray.OFFSET.Z]).sub(sceneCenter);\n                clampPoint(centerB);\n                const centerBDist = centerB.lengthSq();\n                if (centerADist > centerBDist) return 1;\n                else return -1;\n            });\n\n            const sectionFilters = [];\n            const groupingParameters = [];\n            partitionSize = Math.min(splatArray.splatCount, partitionSize);\n            const patitionCount = Math.ceil(splatArray.splatCount / partitionSize);\n            let currentStartSplat = 0;\n            for (let i = 0; i < patitionCount; i ++) {\n                let startSplat = currentStartSplat;\n                sectionFilters.push((splatIndex) => {\n                    return splatIndex >= startSplat && splatIndex < startSplat + partitionSize;\n                });\n                groupingParameters.push({\n                    'blocksSize': blockSize,\n                    'bucketSize': bucketSize,\n                });\n                currentStartSplat += partitionSize;\n            }\n            return {\n                'sectionCount': sectionFilters.length,\n                sectionFilters,\n                groupingParameters\n            };\n        };\n        return new SplatPartitioner(undefined, undefined, undefined, partitionGenerator);\n    }\n}\n","import * as THREE from 'three';\nimport { SplatPartitioner } from './SplatPartitioner.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatBufferGenerator {\n\n    constructor(splatPartitioner, alphaRemovalThreshold, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\n        this.splatPartitioner = splatPartitioner;\n        this.alphaRemovalThreshold = alphaRemovalThreshold;\n        this.compressionLevel = compressionLevel;\n        this.sectionSize = sectionSize;\n        this.sceneCenter = sceneCenter ? new THREE.Vector3().copy(sceneCenter) : undefined;\n        this.blockSize = blockSize;\n        this.bucketSize = bucketSize;\n    }\n\n    generateFromUncompressedSplatArray(splatArray) {\n        const partitionResults = this.splatPartitioner.partitionUncompressedSplatArray(splatArray);\n        return SplatBuffer.generateFromUncompressedSplatArrays(partitionResults.splatArrays,\n                                                               this.alphaRemovalThreshold, this.compressionLevel,\n                                                               this.sceneCenter, this.blockSize, this.bucketSize,\n                                                               partitionResults.parameters);\n    }\n\n    static getStandardGenerator(alphaRemovalThreshold = 1, compressionLevel = 1, sectionSize = 0, sceneCenter = new THREE.Vector3(),\n                                blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\n        const splatPartitioner = SplatPartitioner.getStandardPartitioner(sectionSize, sceneCenter, blockSize, bucketSize);\n        return new SplatBufferGenerator(splatPartitioner, alphaRemovalThreshold, compressionLevel,\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\n    }\n}\n","export const LoaderStatus = {\n    'Downloading': 0,\n    'Processing': 1,\n    'Done': 2\n};\n","import * as THREE from 'three';\nimport { PlyParser } from './PlyParser.js';\nimport { CompressedPlyParser } from './CompressedPlyParser.js';\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { Constants } from '../../Constants.js';\n\nfunction storeChunksInBuffer(chunks, buffer) {\n    let inBytes = 0;\n    for (let chunk of chunks) inBytes += chunk.sizeBytes;\n\n    if (!buffer || buffer.byteLength < inBytes) {\n        buffer = new ArrayBuffer(inBytes);\n    }\n\n    let offset = 0;\n    for (let chunk of chunks) {\n        new Uint8Array(buffer, offset, chunk.sizeBytes).set(chunk.data);\n        offset += chunk.sizeBytes;\n    }\n\n    return buffer;\n}\n\nexport class PlyLoader {\n\n    static loadFromURL(fileName, onProgress, streamLoadData, onStreamedSectionProgress, minimumAlpha, compressionLevel,\n                       outSphericalHarmonicsDegree = 0, sectionSize, sceneCenter, blockSize, bucketSize) {\n\n        const streamedSectionSizeBytes = Constants.StreamingSectionSize;\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n        const sectionCount = 1;\n\n        let streamBufferIn;\n        let streamBufferOut;\n        let streamedSplatBuffer;\n        let compressedPlyHeaderChunksBuffer;\n        let maxSplatCount = 0;\n        let splatCount = 0;\n\n        let headerLoaded = false;\n        let readyToLoadSplatData = false;\n        let compressed = false;\n\n        let streamLoadCompleteResolver;\n        let streamLoadPromise = new Promise((resolve) => {\n            streamLoadCompleteResolver = resolve;\n        });\n\n        let numBytesStreamed = 0;\n        let numBytesParsed = 0;\n        let numBytesDownloaded = 0;\n        let headerText = '';\n        let header = null;\n        let chunks = [];\n\n        const textDecoder = new TextDecoder();\n\n        const localOnProgress = (percent, percentLabel, chunkData) => {\n            const loadComplete = percent >= 100;\n            if (streamLoadData) {\n\n                if (chunkData) {\n                    chunks.push({\n                        'data': chunkData,\n                        'sizeBytes': chunkData.byteLength,\n                        'startBytes': numBytesDownloaded,\n                        'endBytes': numBytesDownloaded + chunkData.byteLength\n                    });\n                    numBytesDownloaded += chunkData.byteLength;\n                }\n\n                if (!headerLoaded) {\n                    headerText += textDecoder.decode(chunkData);\n                    if (PlyParser.checkTextForEndHeader(headerText)) {\n                        header = PlyParser.decodeHeaderText(headerText);\n                        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\n                        compressed = header.compressed;\n\n                        if (compressed) {\n                            header = CompressedPlyParser.decodeHeaderText(headerText);\n                            maxSplatCount = header.vertexElement.count;\n                        } else {\n                            maxSplatCount = header.splatCount;\n                            readyToLoadSplatData = true;\n                        }\n\n                        const shDescriptor = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree];\n                        const splatBufferSizeBytes = splatDataOffsetBytes + shDescriptor.BytesPerSplat * maxSplatCount;\n                        streamBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n                        SplatBuffer.writeHeaderToBuffer({\n                            versionMajor: SplatBuffer.CurrentMajorVersion,\n                            versionMinor: SplatBuffer.CurrentMinorVersion,\n                            maxSectionCount: sectionCount,\n                            sectionCount: sectionCount,\n                            maxSplatCount: maxSplatCount,\n                            splatCount: splatCount,\n                            compressionLevel: 0,\n                            sceneCenter: new THREE.Vector3()\n                        }, streamBufferOut);\n\n                        numBytesStreamed = header.headerSizeBytes;\n                        numBytesParsed = header.headerSizeBytes;\n                        headerLoaded = true;\n                    }\n                } else if (compressed && !readyToLoadSplatData) {\n                    const sizeRequiredForHeaderAndChunks = header.headerSizeBytes + header.chunkElement.storageSizeBytes;\n                    compressedPlyHeaderChunksBuffer = storeChunksInBuffer(chunks, compressedPlyHeaderChunksBuffer);\n                    if (compressedPlyHeaderChunksBuffer.byteLength >= sizeRequiredForHeaderAndChunks) {\n                        CompressedPlyParser.readElementData(header.chunkElement, compressedPlyHeaderChunksBuffer, header.headerSizeBytes);\n                        numBytesStreamed = sizeRequiredForHeaderAndChunks;\n                        numBytesParsed = sizeRequiredForHeaderAndChunks;\n                        readyToLoadSplatData = true;\n                    }\n                }\n\n                if (headerLoaded && readyToLoadSplatData) {\n\n                    if (chunks.length > 0) {\n\n                        streamBufferIn = storeChunksInBuffer(chunks, streamBufferIn);\n\n                        const bytesLoadedSinceLastStreamedSection = numBytesDownloaded - numBytesStreamed;\n                        if (bytesLoadedSinceLastStreamedSection > streamedSectionSizeBytes || loadComplete) {\n                            const numBytesToProcess = numBytesDownloaded - numBytesParsed;\n                            const addedSplatCount = Math.floor(numBytesToProcess / header.bytesPerSplat);\n                            const numBytesToParse = addedSplatCount * header.bytesPerSplat;\n                            const numBytesLeftOver = numBytesToProcess - numBytesToParse;\n                            const newSplatCount = splatCount + addedSplatCount;\n                            const parsedDataViewOffset = numBytesParsed - chunks[0].startBytes;\n                            const dataToParse = new DataView(streamBufferIn, parsedDataViewOffset, numBytesToParse);\n\n                            const shDescriptor = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree];\n                            const outOffset = splatCount * shDescriptor.BytesPerSplat + splatDataOffsetBytes;\n\n                            if (compressed) {\n                                CompressedPlyParser.parseToUncompressedSplatBufferSection(header.chunkElement, header.vertexElement, 0,\n                                                                                          addedSplatCount - 1, splatCount,\n                                                                                          dataToParse, 0, streamBufferOut, outOffset);\n                            } else {\n                                PlyParser.parseToUncompressedSplatBufferSection(header, 0, addedSplatCount - 1, dataToParse, 0,\n                                                                                streamBufferOut, outOffset, outSphericalHarmonicsDegree);\n                            }\n\n                            splatCount = newSplatCount;\n                            if (!streamedSplatBuffer) {\n                                SplatBuffer.writeSectionHeaderToBuffer({\n                                    maxSplatCount: maxSplatCount,\n                                    splatCount: splatCount,\n                                    bucketSize: 0,\n                                    bucketCount: 0,\n                                    bucketBlockSize: 0,\n                                    compressionScaleRange: 0,\n                                    storageSizeBytes: 0,\n                                    fullBucketCount: 0,\n                                    partiallyFilledBucketCount: 0,\n                                    sphericalHarmonicsDegree: outSphericalHarmonicsDegree\n                                }, 0, streamBufferOut, SplatBuffer.HeaderSizeBytes);\n                                streamedSplatBuffer = new SplatBuffer(streamBufferOut, false);\n                            }\n                            streamedSplatBuffer.updateLoadedCounts(1, splatCount);\n                            onStreamedSectionProgress(streamedSplatBuffer, loadComplete);\n                            numBytesStreamed += streamedSectionSizeBytes;\n                            numBytesParsed += numBytesToParse;\n\n                            if (numBytesLeftOver === 0) {\n                                chunks = [];\n                            } else {\n                                let keepChunks = [];\n                                let keepSize = 0;\n                                for (let i = chunks.length - 1; i >= 0; i--) {\n                                    const chunk = chunks[i];\n                                    keepSize += chunk.sizeBytes;\n                                    keepChunks.unshift(chunk);\n                                    if (keepSize >= numBytesLeftOver) break;\n                                }\n                                chunks = keepChunks;\n                            }\n                        }\n                    }\n\n                    if (loadComplete) {\n                        streamLoadCompleteResolver(streamedSplatBuffer);\n                    }\n                }\n\n            }\n            if (onProgress) onProgress(percent, percentLabel, LoaderStatus.Downloading);\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, !streamLoadData).then((plyFileData) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = streamLoadData ? streamLoadPromise :\n                                PlyLoader.loadFromFileData(plyFileData, minimumAlpha, compressionLevel, outSphericalHarmonicsDegree,\n                                                           sectionSize, sceneCenter, blockSize, bucketSize);\n            return loadPromise.then((splatBuffer) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(plyFileData, minimumAlpha, compressionLevel, outSphericalHarmonicsDegree = 0,\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\n        return delayedExecute(() => {\n            return PlyParser.parseToUncompressedSplatArray(plyFileData, outSphericalHarmonicsDegree);\n        })\n        .then((splatArray) => {\n            const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel, sectionSize,\n                                                                                   sceneCenter, blockSize, bucketSize);\n            return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\n        });\n    }\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\n\nexport class SplatParser {\n\n    static RowSizeBytes = 32;\n    static CenterSizeBytes = 12;\n    static ScaleSizeBytes = 12;\n    static RotationSizeBytes = 4;\n    static ColorSizeBytes = 4;\n\n    static parseToUncompressedSplatBufferSection(fromSplat, toSplat, fromBuffer, fromOffset, toBuffer, toOffset) {\n\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\n\n        for (let i = fromSplat; i <= toSplat; i++) {\n            const inBase = i * SplatParser.RowSizeBytes + fromOffset;\n            const inCenter = new Float32Array(fromBuffer, inBase, 3);\n            const inScale = new Float32Array(fromBuffer, inBase + SplatParser.CenterSizeBytes, 3);\n            const inColor = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes +\n                                              SplatParser.RotationSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            const outBase = i * outBytesPerSplat + toOffset;\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\n\n            outCenter[0] = inCenter[0];\n            outCenter[1] = inCenter[1];\n            outCenter[2] = inCenter[2];\n\n            outScale[0] = inScale[0];\n            outScale[1] = inScale[1];\n            outScale[2] = inScale[2];\n\n            outRotation[0] = quat.w;\n            outRotation[1] = quat.x;\n            outRotation[2] = quat.y;\n            outRotation[3] = quat.z;\n\n            outColor[0] = inColor[0];\n            outColor[1] = inColor[1];\n            outColor[2] = inColor[2];\n            outColor[3] = inColor[3];\n        }\n    }\n\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\n        // Standard .splat row layout:\n        // XYZ - Position (Float32)\n        // XYZ - Scale (Float32)\n        // RGBA - colors (uint8)\n        // IJKL - quaternion/rot (uint8)\n\n        const splatCount = inBuffer.byteLength / SplatParser.RowSizeBytes;\n\n        const splatArray = new UncompressedSplatArray();\n\n        for (let i = 0; i < splatCount; i++) {\n            const inBase = i * SplatParser.RowSizeBytes;\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\n            const inScale = new Float32Array(inBuffer, inBase + SplatParser.CenterSizeBytes, 3);\n            const inColor = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes +\n                                              SplatParser.ScaleSizeBytes + SplatParser.ColorSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            splatArray.addSplatFromComonents(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\n                                             quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\n        }\n\n        return splatArray;\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { SplatParser } from './SplatParser.js';\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { Constants } from '../../Constants.js';\n\nexport class SplatLoader {\n\n    static loadFromURL(fileName, onProgress, streamLoadData, onStreamedSectionProgress, minimumAlpha, compressionLevel,\n                       optimizeSplatData, sectionSize, sceneCenter, blockSize, bucketSize) {\n\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n        const streamSectionSizeBytes = Constants.StreamingSectionSize;\n        const sectionCount = 1;\n\n        let streamBufferIn;\n        let streamBufferOut;\n        let streamSplatBuffer;\n        let maxSplatCount = 0;\n        let splatCount = 0;\n\n        let streamLoadCompleteResolver;\n        let streamLoadPromise = new Promise((resolve) => {\n            streamLoadCompleteResolver = resolve;\n        });\n\n        let numBytesStreamed = 0;\n        let numBytesLoaded = 0;\n        let chunks = [];\n\n        const localOnProgress = (percent, percentStr, chunk, fileSize) => {\n            const loadComplete = percent >= 100;\n            if (!fileSize) streamLoadData = false;\n            if (streamLoadData) {\n                if (!streamBufferIn) {\n                    maxSplatCount = fileSize / SplatParser.RowSizeBytes;\n                    streamBufferIn = new ArrayBuffer(fileSize);\n                    const bytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\n                    const splatBufferSizeBytes = splatDataOffsetBytes + bytesPerSplat * maxSplatCount;\n                    streamBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n                    SplatBuffer.writeHeaderToBuffer({\n                        versionMajor: SplatBuffer.CurrentMajorVersion,\n                        versionMinor: SplatBuffer.CurrentMinorVersion,\n                        maxSectionCount: sectionCount,\n                        sectionCount: sectionCount,\n                        maxSplatCount: maxSplatCount,\n                        splatCount: splatCount,\n                        compressionLevel: 0,\n                        sceneCenter: new THREE.Vector3()\n                    }, streamBufferOut);\n                }\n\n                if (chunk) {\n                    chunks.push(chunk);\n                    new Uint8Array(streamBufferIn, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\n                    numBytesLoaded += chunk.byteLength;\n\n                    const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\n                    if (bytesLoadedSinceLastSection > streamSectionSizeBytes || loadComplete) {\n                        const bytesToUpdate = loadComplete ? bytesLoadedSinceLastSection : streamSectionSizeBytes;\n                        const addedSplatCount = bytesToUpdate / SplatParser.RowSizeBytes;\n                        const newSplatCount = splatCount + addedSplatCount;\n                        SplatParser.parseToUncompressedSplatBufferSection(splatCount, newSplatCount - 1, streamBufferIn, 0,\n                                                                          streamBufferOut, splatDataOffsetBytes);\n                        splatCount = newSplatCount;\n                        if (!streamSplatBuffer) {\n                            SplatBuffer.writeSectionHeaderToBuffer({\n                                maxSplatCount: maxSplatCount,\n                                splatCount: splatCount,\n                                bucketSize: 0,\n                                bucketCount: 0,\n                                bucketBlockSize: 0,\n                                compressionScaleRange: 0,\n                                storageSizeBytes: 0,\n                                fullBucketCount: 0,\n                                partiallyFilledBucketCount: 0\n                            }, 0, streamBufferOut, SplatBuffer.HeaderSizeBytes);\n                            streamSplatBuffer = new SplatBuffer(streamBufferOut, false);\n                        }\n                        streamSplatBuffer.updateLoadedCounts(1, splatCount);\n                        onStreamedSectionProgress(streamSplatBuffer, loadComplete);\n                        numBytesStreamed += streamSectionSizeBytes;\n                    }\n                }\n                if (loadComplete) {\n                    streamLoadCompleteResolver(streamSplatBuffer);\n                }\n            }\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\n            return streamLoadData;\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, true).then((fullBuffer) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = streamLoadData ? streamLoadPromise :\n                SplatLoader.loadFromFileData(fullBuffer, minimumAlpha, compressionLevel, optimizeSplatData,\n                                             sectionSize, sceneCenter, blockSize, bucketSize);\n            return loadPromise.then((splatBuffer) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(splatFileData, minimumAlpha, compressionLevel, optimizeSplatData,\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\n        return delayedExecute(() => {\n            const splatArray = SplatParser.parseStandardSplatToUncompressedSplatArray(splatFileData);\n            if (optimizeSplatData) {\n                const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\n                                                                                       sectionSize, sceneCenter, blockSize,\n                                                                                       bucketSize);\n                return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\n            } else {\n                return SplatBuffer.generateFromUncompressedSplatArrays([splatArray], minimumAlpha, 0, new THREE.Vector3());\n            }\n        });\n    }\n\n}\n","import { SplatBuffer } from '../SplatBuffer.js';\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { Constants } from '../../Constants.js';\n\nexport class KSplatLoader {\n\n   static checkVersion(buffer) {\n        const minVersionMajor = SplatBuffer.CurrentMajorVersion;\n        const minVersionMinor = SplatBuffer.CurrentMinorVersion;\n        const header = SplatBuffer.parseHeader(buffer);\n        if (header.versionMajor === minVersionMajor &&\n            header.versionMinor >= minVersionMinor ||\n            header.versionMajor > minVersionMajor) {\n           return true;\n        } else {\n            throw new Error(`KSplat version not supported: v${header.versionMajor}.${header.versionMinor}. ` +\n                            `Minimum required: v${minVersionMajor}.${minVersionMinor}`);\n        }\n    };\n\n    static loadFromURL(fileName, onProgress, streamLoadData, onSectionBuilt) {\n        let streamBuffer;\n        let streamSplatBuffer;\n\n        let headerBuffer;\n        let header;\n        let headerLoaded = false;\n        let headerLoading = false;\n\n        let sectionHeadersBuffer;\n        let sectionHeaders = [];\n        let sectionHeadersLoaded = false;\n        let sectionHeadersLoading = false;\n\n        let numBytesLoaded = 0;\n        let numBytesStreamed = 0;\n        let streamSectionSizeBytes = Constants.StreamingSectionSize;\n        let totalBytesToDownload = 0;\n\n        let loadComplete = false;\n\n        let chunks = [];\n\n        let streamLoadCompleteResolver;\n        let streamLoadPromise = new Promise((resolve) => {\n            streamLoadCompleteResolver = resolve;\n        });\n\n        const checkAndLoadHeader = () => {\n            if (!headerLoaded && !headerLoading && numBytesLoaded >= SplatBuffer.HeaderSizeBytes) {\n                headerLoading = true;\n                const headerAssemblyPromise = new Blob(chunks).arrayBuffer();\n                headerAssemblyPromise.then((bufferData) => {\n                    headerBuffer = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n                    new Uint8Array(headerBuffer).set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\n                    KSplatLoader.checkVersion(headerBuffer);\n                    headerLoading = false;\n                    headerLoaded = true;\n                    header = SplatBuffer.parseHeader(headerBuffer);\n                    window.setTimeout(() => {\n                        checkAndLoadSectionHeaders();\n                    }, 1);\n                });\n            }\n        };\n\n        let queuedCheckAndLoadSectionsCount = 0;\n        const queueCheckAndLoadSections = () => {\n            if (queuedCheckAndLoadSectionsCount === 0) {\n                queuedCheckAndLoadSectionsCount++;\n                window.setTimeout(() => {\n                    queuedCheckAndLoadSectionsCount--;\n                    checkAndLoadSections(true);\n                }, 1);\n            }\n        };\n\n        const checkAndLoadSectionHeaders = () => {\n            const performLoad = () => {\n                sectionHeadersLoading = true;\n                const sectionHeadersAssemblyPromise = new Blob(chunks).arrayBuffer();\n                sectionHeadersAssemblyPromise.then((bufferData) => {\n                    sectionHeadersLoading = false;\n                    sectionHeadersLoaded = true;\n                    sectionHeadersBuffer = new ArrayBuffer(header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes);\n                    new Uint8Array(sectionHeadersBuffer).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes,\n                                                                            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes));\n                    sectionHeaders = SplatBuffer.parseSectionHeaders(header, sectionHeadersBuffer, 0, false);\n                    let totalSectionStorageStorageByes = 0;\n                    for (let i = 0; i < header.maxSectionCount; i++) {\n                        totalSectionStorageStorageByes += sectionHeaders[i].storageSizeBytes;\n                    }\n                    const totalStorageSizeBytes = SplatBuffer.HeaderSizeBytes + header.maxSectionCount *\n                                                  SplatBuffer.SectionHeaderSizeBytes + totalSectionStorageStorageByes;\n                    if (!streamBuffer) {\n                        streamBuffer = new ArrayBuffer(totalStorageSizeBytes);\n                        let offset = 0;\n                        for (let i = 0; i < chunks.length; i++) {\n                            const chunk = chunks[i];\n                            new Uint8Array(streamBuffer, offset, chunk.byteLength).set(new Uint8Array(chunk));\n                            offset += chunk.byteLength;\n                        }\n                    }\n\n                    totalBytesToDownload = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n                    for (let i = 0; i <= sectionHeaders.length && i < header.maxSectionCount; i++) {\n                        totalBytesToDownload += sectionHeaders[i].storageSizeBytes;\n                    }\n\n                    queueCheckAndLoadSections();\n                });\n            };\n\n            if (!sectionHeadersLoading && !sectionHeadersLoaded && headerLoaded &&\n                numBytesLoaded >= SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount) {\n                performLoad();\n            }\n        };\n\n        const checkAndLoadSections = () => {\n            if (sectionHeadersLoaded) {\n\n                if (loadComplete) return;\n\n                loadComplete = numBytesLoaded >= totalBytesToDownload;\n\n                const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\n                if (bytesLoadedSinceLastSection > streamSectionSizeBytes || loadComplete) {\n\n                    numBytesStreamed = numBytesLoaded;\n\n                    if (!streamSplatBuffer) streamSplatBuffer = new SplatBuffer(streamBuffer, false);\n\n                    const baseDataOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n                    let sectionBase = 0;\n                    let reachedSections = 0;\n                    let loadedSplatCount = 0;\n                    for (let i = 0; i < header.maxSectionCount; i++) {\n                        const sectionHeader = sectionHeaders[i];\n                        const bucketsDataOffset = sectionBase + sectionHeader.partiallyFilledBucketCount * 4 +\n                                                  sectionHeader.bucketStorageSizeBytes * sectionHeader.bucketCount;\n                        const bytesRequiredToReachSectionSplatData = baseDataOffset + bucketsDataOffset;\n                        if (numBytesLoaded >= bytesRequiredToReachSectionSplatData) {\n                            reachedSections++;\n                            const bytesPastSSectionSplatDataStart = numBytesLoaded - bytesRequiredToReachSectionSplatData;\n                            const baseDescriptor = SplatBuffer.CompressionLevels[header.compressionLevel];\n                            const shDesc = baseDescriptor.SphericalHarmonicsDegrees[sectionHeader.sphericalHarmonicsDegree];\n                            const bytesPerSplat = shDesc.BytesPerSplat;\n                            let loadedSplatsForSection = Math.floor(bytesPastSSectionSplatDataStart / bytesPerSplat);\n                            loadedSplatsForSection = Math.min(loadedSplatsForSection, sectionHeader.maxSplatCount);\n                            loadedSplatCount += loadedSplatsForSection;\n                            streamSplatBuffer.updateLoadedCounts(reachedSections, loadedSplatCount);\n                            streamSplatBuffer.updateSectionLoadedCounts(i, loadedSplatsForSection);\n                        } else {\n                            break;\n                        }\n                        sectionBase += sectionHeader.storageSizeBytes;\n                    }\n\n                    onSectionBuilt(streamSplatBuffer, loadComplete);\n\n                    if (loadComplete) {\n                        streamLoadCompleteResolver(streamSplatBuffer);\n                    }\n                }\n            }\n        };\n\n        const localOnProgress = (percent, percentStr, chunk) => {\n            if (chunk) {\n                chunks.push(chunk);\n                if (streamBuffer) {\n                    new Uint8Array(streamBuffer, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\n                }\n                numBytesLoaded += chunk.byteLength;\n            }\n            if (streamLoadData) {\n                checkAndLoadHeader();\n                checkAndLoadSectionHeaders();\n                checkAndLoadSections();\n            }\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, !streamLoadData).then((fullBuffer) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = streamLoadData ? streamLoadPromise : KSplatLoader.loadFromFileData(fullBuffer);\n            return loadPromise.then((splatBuffer) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(fileData) {\n        return delayedExecute(() => {\n            KSplatLoader.checkVersion(fileData);\n            return new SplatBuffer(fileData);\n        });\n    }\n\n    static downloadFile = function() {\n\n        let downLoadLink;\n\n        return function(splatBuffer, fileName) {\n            const blob = new Blob([splatBuffer.bufferData], {\n                type: 'application/octet-stream',\n            });\n\n            if (!downLoadLink) {\n                downLoadLink = document.createElement('a');\n                document.body.appendChild(downLoadLink);\n            }\n            downLoadLink.download = fileName;\n            downLoadLink.href = URL.createObjectURL(blob);\n            downLoadLink.click();\n        };\n\n    }();\n\n}\n","export const SceneFormat = {\n    'Splat': 0,\n    'KSplat': 1,\n    'Ply': 2\n};\n","import { SceneFormat } from './SceneFormat.js';\n\nexport const sceneFormatFromPath = (path) => {\n    if (path.endsWith('.ply')) return SceneFormat.Ply;\n    else if (path.endsWith('.splat')) return SceneFormat.Splat;\n    else if (path.endsWith('.ksplat')) return SceneFormat.KSplat;\n    return null;\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nimport {\n    EventDispatcher,\n    MOUSE,\n    Quaternion,\n    Spherical,\n    TOUCH,\n    Vector2,\n    Vector3,\n    Plane,\n    Ray,\n    MathUtils\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nclass OrbitControls extends EventDispatcher {\n\n    constructor( object, domElement ) {\n\n        super();\n\n        this.object = object;\n        this.domElement = domElement;\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n        // Set to false to disable this control\n        this.enabled = true;\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3();\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0.7;\n        this.maxDistance = 2;\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = Math.PI / 2; // radians (Fixed at 90 degrees for horizontal view)\n        this.maxPolarAngle = Math.PI / 2; // radians (Fixed at 90 degrees for horizontal view)\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n        this.minAzimuthAngle = - Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = true;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n        // The four arrow keys\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\n\n        // Mouse buttons\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n        // Touch fingers\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n\n        //\n        // public methods\n        //\n\n        this.getPolarAngle = function() {\n\n            return spherical.phi;\n\n        };\n\n        this.getAzimuthalAngle = function() {\n\n            return spherical.theta;\n\n        };\n\n        this.getDistance = function() {\n\n            return this.object.position.distanceTo( this.target );\n\n        };\n\n        this.listenToKeyEvents = function( domElement ) {\n\n            domElement.addEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = domElement;\n\n        };\n\n        this.stopListenToKeyEvents = function() {\n\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = null;\n\n        };\n\n        this.saveState = function() {\n\n            scope.target0.copy( scope.target );\n            scope.position0.copy( scope.object.position );\n            scope.zoom0 = scope.object.zoom;\n\n        };\n\n        this.reset = function() {\n\n            scope.target.copy( scope.target0 );\n            scope.object.position.copy( scope.position0 );\n            scope.object.zoom = scope.zoom0;\n            this.clearDampedRotation();\n            this.clearDampedPan();\n\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent( _changeEvent );\n\n            scope.update();\n\n            state = STATE.NONE;\n\n        };\n\n        this.clearDampedRotation = function() {\n            sphericalDelta.theta = 0.0;\n            sphericalDelta.phi = 0.0;\n        };\n\n        this.clearDampedPan = function() {\n            panOffset.set(0, 0, 0);\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        this.update = function() {\n\n            const offset = new Vector3();\n\n            // so camera.up is the orbit axis\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n            const quatInverse = quat.clone().invert();\n\n            const lastPosition = new Vector3();\n            const lastQuaternion = new Quaternion();\n            const lastTargetPosition = new Vector3();\n\n            const twoPI = 2 * Math.PI;\n\n            return function update() {\n\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n                quatInverse.copy(quat).invert();\n\n                const position = scope.object.position;\n\n                offset.copy( position ).sub( scope.target );\n\n                // rotate offset to \"y-axis-is-up\" space\n                offset.applyQuaternion( quat );\n\n                // angle from z-axis around y-axis\n                spherical.setFromVector3( offset );\n\n                if ( scope.autoRotate && state === STATE.NONE ) {\n\n                    rotateLeft( getAutoRotationAngle() );\n\n                }\n\n                if ( scope.enableDamping ) {\n\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n                } else {\n\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n\n                }\n\n                // restrict theta to be between desired limits\n\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n\n                if ( isFinite( min ) && isFinite( max ) ) {\n\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n                    if ( min <= max ) {\n\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n                    } else {\n\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n                            Math.max( min, spherical.theta ) :\n                            Math.min( max, spherical.theta );\n\n                    }\n\n                }\n\n                // restrict phi to be between desired limits\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n                // Force stop vertical rotation if limits are hit\n                if ( spherical.phi <= scope.minPolarAngle || spherical.phi >= scope.maxPolarAngle ) {\n                    sphericalDelta.phi = 0;\n                }\n\n                spherical.makeSafe();\n\n\n                // move target to panned location\n\n                if ( scope.enableDamping === true ) {\n\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n                } else {\n\n                    scope.target.add( panOffset );\n\n                }\n\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n                // we adjust zoom later in these cases\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\n\n                    spherical.radius = clampDistance( spherical.radius );\n\n                } else {\n\n                    spherical.radius = clampDistance( spherical.radius * scale );\n\n                }\n\n\n                offset.setFromSpherical( spherical );\n\n                // rotate offset back to \"camera-up-vector-is-up\" space\n                offset.applyQuaternion( quatInverse );\n\n                position.copy( scope.target ).add( offset );\n\n                scope.object.lookAt( scope.target );\n\n                if ( scope.enableDamping === true ) {\n\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n                } else {\n\n                    sphericalDelta.set( 0, 0, 0 );\n\n                    panOffset.set( 0, 0, 0 );\n\n                }\n\n                // adjust camera position\n                let zoomChanged = false;\n                if ( scope.zoomToCursor && performCursorZoom ) {\n\n                    let newRadius = null;\n                    if ( scope.object.isPerspectiveCamera ) {\n\n                        // move the camera down the pointer ray\n                        // this method avoids floating point error\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance( prevRadius * scale );\n\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\n                        scope.object.updateMatrixWorld();\n\n                    } else if ( scope.object.isOrthographicCamera ) {\n\n                        // adjust the ortho camera position based on zoom changes\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseBefore.unproject( scope.object );\n\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseAfter.unproject( scope.object );\n\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\n                        scope.object.updateMatrixWorld();\n\n                        newRadius = offset.length();\n\n                    } else {\n\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n                        scope.zoomToCursor = false;\n\n                    }\n\n                    // handle the placement of the target\n                    if ( newRadius !== null ) {\n\n                        if ( this.screenSpacePanning ) {\n\n                            // position the orbit target in front of the new camera position\n                            scope.target.set( 0, 0, - 1 )\n                                .transformDirection( scope.object.matrix )\n                                .multiplyScalar( newRadius )\n                                .add( scope.object.position );\n\n                        } else {\n\n                            // get the ray and translation plane to compute target\n                            _ray.origin.copy( scope.object.position );\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\n\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                            // extremely large values\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\n\n                                object.lookAt( scope.target );\n\n                            } else {\n\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\n                                _ray.intersectPlane( _plane, scope.target );\n\n                            }\n\n                        }\n\n                    }\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                    scope.object.updateProjectionMatrix();\n                    zoomChanged = true;\n\n                }\n\n                scale = 1;\n                performCursorZoom = false;\n\n                // update condition is:\n                // min(camera displacement, camera rotation in radians)^2 > EPS\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n                if ( zoomChanged ||\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\n\n                    scope.dispatchEvent( _changeEvent );\n\n                    lastPosition.copy( scope.object.position );\n                    lastQuaternion.copy( scope.object.quaternion );\n                    lastTargetPosition.copy( scope.target );\n\n                    zoomChanged = false;\n\n                    return true;\n\n                }\n\n                return false;\n\n            };\n\n        }();\n\n        this.dispose = function() {\n\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n            if ( scope._domElementKeyEvents !== null ) {\n\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n                scope._domElementKeyEvents = null;\n\n            }\n\n        };\n\n        //\n        // internals\n        //\n\n        const scope = this;\n\n        const STATE = {\n            NONE: - 1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n\n        let state = STATE.NONE;\n\n        const EPS = 0.000001;\n\n        // current position in spherical coordinates\n        const spherical = new Spherical();\n        const sphericalDelta = new Spherical();\n\n        let scale = 1;\n        const panOffset = new Vector3();\n\n        const rotateStart = new Vector2();\n        const rotateEnd = new Vector2();\n        const rotateDelta = new Vector2();\n\n        const panStart = new Vector2();\n        const panEnd = new Vector2();\n        const panDelta = new Vector2();\n\n        const dollyStart = new Vector2();\n        const dollyEnd = new Vector2();\n        const dollyDelta = new Vector2();\n\n        const dollyDirection = new Vector3();\n        const mouse = new Vector2();\n        let performCursorZoom = false;\n\n        const pointers = [];\n        const pointerPositions = {};\n\n        function getAutoRotationAngle() {\n\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n        }\n\n        function getZoomScale() {\n\n            return Math.pow( 0.95, scope.zoomSpeed );\n\n        }\n\n        function rotateLeft( angle ) {\n\n            sphericalDelta.theta -= angle;\n\n        }\n\n        function rotateUp( angle ) {\n\n            sphericalDelta.phi -= angle;\n\n        }\n\n        const panLeft = function() {\n\n            const v = new Vector3();\n\n            return function panLeft( distance, objectMatrix ) {\n\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n                v.multiplyScalar( - distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        const panUp = function() {\n\n            const v = new Vector3();\n\n            return function panUp( distance, objectMatrix ) {\n\n                if ( scope.screenSpacePanning === true ) {\n\n                    v.setFromMatrixColumn( objectMatrix, 1 );\n\n                } else {\n\n                    v.setFromMatrixColumn( objectMatrix, 0 );\n                    v.crossVectors( scope.object.up, v );\n\n                }\n\n                v.multiplyScalar( distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        const pan = function() {\n\n            const offset = new Vector3();\n\n            return function pan( deltaX, deltaY ) {\n\n                const element = scope.domElement;\n\n                if ( scope.object.isPerspectiveCamera ) {\n\n                    // perspective\n                    const position = scope.object.position;\n                    offset.copy( position ).sub( scope.target );\n                    let targetDistance = offset.length();\n\n                    // half of the fov is center to top of screen\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n                    // we use only clientHeight here so aspect ratio does not distort speed\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    // orthographic\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\n                                      element.clientHeight, scope.object.matrix );\n\n                } else {\n\n                    // camera neither orthographic nor perspective\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n                    scope.enablePan = false;\n\n                }\n\n            };\n\n        }();\n\n        function dollyOut( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale /= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function dollyIn( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale *= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function updateMouseParameters( event ) {\n\n            if ( ! scope.zoomToCursor ) {\n\n                return;\n\n            }\n\n            performCursorZoom = true;\n\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n\n            mouse.x = ( x / w ) * 2 - 1;\n            mouse.y = - ( y / h ) * 2 + 1;\n\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\n\n        }\n\n        function clampDistance( dist ) {\n\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\n\n        }\n\n        //\n        // event callbacks - update the object state\n        //\n\n        function handleMouseDownRotate( event ) {\n\n            rotateStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownDolly( event ) {\n\n            updateMouseParameters( event );\n            dollyStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownPan( event ) {\n\n            panStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseMoveRotate( event ) {\n\n            rotateEnd.set( event.clientX, event.clientY );\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMoveDolly( event ) {\n\n            dollyEnd.set( event.clientX, event.clientY );\n\n            dollyDelta.subVectors( dollyEnd, dollyStart );\n\n            if ( dollyDelta.y > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            } else if ( dollyDelta.y < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            }\n\n            dollyStart.copy( dollyEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMovePan( event ) {\n\n            panEnd.set( event.clientX, event.clientY );\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseWheel( event ) {\n\n            updateMouseParameters( event );\n\n            if ( event.deltaY < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            } else if ( event.deltaY > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            }\n\n            scope.update();\n\n        }\n\n        function handleKeyDown( event ) {\n\n            let needsUpdate = false;\n\n            switch ( event.code ) {\n\n                case scope.keys.UP:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.BOTTOM:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, - scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.LEFT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.RIGHT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( - scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n            }\n\n            if ( needsUpdate ) {\n\n                // prevent the browser from scrolling on cursor keys\n                event.preventDefault();\n\n                scope.update();\n\n            }\n\n\n        }\n\n        function handleTouchStartRotate() {\n\n            if ( pointers.length === 1 ) {\n\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                rotateStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartPan() {\n\n            if ( pointers.length === 1 ) {\n\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                panStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartDolly() {\n\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyStart.set( 0, distance );\n\n        }\n\n        function handleTouchStartDollyPan() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enablePan ) handleTouchStartPan();\n\n        }\n\n        function handleTouchStartDollyRotate() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enableRotate ) handleTouchStartRotate();\n\n        }\n\n        function handleTouchMoveRotate( event ) {\n\n            if ( pointers.length == 1 ) {\n\n                rotateEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                rotateEnd.set( x, y );\n\n            }\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n        }\n\n        function handleTouchMovePan( event ) {\n\n            if ( pointers.length === 1 ) {\n\n                panEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                panEnd.set( x, y );\n\n            }\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n        }\n\n        function handleTouchMoveDolly( event ) {\n\n            const position = getSecondPointerPosition( event );\n\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyEnd.set( 0, distance );\n\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n            dollyOut( dollyDelta.y );\n\n            dollyStart.copy( dollyEnd );\n\n        }\n\n        function handleTouchMoveDollyPan( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enablePan ) handleTouchMovePan( event );\n\n        }\n\n        function handleTouchMoveDollyRotate( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        function onPointerDown( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.setPointerCapture( event.pointerId );\n\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            //\n\n            addPointer( event );\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchStart( event );\n\n            } else {\n\n                onMouseDown( event );\n\n            }\n\n        }\n\n        function onPointerMove( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchMove( event );\n\n            } else {\n\n                onMouseMove( event );\n\n            }\n\n        }\n\n        function onPointerUp( event ) {\n\n            removePointer( event );\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.releasePointerCapture( event.pointerId );\n\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function onMouseDown( event ) {\n\n            let mouseAction;\n\n            switch ( event.button ) {\n\n                case 0:\n\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n\n                case 1:\n\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n\n                case 2:\n\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n\n                default:\n\n                    mouseAction = - 1;\n\n            }\n\n            switch ( mouseAction ) {\n\n                case MOUSE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseDownDolly( event );\n\n                    state = STATE.DOLLY;\n\n                    break;\n\n                case MOUSE.ROTATE:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    } else {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    }\n\n                    break;\n\n                case MOUSE.PAN:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    } else {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onMouseMove( event ) {\n\n            switch ( state ) {\n\n                case STATE.ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleMouseMoveRotate( event );\n\n                    break;\n\n                case STATE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseMoveDolly( event );\n\n                    break;\n\n                case STATE.PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleMouseMovePan( event );\n\n                    break;\n\n            }\n\n        }\n\n        function onMouseWheel( event ) {\n\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n            event.preventDefault();\n\n            scope.dispatchEvent( _startEvent );\n\n            handleMouseWheel( event );\n\n            scope.dispatchEvent( _endEvent );\n\n        }\n\n        function onKeyDown( event ) {\n\n            if ( scope.enabled === false || scope.enablePan === false ) return;\n\n            handleKeyDown( event );\n\n        }\n\n        function onTouchStart( event ) {\n\n            trackPointer( event );\n\n            switch ( pointers.length ) {\n\n                case 1:\n\n                    switch ( scope.touches.ONE ) {\n\n                        case TOUCH.ROTATE:\n\n                            if ( scope.enableRotate === false ) return;\n\n                            handleTouchStartRotate();\n\n                            state = STATE.TOUCH_ROTATE;\n\n                            break;\n\n                        case TOUCH.PAN:\n\n                            if ( scope.enablePan === false ) return;\n\n                            handleTouchStartPan();\n\n                            state = STATE.TOUCH_PAN;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                case 2:\n\n                    switch ( scope.touches.TWO ) {\n\n                        case TOUCH.DOLLY_PAN:\n\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                            handleTouchStartDollyPan();\n\n                            state = STATE.TOUCH_DOLLY_PAN;\n\n                            break;\n\n                        case TOUCH.DOLLY_ROTATE:\n\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                            handleTouchStartDollyRotate();\n\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onTouchMove( event ) {\n\n            trackPointer( event );\n\n            switch ( state ) {\n\n                case STATE.TOUCH_ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleTouchMoveRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleTouchMovePan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_PAN:\n\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                    handleTouchMoveDollyPan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_ROTATE:\n\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                    handleTouchMoveDollyRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n        }\n\n        function onContextMenu( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            event.preventDefault();\n\n        }\n\n        function addPointer( event ) {\n\n            pointers.push( event );\n\n        }\n\n        function removePointer( event ) {\n\n            delete pointerPositions[event.pointerId];\n\n            for ( let i = 0; i < pointers.length; i ++ ) {\n\n                if ( pointers[i].pointerId == event.pointerId ) {\n\n                    pointers.splice( i, 1 );\n                    return;\n\n                }\n\n            }\n\n        }\n\n        function trackPointer( event ) {\n\n            let position = pointerPositions[event.pointerId];\n\n            if ( position === undefined ) {\n\n                position = new Vector2();\n                pointerPositions[event.pointerId] = position;\n\n            }\n\n            position.set( event.pageX, event.pageY );\n\n        }\n\n        function getSecondPointerPosition( event ) {\n\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\n\n            return pointerPositions[pointer.pointerId];\n\n        }\n\n        //\n\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n        // force an update at start\n\n        this.update();\n\n    }\n\n}\n\nexport { OrbitControls };","import { fadeElement } from './Util.js';\n\nconst STANDARD_FADE_DURATION = 500;\n\nexport class LoadingSpinner {\n\n    static elementIDGen = 0;\n\n    constructor(message, container) {\n\n        this.taskIDGen = 0;\n        this.elementID = LoadingSpinner.elementIDGen++;\n\n        this.tasks = [];\n\n        this.message = message || 'Loading...';\n        this.container = container || document.body;\n\n        this.spinnerContainerOuter = document.createElement('div');\n        this.spinnerContainerOuter.className = `spinnerOuterContainer${this.elementID}`;\n        this.spinnerContainerOuter.style.display = 'none';\n\n        this.spinnerContainerPrimary = document.createElement('div');\n        this.spinnerContainerPrimary.className = `spinnerContainerPrimary${this.elementID}`;\n        this.spinnerPrimary = document.createElement('div');\n        this.spinnerPrimary.classList.add(`spinner${this.elementID}`, `spinnerPrimary${this.elementID}`);\n        this.messageContainerPrimary = document.createElement('div');\n        this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`, `messageContainerPrimary${this.elementID}`);\n        this.messageContainerPrimary.innerHTML = this.message;\n\n        this.spinnerContainerMin = document.createElement('div');\n        this.spinnerContainerMin.className = `spinnerContainerMin${this.elementID}`;\n        this.spinnerMin = document.createElement('div');\n        this.spinnerMin.classList.add(`spinner${this.elementID}`, `spinnerMin${this.elementID}`);\n        this.messageContainerMin = document.createElement('div');\n        this.messageContainerMin.classList.add(`messageContainer${this.elementID}`, `messageContainerMin${this.elementID}`);\n        this.messageContainerMin.innerHTML = this.message;\n\n        this.spinnerContainerPrimary.appendChild(this.spinnerPrimary);\n        this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary);\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary);\n\n        this.spinnerContainerMin.appendChild(this.spinnerMin);\n        this.spinnerContainerMin.appendChild(this.messageContainerMin);\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .spinnerOuterContainer${this.elementID} {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .messageContainer${this.elementID} {\n                height: 20px;\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                vertical-align: middle;\n            }\n\n            .spinner${this.elementID} {\n                padding: 15px;\n                background: #07e8d6;\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n\n            .spinnerContainerPrimary${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 10px;\n                margin: 0;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n                pointer-events: auto;\n            }\n\n            .spinnerPrimary${this.elementID} {\n                width: 120px;\n                margin-left: 30px;\n            }\n\n            .messageContainerPrimary${this.elementID} {\n                padding-top: 15px;\n            }\n\n            .spinnerContainerMin${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                display: flex;\n                flex-direction: left;\n                pointer-events: auto;\n                min-width: 250px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                margin-right: 15px;\n            }\n\n            .spinnerMin${this.elementID} {\n                width: 50px;\n                height: 50px;\n                margin-left: 15px;\n                margin-right: 25px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                padding-top: 15px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n        this.spinnerContainerOuter.appendChild(style);\n        this.container.appendChild(this.spinnerContainerOuter);\n\n        this.setMinimized(false, true);\n\n        this.fadeTransitions = [];\n    }\n\n    addTask(message) {\n        const newTask = {\n            'message': message,\n            'id': this.taskIDGen++\n        };\n        this.tasks.push(newTask);\n        this.update();\n        return newTask.id;\n    }\n\n    removeTask(id) {\n        let index = 0;\n        for (let task of this.tasks) {\n            if (task.id === id) {\n                this.tasks.splice(index, 1);\n                break;\n            }\n            index++;\n        }\n        this.update();\n    }\n\n    removeAllTasks() {\n        this.tasks = [];\n        this.update();\n    }\n\n    setMessageForTask(id, message) {\n        for (let task of this.tasks) {\n            if (task.id === id) {\n                task.message = message;\n                break;\n            }\n        }\n        this.update();\n    }\n\n    update() {\n        if (this.tasks.length > 0) {\n            this.show();\n            this.setMessage(this.tasks[this.tasks.length - 1].message);\n        } else {\n            this.hide();\n        }\n    }\n\n    show() {\n        this.spinnerContainerOuter.style.display = 'block';\n        this.visible = true;\n    }\n\n    hide() {\n        this.spinnerContainerOuter.style.display = 'none';\n        this.visible = false;\n    }\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.spinnerContainerOuter);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.spinnerContainerOuter);\n            this.spinnerContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n    setMinimized(minimized, instant) {\n        const showHideSpinner = (element, show, instant, displayStyle, fadeTransitionsIndex) => {\n            if (instant) {\n                element.style.display = show ? displayStyle : 'none';\n            } else {\n                this.fadeTransitions[fadeTransitionsIndex] = fadeElement(element, !show, displayStyle, STANDARD_FADE_DURATION, () => {\n                    this.fadeTransitions[fadeTransitionsIndex] = null;\n                });\n            }\n        };\n        showHideSpinner(this.spinnerContainerPrimary, !minimized, instant, 'block', 0);\n        showHideSpinner(this.spinnerContainerMin, minimized, instant, 'flex', 1);\n        this.minimized = minimized;\n    }\n\n    setMessage(msg) {\n        this.messageContainerPrimary.innerHTML = msg;\n        this.messageContainerMin.innerHTML = msg;\n    }\n}\n","export const fadeElement = (element, out, displayStyle, duration, onComplete) => {\n    const startTime = performance.now();\n\n    let startOpacity = element.style.display === 'none' ? 0 : parseFloat(element.style.opacity);\n    if (isNaN(startOpacity)) startOpacity = 1;\n\n    const interval = window.setInterval(() => {\n        const currentTime = performance.now();\n        const elapsed = currentTime - startTime;\n\n        let t = Math.min(elapsed / duration, 1.0);\n        if (t > 0.999) t = 1;\n\n        let opacity;\n        if (out) {\n            opacity = (1.0 - t) * startOpacity;\n            if (opacity < 0.0001) opacity = 0;\n        } else {\n            opacity = (1.0 - startOpacity) * t + startOpacity;\n        }\n\n        if (opacity > 0) {\n            element.style.display = displayStyle;\n            element.style.opacity = opacity;\n        } else {\n            element.style.display = 'none';\n        }\n\n        if (t >= 1) {\n            if (onComplete) onComplete();\n            window.clearInterval(interval);\n        }\n    }, 16);\n    return interval;\n};\n\nexport const cancelFade = (interval) => {\n    window.clearInterval(interval);\n};\n","export class LoadingProgressBar {\n\n    constructor(container) {\n\n        this.idGen = 0;\n\n        this.tasks = [];\n\n        this.container = container || document.body;\n\n        this.progressBarContainerOuter = document.createElement('div');\n        this.progressBarContainerOuter.className = 'progressBarOuterContainer';\n        this.progressBarContainerOuter.style.display = 'none';\n\n        this.progressBarBox = document.createElement('div');\n        this.progressBarBox.className = 'progressBarBox';\n\n        this.progressBarBackground = document.createElement('div');\n        this.progressBarBackground.className = 'progressBarBackground';\n\n        this.progressBar = document.createElement('div');\n        this.progressBar.className = 'progressBar';\n\n        this.progressBarBackground.appendChild(this.progressBar);\n        this.progressBarBox.appendChild(this.progressBarBackground);\n        this.progressBarContainerOuter.appendChild(this.progressBarBox);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .progressBarOuterContainer {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .progressBarBox {\n                z-index:99999;\n                padding: 7px 9px 5px 7px;\n                background-color: rgba(190, 190, 190, 0.75);\n                border: #555555 1px solid;\n                border-radius: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                width: 180px;\n                height: 30px;\n                pointer-events: auto;\n            }\n\n            .progressBarBackground {\n                width: 100%;\n                height: 25px;\n                border-radius:10px;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #444444 1px solid;\n                box-shadow: inset 0 0 10px #333333;\n            }\n\n            .progressBar {\n                height: 25px;\n                width: 0px;\n                border-radius:10px;\n                background-color: rgba(0, 200, 0, 0.75);\n                box-shadow: inset 0 0 10px #003300;\n            }\n\n        `;\n        this.progressBarContainerOuter.appendChild(style);\n        this.container.appendChild(this.progressBarContainerOuter);\n    }\n\n    show() {\n        this.progressBarContainerOuter.style.display = 'block';\n    }\n\n    hide() {\n        this.progressBarContainerOuter.style.display = 'none';\n    }\n\n    setProgress(progress) {\n        this.progressBar.style.width = progress + '%';\n    }\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.progressBarContainerOuter);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.progressBarContainerOuter);\n            this.progressBarContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n}\n","export class InfoPanel {\n\n    constructor(container) {\n\n        this.container = container || document.body;\n\n        this.infoCells = {};\n\n        const layout = [\n            ['Camera position', 'cameraPosition'],\n            ['Camera look-at', 'cameraLookAt'],\n            ['Camera up', 'cameraUp'],\n            ['Camera mode', 'orthographicCamera'],\n            ['Cursor position', 'cursorPosition'],\n            ['FPS', 'fps'],\n            ['Rendering:', 'renderSplatCount'],\n            ['Sort time', 'sortTime'],\n            ['Render window', 'renderWindow'],\n            ['Focal adjustment', 'focalAdjustment'],\n            ['Splat scale', 'splatScale'],\n            ['Point cloud mode', 'pointCloudMode']\n        ];\n\n        this.infoPanelContainer = document.createElement('div');\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .infoPanel {\n                width: 430px;\n                padding: 10px;\n                background-color: rgba(50, 50, 50, 0.85);\n                border: #555555 2px solid;\n                color: #dddddd;\n                border-radius: 10px;\n                z-index: 9999;\n                font-family: arial;\n                font-size: 11pt;\n                text-align: left;\n                margin: 0;\n                top: 10px;\n                left:10px;\n                position: absolute;\n                pointer-events: auto;\n            }\n\n            .info-panel-cell {\n                margin-bottom: 5px;\n                padding-bottom: 2px;\n            }\n\n            .label-cell {\n                font-weight: bold;\n                font-size: 12pt;\n                width: 140px;\n            }\n\n        `;\n        this.infoPanelContainer.append(style);\n\n        this.infoPanel = document.createElement('div');\n        this.infoPanel.className = 'infoPanel';\n\n        const infoTable = document.createElement('div');\n        infoTable.style.display = 'table';\n\n        for (let layoutEntry of layout) {\n            const row = document.createElement('div');\n            row.style.display = 'table-row';\n            row.className = 'info-panel-row';\n\n            const labelCell = document.createElement('div');\n            labelCell.style.display = 'table-cell';\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\n            labelCell.classList.add('info-panel-cell', 'label-cell');\n\n            const spacerCell = document.createElement('div');\n            spacerCell.style.display = 'table-cell';\n            spacerCell.style.width = '10px';\n            spacerCell.innerHTML = ' ';\n            spacerCell.className = 'info-panel-cell';\n\n            const infoCell = document.createElement('div');\n            infoCell.style.display = 'table-cell';\n            infoCell.innerHTML = '';\n            infoCell.className = 'info-panel-cell';\n\n            this.infoCells[layoutEntry[1]] = infoCell;\n\n            row.appendChild(labelCell);\n            row.appendChild(spacerCell);\n            row.appendChild(infoCell);\n\n            infoTable.appendChild(row);\n        }\n\n        this.infoPanel.appendChild(infoTable);\n        this.infoPanelContainer.append(this.infoPanel);\n        this.infoPanelContainer.style.display = 'none';\n        this.container.appendChild(this.infoPanelContainer);\n\n        this.visible = false;\n    }\n\n    update = function(renderDimensions, cameraPosition, cameraLookAtPosition, cameraUp, orthographicCamera,\n                      meshCursorPosition, currentFPS, splatCount, splatRenderCount,\n                      splatRenderCountPct, lastSortTime, focalAdjustment, splatScale, pointCloudMode) {\n\n        const cameraPosString = `${cameraPosition.x.toFixed(5)}, ${cameraPosition.y.toFixed(5)}, ${cameraPosition.z.toFixed(5)}`;\n        if (this.infoCells.cameraPosition.innerHTML !== cameraPosString) {\n            this.infoCells.cameraPosition.innerHTML = cameraPosString;\n        }\n\n        if (cameraLookAtPosition) {\n            const cla = cameraLookAtPosition;\n            const cameraLookAtString = `${cla.x.toFixed(5)}, ${cla.y.toFixed(5)}, ${cla.z.toFixed(5)}`;\n            if (this.infoCells.cameraLookAt.innerHTML !== cameraLookAtString) {\n                this.infoCells.cameraLookAt.innerHTML = cameraLookAtString;\n            }\n        }\n\n        const cameraUpString = `${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}`;\n        if (this.infoCells.cameraUp.innerHTML !== cameraUpString) {\n            this.infoCells.cameraUp.innerHTML = cameraUpString;\n        }\n\n        this.infoCells.orthographicCamera.innerHTML = orthographicCamera ? 'Orthographic' : 'Perspective';\n\n        if (meshCursorPosition) {\n            const cursPos = meshCursorPosition;\n            const cursorPosString = `${cursPos.x.toFixed(5)}, ${cursPos.y.toFixed(5)}, ${cursPos.z.toFixed(5)}`;\n            this.infoCells.cursorPosition.innerHTML = cursorPosString;\n        } else {\n            this.infoCells.cursorPosition.innerHTML = 'N/A';\n        }\n\n        this.infoCells.fps.innerHTML = currentFPS;\n        this.infoCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n        this.infoCells.renderSplatCount.innerHTML =\n            `${splatRenderCount} splats out of ${splatCount} (${splatRenderCountPct.toFixed(2)}%)`;\n\n        this.infoCells.sortTime.innerHTML = `${lastSortTime.toFixed(3)} ms`;\n        this.infoCells.focalAdjustment.innerHTML = `${focalAdjustment.toFixed(3)}`;\n        this.infoCells.splatScale.innerHTML = `${splatScale.toFixed(3)}`;\n        this.infoCells.pointCloudMode.innerHTML = `${pointCloudMode}`;\n    };\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.infoPanelContainer);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.infoPanelContainer);\n            this.infoPanelContainer.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n    show() {\n        this.infoPanelContainer.style.display = 'block';\n        this.visible = true;\n    }\n\n    hide() {\n        this.infoPanelContainer.style.display = 'none';\n        this.visible = false;\n    }\n\n}\n","import * as THREE from 'three';\n\nexport class ArrowHelper extends THREE.Object3D {\n\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\n        super();\n\n        this.type = 'ArrowHelper';\n\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\n        lineGeometry.translate(0, length / 2.0, 0);\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\n        coneGeometry.translate(0, length, 0);\n\n        this.position.copy( origin );\n\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.line.matrixAutoUpdate = false;\n        this.add(this.line);\n\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.cone.matrixAutoUpdate = false;\n        this.add(this.cone);\n\n        this.setDirection(dir);\n    }\n\n    setDirection( dir ) {\n        if (dir.y > 0.99999) {\n            this.quaternion.set(0, 0, 0, 1);\n        } else if (dir.y < - 0.99999) {\n            this.quaternion.set(1, 0, 0, 0);\n        } else {\n            _axis.set(dir.z, 0, -dir.x).normalize();\n            const radians = Math.acos(dir.y);\n            this.quaternion.setFromAxisAngle(_axis, radians);\n        }\n    }\n\n    setColor( color ) {\n        this.line.material.color.set(color);\n        this.cone.material.color.set(color);\n    }\n\n    copy(source) {\n        super.copy(source, false);\n        this.line.copy(source.line);\n        this.cone.copy(source.cone);\n        return this;\n    }\n\n    dispose() {\n        this.line.geometry.dispose();\n        this.line.material.dispose();\n        this.cone.geometry.dispose();\n        this.cone.material.dispose();\n    }\n\n}\n","import * as THREE from 'three';\nimport { ArrowHelper } from './ArrowHelper.js';\nimport { disposeAllMeshes } from './Util.js';\n\nexport class SceneHelper {\n\n    constructor(threeScene) {\n        this.threeScene = threeScene;\n        this.splatRenderTarget = null;\n        this.renderTargetCopyQuad = null;\n        this.renderTargetCopyCamera = null;\n        this.meshCursor = null;\n        this.focusMarker = null;\n        this.controlPlane = null;\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    updateSplatRenderTargetForRenderDimensions(width, height) {\n        this.destroySplatRendertarget();\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: true,\n\n        });\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n    }\n\n    destroySplatRendertarget() {\n        if (this.splatRenderTarget) {\n            this.splatRenderTarget = null;\n        }\n    }\n\n    setupRenderTargetCopyObjects() {\n        const uniforms = {\n            'sourceColorTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sourceDepthTexture': {\n                'type': 't',\n                'value': null\n            },\n        };\n        const renderTargetCopyMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n            uniforms: uniforms,\n            depthWrite: false,\n            depthTest: false,\n            transparent: true,\n            blending: THREE.CustomBlending,\n            blendSrc: THREE.SrcAlphaFactor,\n            blendSrcAlpha: THREE.SrcAlphaFactor,\n            blendDst: THREE.OneMinusSrcAlphaFactor,\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\n        });\n        renderTargetCopyMaterial.extensions.fragDepth = true;\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), renderTargetCopyMaterial);\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    }\n\n    destroyRenderTargetCopyObjects() {\n        if (this.renderTargetCopyQuad) {\n            disposeAllMeshes(this.renderTargetCopyQuad);\n            this.renderTargetCopyQuad = null;\n        }\n    }\n\n    setupMeshCursor() {\n        if (!this.meshCursor) {\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\n\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            downArrow.rotation.set(0, 0, Math.PI);\n            downArrow.position.set(0, 1, 0);\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            upArrow.position.set(0, -1, 0);\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n            leftArrow.position.set(1, 0, 0);\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n            rightArrow.position.set(-1, 0, 0);\n\n            this.meshCursor = new THREE.Object3D();\n            this.meshCursor.add(downArrow);\n            this.meshCursor.add(upArrow);\n            this.meshCursor.add(leftArrow);\n            this.meshCursor.add(rightArrow);\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\n            this.threeScene.add(this.meshCursor);\n            this.meshCursor.visible = false;\n        }\n    }\n\n    destroyMeshCursor() {\n        if (this.meshCursor) {\n            disposeAllMeshes(this.meshCursor);\n            this.threeScene.remove(this.meshCursor);\n            this.meshCursor = null;\n        }\n    }\n\n    setMeshCursorVisibility(visible) {\n        this.meshCursor.visible = visible;\n    }\n\n    getMeschCursorVisibility() {\n        return this.meshCursor.visible;\n    }\n\n    setMeshCursorPosition(position) {\n        this.meshCursor.position.copy(position);\n    }\n\n    positionAndOrientMeshCursor(position, camera) {\n        this.meshCursor.position.copy(position);\n        this.meshCursor.up.copy(camera.up);\n        this.meshCursor.lookAt(camera.position);\n    }\n\n    setupFocusMarker() {\n        if (!this.focusMarker) {\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\n            focusMarkerMaterial.depthTest = false;\n            focusMarkerMaterial.depthWrite = false;\n            focusMarkerMaterial.transparent = true;\n            this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\n        }\n    }\n\n    destroyFocusMarker() {\n        if (this.focusMarker) {\n            disposeAllMeshes(this.focusMarker);\n            this.focusMarker = null;\n        }\n    }\n\n    updateFocusMarker = function() {\n\n        const tempPosition = new THREE.Vector3();\n        const tempMatrix = new THREE.Matrix4();\n        const toCamera = new THREE.Vector3();\n\n        return function(position, camera, viewport) {\n            tempMatrix.copy(camera.matrixWorld).invert();\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\n            tempPosition.normalize().multiplyScalar(10);\n            tempPosition.applyMatrix4(camera.matrixWorld);\n            toCamera.copy(camera.position).sub(position);\n            const toCameraDistance = toCamera.length();\n            this.focusMarker.position.copy(position);\n            this.focusMarker.scale.set(toCameraDistance, toCameraDistance, toCameraDistance);\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\n            this.focusMarker.material.uniformsNeedUpdate = true;\n        };\n\n    }();\n\n    setFocusMarkerVisibility(visible) {\n        this.focusMarker.visible = visible;\n    }\n\n    setFocusMarkerOpacity(opacity) {\n        this.focusMarker.material.uniforms.opacity.value = opacity;\n        this.focusMarker.material.uniformsNeedUpdate = true;\n    }\n\n    getFocusMarkerOpacity() {\n        return this.focusMarker.material.uniforms.opacity.value;\n    }\n\n    setupControlPlane() {\n        if (!this.controlPlane) {\n            const planeGeometry = new THREE.PlaneGeometry(1, 1);\n            planeGeometry.rotateX(-Math.PI / 2);\n            const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\n            planeMaterial.transparent = true;\n            planeMaterial.opacity = 0.6;\n            planeMaterial.depthTest = false;\n            planeMaterial.depthWrite = false;\n            planeMaterial.side = THREE.DoubleSide;\n            const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\n            const arrowDir = new THREE.Vector3(0, 1, 0);\n            arrowDir.normalize();\n            const arrowOrigin = new THREE.Vector3(0, 0, 0);\n            const arrowLength = 0.5;\n            const arrowRadius = 0.01;\n            const arrowColor = 0x00dd00;\n            const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\n\n            this.controlPlane = new THREE.Object3D();\n            this.controlPlane.add(planeMesh);\n            this.controlPlane.add(arrowHelper);\n        }\n    }\n\n    destroyControlPlane() {\n        if (this.controlPlane) {\n            disposeAllMeshes(this.controlPlane);\n            this.controlPlane = null;\n        }\n    }\n\n    setControlPlaneVisibility(visible) {\n        this.controlPlane.visible = visible;\n    }\n\n    positionAndOrientControlPlane = function() {\n\n        const tempQuaternion = new THREE.Quaternion();\n        const defaultUp = new THREE.Vector3(0, 1, 0);\n\n        return function(position, up) {\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\n            this.controlPlane.position.copy(position);\n            this.controlPlane.quaternion.copy(tempQuaternion);\n        };\n\n    }();\n\n    addDebugMeshes() {\n        this.debugRoot = this.createDebugMeshes();\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n        this.threeScene.add(this.debugRoot);\n        this.threeScene.add(this.secondaryDebugRoot);\n    }\n\n    destroyDebugMeshes() {\n        for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\n            if (debugRoot) {\n                disposeAllMeshes(debugRoot);\n                this.threeScene.remove(debugRoot);\n            }\n        }\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    createDebugMeshes(renderOrder) {\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const debugMeshRoot = new THREE.Object3D();\n\n        const createMesh = (color, position) => {\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\n            sphereMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(sphereMesh);\n            sphereMesh.position.fromArray(position);\n        };\n\n        createMesh(0xff0000, [-50, 0, 0]);\n        createMesh(0xff0000, [50, 0, 0]);\n        createMesh(0x00ff00, [0, 0, -50]);\n        createMesh(0x00ff00, [0, 0, 50]);\n        createMesh(0xffaa00, [5, 0, 5]);\n\n        return debugMeshRoot;\n    }\n\n    createSecondaryDebugMeshes(renderOrder) {\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n        const debugMeshRoot = new THREE.Object3D();\n\n        let boxColor = 0xBBBBBB;\n        const createMesh = (position) => {\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\n            boxMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(boxMesh);\n            boxMesh.position.fromArray(position);\n        };\n\n        let separation = 10;\n        createMesh([-separation, 0, -separation]);\n        createMesh([-separation, 0, separation]);\n        createMesh([separation, 0, -separation]);\n        createMesh([separation, 0, separation]);\n\n        return debugMeshRoot;\n    }\n\n    static buildDebugMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: false,\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.FrontSide\n        });\n        material.extensions.fragDepth = true;\n\n        return material;\n    }\n\n    static buildFocusMarkerMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n            'realFocusPosition': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'opacity': {\n                'value': 0.0\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n            side: THREE.FrontSide\n        });\n\n        return material;\n    }\n\n    dispose() {\n        this.destroyMeshCursor();\n        this.destroyFocusMarker();\n        this.destroyDebugMeshes();\n        this.destroyControlPlane();\n        this.destroyRenderTargetCopyObjects();\n        this.destroySplatRendertarget();\n    }\n}\n","import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n        this.origin = new THREE.Vector3();\n        this.direction = new THREE.Vector3();\n        this.setParameters(origin, direction);\n    }\n\n    setParameters(origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction).normalize();\n    }\n\n    boxContainsPoint(box, point, epsilon) {\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\n    }\n\n    intersectBox = function() {\n\n        const planeIntersectionPoint = new THREE.Vector3();\n        const planeIntersectionPointArray = [];\n        const originArray = [];\n        const directionArray = [];\n\n        return function(box, outHit) {\n\n            originArray[0] = this.origin.x;\n            originArray[1] = this.origin.y;\n            originArray[2] = this.origin.z;\n            directionArray[0] = this.direction.x;\n            directionArray[1] = this.direction.y;\n            directionArray[2] = this.direction.z;\n\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n                if (outHit) {\n                    outHit.origin.copy(this.origin);\n                    outHit.normal.set(0, 0, 0);\n                    outHit.distance = -1;\n                }\n                return true;\n            }\n\n            for (let i = 0; i < 3; i++) {\n                if (directionArray[i] == 0.0) continue;\n\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n                let multiplier = -Math.sign(directionArray[i]);\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n                if (toSide * multiplier < 0) {\n                    const idx1 = (i + 1) % 3;\n                    const idx2 = (i + 2) % 3;\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\n                                               planeIntersectionPointArray[idx2],\n                                               planeIntersectionPointArray[idx1]);\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n                        if (outHit) {\n                            outHit.origin.copy(planeIntersectionPoint);\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\n                        }\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n    }();\n\n    intersectSphere = function() {\n\n        const toSphereCenterVec = new THREE.Vector3();\n\n        return function(center, radius, outHit) {\n            toSphereCenterVec.copy(center).sub(this.origin);\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\n            const radiusSq = radius * radius;\n\n            if (diffSq > radiusSq) return false;\n\n            const thc = Math.sqrt(radiusSq - diffSq);\n            const t0 = toClosestApproach - thc;\n            const t1 = toClosestApproach + thc;\n\n            if (t1 < 0) return false;\n            let t = t0 < 0 ? t1 : t0;\n\n            if (outHit) {\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\n                outHit.distance = t;\n            }\n            return true;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nexport class Hit {\n\n    constructor() {\n        this.origin = new THREE.Vector3();\n        this.normal = new THREE.Vector3();\n        this.distance = 0;\n        this.splatIndex = 0;\n    }\n\n    set(origin, normal, distance, splatIndex) {\n        this.origin.copy(origin);\n        this.normal.copy(normal);\n        this.distance = distance;\n        this.splatIndex = splatIndex;\n    }\n\n    clone() {\n        const hitClone = new Hit();\n        hitClone.origin.copy(this.origin);\n        hitClone.normal.copy(this.normal);\n        hitClone.distance = this.distance;\n        hitClone.splatIndex = this.splatIndex;\n        return hitClone;\n    }\n\n}\n","import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\n\nexport class Raycaster {\n\n    constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\n        this.ray = new Ray(origin, direction);\n        this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\n    }\n\n    setFromCameraAndScreenPosition = function() {\n\n        const ndcCoords = new THREE.Vector2();\n\n        return function(camera, screenPosition, screenDimensions) {\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\n            if (camera.isPerspectiveCamera) {\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\n                this.camera = camera;\n            } else if (camera.isOrthographicCamera) {\n                this.ray.origin.set(ndcCoords.x, ndcCoords.y,\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n                this.camera = camera;\n            } else {\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\n            }\n        };\n\n    }();\n\n    intersectSplatMesh = function() {\n\n        const toLocal = new THREE.Matrix4();\n        const fromLocal = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const localRay = new Ray();\n        const tempPoint = new THREE.Vector3();\n\n        return function(splatMesh, outHits = []) {\n            const splatTree = splatMesh.getSplatTree();\n\n            if (!splatTree) return;\n\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\n                const subTree = splatTree.subTrees[s];\n\n                fromLocal.copy(splatMesh.matrixWorld);\n                if (splatMesh.dynamicMode) {\n                    splatMesh.getSceneTransform(s, sceneTransform);\n                    fromLocal.multiply(sceneTransform);\n                }\n                toLocal.copy(fromLocal).invert();\n\n                localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n                localRay.direction.copy(this.ray.origin).add(this.ray.direction);\n                localRay.direction.applyMatrix4(toLocal).sub(localRay.origin).normalize();\n\n                const outHitsForSubTree = [];\n                if (subTree.rootNode) {\n                    this.castRayAtSplatTreeNode(localRay, splatTree, subTree.rootNode, outHitsForSubTree);\n                }\n\n                outHitsForSubTree.forEach((hit) => {\n                    hit.origin.applyMatrix4(fromLocal);\n                    hit.normal.applyMatrix4(fromLocal).normalize();\n                    hit.distance = tempPoint.copy(hit.origin).sub(this.ray.origin).length();\n                });\n\n                outHits.push(...outHitsForSubTree);\n            }\n\n            outHits.sort((a, b) => {\n                if (a.distance > b.distance) return 1;\n                else return -1;\n            });\n\n            return outHits;\n        };\n\n    }();\n\n    castRayAtSplatTreeNode = function() {\n\n        const tempColor = new THREE.Vector4();\n        const tempCenter = new THREE.Vector3();\n        const tempScale = new THREE.Vector3();\n        const tempRotation = new THREE.Quaternion();\n        const tempHit = new Hit();\n        const scaleEpsilon = 0.0000001;\n\n        const origin = new THREE.Vector3(0, 0, 0);\n        const uniformScaleMatrix = new THREE.Matrix4();\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const toSphereSpace = new THREE.Matrix4();\n        const fromSphereSpace = new THREE.Matrix4();\n        const tempRay = new Ray();\n\n        return function(ray, splatTree, node, outHits = []) {\n            if (!ray.intersectBox(node.boundingBox)) {\n                return;\n            }\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n                for (let i = 0; i < node.data.indexes.length; i++) {\n                    const splatGlobalIndex = node.data.indexes[i];\n                    splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor);\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation);\n\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon || tempScale.z <= scaleEpsilon) {\n                        continue;\n                    }\n\n                    if (!this.raycastAgainstTrueSplatEllipsoid) {\n                        const radius = (tempScale.x + tempScale.y + tempScale.z) / 3;\n                        if (ray.intersectSphere(tempCenter, radius, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            outHits.push(hitClone);\n                        }\n                    } else {\n                        scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n                        rotationMatrix.makeRotationFromQuaternion(tempRotation);\n                        const uniformScale = Math.log10(tempColor.w) * 2.0;\n                        uniformScaleMatrix.makeScale(uniformScale, uniformScale, uniformScale);\n                        fromSphereSpace.copy(uniformScaleMatrix).multiply(rotationMatrix).multiply(scaleMatrix);\n                        toSphereSpace.copy(fromSphereSpace).invert();\n                        tempRay.origin.copy(ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\n                        tempRay.direction.copy(ray.origin).add(ray.direction).sub(tempCenter);\n                        tempRay.direction.applyMatrix4(toSphereSpace).sub(tempRay.origin).normalize();\n                        if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\n                            outHits.push(hitClone);\n                        }\n                    }\n                }\n             }\n            if (node.children && node.children.length > 0) {\n                for (let child of node.children) {\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n                }\n            }\n            return outHits;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\n/**\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\n */\nexport class SplatScene {\n\n    constructor(splatBuffer, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(),\n                scale = new THREE.Vector3(1, 1, 1), minimumAlpha = 1) {\n        this.splatBuffer = splatBuffer;\n        this.position = position.clone();\n        this.quaternion = quaternion.clone();\n        this.scale = scale.clone();\n        this.transform = new THREE.Matrix4();\n        this.minimumAlpha = minimumAlpha;\n        this.updateTransform();\n    }\n\n    copyTransformData(otherScene) {\n        this.position.copy(otherScene.position);\n        this.quaternion.copy(otherScene.quaternion);\n        this.scale.copy(otherScene.scale);\n        this.transform.copy(otherScene.transform);\n    }\n\n    updateTransform() {\n        this.transform.compose(this.position, this.quaternion, this.scale);\n    }\n}\n","import * as THREE from 'three';\nimport { delayedExecute } from '../Util.js';\n\nclass SplatTreeNode {\n\n    static idGen = 0;\n\n    constructor(min, max, depth, id) {\n        this.min = new THREE.Vector3().copy(min);\n        this.max = new THREE.Vector3().copy(max);\n        this.boundingBox = new THREE.Box3(this.min, this.max);\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\n        this.depth = depth;\n        this.children = [];\n        this.data = null;\n        this.id = id || SplatTreeNode.idGen++;\n    }\n\n}\n\nclass SplatSubTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.sceneDimensions = new THREE.Vector3();\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.rootNode = null;\n        this.nodesWithIndexes = [];\n        this.splatMesh = null;\n    }\n\n    static convertWorkerSubTreeNode(workerSubTreeNode) {\n        const minVector = new THREE.Vector3().fromArray(workerSubTreeNode.min);\n        const maxVector = new THREE.Vector3().fromArray(workerSubTreeNode.max);\n        const convertedNode = new SplatTreeNode(minVector, maxVector, workerSubTreeNode.depth, workerSubTreeNode.id);\n        if (workerSubTreeNode.data.indexes) {\n            convertedNode.data = {\n                'indexes': []\n            };\n            for (let index of workerSubTreeNode.data.indexes) {\n                convertedNode.data.indexes.push(index);\n            }\n        }\n        if (workerSubTreeNode.children) {\n            for (let child of workerSubTreeNode.children) {\n                convertedNode.children.push(SplatSubTree.convertWorkerSubTreeNode(child));\n            }\n        }\n        return convertedNode;\n    }\n\n    static convertWorkerSubTree(workerSubTree, splatMesh) {\n        const convertedSubTree = new SplatSubTree(workerSubTree.maxDepth, workerSubTree.maxCentersPerNode);\n        convertedSubTree.sceneMin = new THREE.Vector3().fromArray(workerSubTree.sceneMin);\n        convertedSubTree.sceneMax = new THREE.Vector3().fromArray(workerSubTree.sceneMax);\n\n        convertedSubTree.splatMesh = splatMesh;\n        convertedSubTree.rootNode = SplatSubTree.convertWorkerSubTreeNode(workerSubTree.rootNode);\n\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        convertedSubTree.nodesWithIndexes = [];\n        visitLeavesFromNode(convertedSubTree.rootNode, (node) => {\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n                convertedSubTree.nodesWithIndexes.push(node);\n            }\n        });\n\n        return convertedSubTree;\n    }\n}\n\nfunction createSplatTreeWorker(self) {\n\n    let WorkerSplatTreeNodeIDGen = 0;\n\n    class WorkerBox3 {\n\n        constructor(min, max) {\n            this.min = [min[0], min[1], min[2]];\n            this.max = [max[0], max[1], max[2]];\n        }\n\n        containsPoint(point) {\n            return point[0] >= this.min[0] && point[0] <= this.max[0] &&\n                   point[1] >= this.min[1] && point[1] <= this.max[1] &&\n                   point[2] >= this.min[2] && point[2] <= this.max[2];\n        }\n    }\n\n    class WorkerSplatSubTree {\n\n        constructor(maxDepth, maxCentersPerNode) {\n            this.maxDepth = maxDepth;\n            this.maxCentersPerNode = maxCentersPerNode;\n            this.sceneDimensions = [];\n            this.sceneMin = [];\n            this.sceneMax = [];\n            this.rootNode = null;\n            this.addedIndexes = {};\n            this.nodesWithIndexes = [];\n            this.splatMesh = null;\n            this.disposed = false;\n        }\n\n    }\n\n    class WorkerSplatTreeNode {\n\n        constructor(min, max, depth, id) {\n            this.min = [min[0], min[1], min[2]];\n            this.max = [max[0], max[1], max[2]];\n            this.center = [(max[0] - min[0]) * 0.5 + min[0],\n                           (max[1] - min[1]) * 0.5 + min[1],\n                           (max[2] - min[2]) * 0.5 + min[2]];\n            this.depth = depth;\n            this.children = [];\n            this.data = null;\n            this.id = id || WorkerSplatTreeNodeIDGen++;\n        }\n\n    }\n\n    processSplatTreeNode = function(tree, node, indexToCenter, sceneCenters) {\n        const splatCount = node.data.indexes.length;\n\n        if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\n            const newIndexes = [];\n            for (let i = 0; i < node.data.indexes.length; i++) {\n                if (!tree.addedIndexes[node.data.indexes[i]]) {\n                    newIndexes.push(node.data.indexes[i]);\n                    tree.addedIndexes[node.data.indexes[i]] = true;\n                }\n            }\n            node.data.indexes = newIndexes;\n            node.data.indexes.sort((a, b) => {\n                if (a > b) return 1;\n                else return -1;\n            });\n            tree.nodesWithIndexes.push(node);\n            return;\n        }\n\n        const nodeDimensions = [node.max[0] - node.min[0],\n                                node.max[1] - node.min[1],\n                                node.max[2] - node.min[2]];\n        const halfDimensions = [nodeDimensions[0] * 0.5,\n                                nodeDimensions[1] * 0.5,\n                                nodeDimensions[2] * 0.5];\n        const nodeCenter = [node.min[0] + halfDimensions[0],\n                            node.min[1] + halfDimensions[1],\n                            node.min[2] + halfDimensions[2]];\n\n        const childrenBounds = [\n            // top section, clockwise from upper-left (looking from above, +Y)\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2]],\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\n\n            // bottom section, clockwise from lower-left (looking from above, +Y)\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\n        ];\n\n        const splatCounts = [];\n        const baseIndexes = [];\n        for (let i = 0; i < childrenBounds.length; i++) {\n            splatCounts[i] = 0;\n            baseIndexes[i] = [];\n        }\n\n        const center = [0, 0, 0];\n        for (let i = 0; i < splatCount; i++) {\n            const splatGlobalIndex = node.data.indexes[i];\n            const centerBase = indexToCenter[splatGlobalIndex];\n            center[0] = sceneCenters[centerBase];\n            center[1] = sceneCenters[centerBase + 1];\n            center[2] = sceneCenters[centerBase + 2];\n            for (let j = 0; j < childrenBounds.length; j++) {\n                if (childrenBounds[j].containsPoint(center)) {\n                    splatCounts[j]++;\n                    baseIndexes[j].push(splatGlobalIndex);\n                }\n            }\n        }\n\n        for (let i = 0; i < childrenBounds.length; i++) {\n            const childNode = new WorkerSplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\n            childNode.data = {\n                'indexes': baseIndexes[i]\n            };\n            node.children.push(childNode);\n        }\n\n        node.data = {};\n        for (let child of node.children) {\n            processSplatTreeNode(tree, child, indexToCenter, sceneCenters);\n        }\n        return;\n    };\n\n    const buildSubTree = (sceneCenters, maxDepth, maxCentersPerNode) => {\n\n        const sceneMin = [0, 0, 0];\n        const sceneMax = [0, 0, 0];\n        const indexes = [];\n        const centerCount = Math.floor(sceneCenters.length / 4);\n        for ( let i = 0; i < centerCount; i ++) {\n            const base = i * 4;\n            const x = sceneCenters[base];\n            const y = sceneCenters[base + 1];\n            const z = sceneCenters[base + 2];\n            const index = Math.round(sceneCenters[base + 3]);\n            if (i === 0 || x < sceneMin[0]) sceneMin[0] = x;\n            if (i === 0 || x > sceneMax[0]) sceneMax[0] = x;\n            if (i === 0 || y < sceneMin[1]) sceneMin[1] = y;\n            if (i === 0 || y > sceneMax[1]) sceneMax[1] = y;\n            if (i === 0 || z < sceneMin[2]) sceneMin[2] = z;\n            if (i === 0 || z > sceneMax[2]) sceneMax[2] = z;\n            indexes.push(index);\n        }\n        const subTree = new WorkerSplatSubTree(maxDepth, maxCentersPerNode);\n        subTree.sceneMin = sceneMin;\n        subTree.sceneMax = sceneMax;\n        subTree.rootNode = new WorkerSplatTreeNode(subTree.sceneMin, subTree.sceneMax, 0);\n        subTree.rootNode.data = {\n            'indexes': indexes\n        };\n\n        return subTree;\n    };\n\n    function createSplatTree(allCenters, maxDepth, maxCentersPerNode) {\n        const indexToCenter = [];\n        for (let sceneCenters of allCenters) {\n            const centerCount = Math.floor(sceneCenters.length / 4);\n            for ( let i = 0; i < centerCount; i ++) {\n                const base = i * 4;\n                const index = Math.round(sceneCenters[base + 3]);\n                indexToCenter[index] = base;\n            }\n        }\n        const subTrees = [];\n        for (let sceneCenters of allCenters) {\n            const subTree = buildSubTree(sceneCenters, maxDepth, maxCentersPerNode);\n            subTrees.push(subTree);\n            processSplatTreeNode(subTree, subTree.rootNode, indexToCenter, sceneCenters);\n        }\n        self.postMessage({\n            'subTrees': subTrees\n        });\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.process) {\n            createSplatTree(e.data.process.centers, e.data.process.maxDepth, e.data.process.maxCentersPerNode);\n        }\n    };\n}\n\nfunction workerProcessCenters(splatTreeWorker, centers, transferBuffers, maxDepth, maxCentersPerNode) {\n    splatTreeWorker.postMessage({\n        'process': {\n            'centers': centers,\n            'maxDepth': maxDepth,\n            'maxCentersPerNode': maxCentersPerNode\n        }\n    }, transferBuffers);\n}\n\nfunction checkAndCreateWorker() {\n    const splatTreeWorker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', createSplatTreeWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n    return splatTreeWorker;\n}\n\n/**\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\n */\nexport class SplatTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.subTrees = [];\n        this.splatMesh = null;\n    }\n\n\n    dispose() {\n        this.diposeSplatTreeWorker();\n        this.disposed = true;\n    }\n\n    diposeSplatTreeWorker() {\n        if (this.splatTreeWorker) this.splatTreeWorker.terminate();\n        this.splatTreeWorker = null;\n    };\n\n    /**\n     * Construct this instance of SplatTree from an instance of SplatMesh.\n     *\n     * @param {SplatMesh} splatMesh The instance of SplatMesh from which to construct this splat tree.\n     * @param {function} filterFunc Optional function to filter out unwanted splats.\n     * @param {function} onIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                   builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {undefined}\n     */\n    processSplatMesh = function(splatMesh, filterFunc = () => true, onIndexesUpload, onSplatTreeConstruction) {\n        if (!this.splatTreeWorker) this.splatTreeWorker = checkAndCreateWorker();\n\n        this.splatMesh = splatMesh;\n        this.subTrees = [];\n        const center = new THREE.Vector3();\n\n        const addCentersForScene = (splatOffset, splatCount) => {\n            const sceneCenters = new Float32Array(splatCount * 4);\n            let addedCount = 0;\n            for (let i = 0; i < splatCount; i++) {\n                const globalSplatIndex = i + splatOffset;\n                if (filterFunc(globalSplatIndex)) {\n                    splatMesh.getSplatCenter(globalSplatIndex, center);\n                    const addBase = addedCount * 4;\n                    sceneCenters[addBase] = center.x;\n                    sceneCenters[addBase + 1] = center.y;\n                    sceneCenters[addBase + 2] = center.z;\n                    sceneCenters[addBase + 3] = globalSplatIndex;\n                    addedCount++;\n                }\n            }\n            return sceneCenters;\n        };\n\n        return new Promise((resolve) => {\n\n            const checkForEarlyExit = () => {\n                if (this.disposed) {\n                    this.diposeSplatTreeWorker();\n                    resolve();\n                    return true;\n                }\n                return false;\n            };\n\n            if (onIndexesUpload) onIndexesUpload(false);\n\n            delayedExecute(() => {\n\n                if (checkForEarlyExit()) return;\n\n                const allCenters = [];\n                if (splatMesh.dynamicMode) {\n                    let splatOffset = 0;\n                    for (let s = 0; s < splatMesh.scenes.length; s++) {\n                        const scene = splatMesh.getScene(s);\n                        const splatCount = scene.splatBuffer.getSplatCount();\n                        const sceneCenters = addCentersForScene(splatOffset, splatCount);\n                        allCenters.push(sceneCenters);\n                        splatOffset += splatCount;\n                    }\n                } else {\n                    const sceneCenters = addCentersForScene(0, splatMesh.getSplatCount());\n                    allCenters.push(sceneCenters);\n                }\n\n                this.splatTreeWorker.onmessage = (e) => {\n\n                    if (checkForEarlyExit()) return;\n\n                    if (e.data.subTrees) {\n\n                        if (onSplatTreeConstruction) onSplatTreeConstruction(false);\n\n                        delayedExecute(() => {\n\n                            if (checkForEarlyExit()) return;\n\n                            for (let workerSubTree of e.data.subTrees) {\n                                const convertedSubTree = SplatSubTree.convertWorkerSubTree(workerSubTree, splatMesh);\n                                this.subTrees.push(convertedSubTree);\n                            }\n                            this.diposeSplatTreeWorker();\n\n                            if (onSplatTreeConstruction) onSplatTreeConstruction(true);\n\n                            delayedExecute(() => {\n                                resolve();\n                            });\n\n                        });\n                    }\n                };\n\n                delayedExecute(() => {\n                    if (checkForEarlyExit()) return;\n                    if (onIndexesUpload) onIndexesUpload(true);\n                    const transferBuffers = allCenters.map((array) => array.buffer);\n                    workerProcessCenters(this.splatTreeWorker, allCenters, transferBuffers, this.maxDepth, this.maxCentersPerNode);\n                });\n\n            });\n\n        });\n\n    };\n\n    countLeaves() {\n\n        let leafCount = 0;\n        this.visitLeaves(() => {\n            leafCount++;\n        });\n\n        return leafCount;\n    }\n\n    visitLeaves(visitFunc) {\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        for (let subTree of this.subTrees) {\n            visitLeavesFromNode(subTree.rootNode, visitFunc);\n        }\n    }\n\n}\n","function WebGLExtensions( gl ) {\n\n    const extensions = {};\n\n    function getExtension( name ) {\n\n        if ( extensions[name] !== undefined ) {\n\n            return extensions[name];\n\n        }\n\n        let extension;\n\n        switch ( name ) {\n\n            case 'WEBGL_depth_texture':\n                extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) ||\n                            gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n                break;\n\n            case 'EXT_texture_filter_anisotropic':\n                extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||\n                            gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||\n                            gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n                break;\n\n            case 'WEBGL_compressed_texture_s3tc':\n                extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||\n                            gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||\n                            gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n                break;\n\n            case 'WEBGL_compressed_texture_pvrtc':\n                extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) ||\n                           gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n                break;\n\n            default:\n                extension = gl.getExtension( name );\n\n        }\n\n        extensions[name] = extension;\n\n        return extension;\n\n    }\n\n    return {\n\n        has: function( name ) {\n\n            return getExtension( name ) !== null;\n\n        },\n\n        init: function( capabilities ) {\n\n            if ( capabilities.isWebGL2 ) {\n\n                getExtension( 'EXT_color_buffer_float' );\n                getExtension( 'WEBGL_clip_cull_distance' );\n\n            } else {\n\n                getExtension( 'WEBGL_depth_texture' );\n                getExtension( 'OES_texture_float' );\n                getExtension( 'OES_texture_half_float' );\n                getExtension( 'OES_texture_half_float_linear' );\n                getExtension( 'OES_standard_derivatives' );\n                getExtension( 'OES_element_index_uint' );\n                getExtension( 'OES_vertex_array_object' );\n                getExtension( 'ANGLE_instanced_arrays' );\n\n            }\n\n            getExtension( 'OES_texture_float_linear' );\n            getExtension( 'EXT_color_buffer_half_float' );\n            getExtension( 'WEBGL_multisampled_render_to_texture' );\n\n        },\n\n        get: function( name ) {\n\n            const extension = getExtension( name );\n\n            if ( extension === null ) {\n\n                console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n            }\n\n            return extension;\n\n        }\n\n    };\n\n}\n\nexport { WebGLExtensions };\n","function WebGLCapabilities( gl, extensions, parameters ) {\n\n    let maxAnisotropy;\n\n    function getMaxAnisotropy() {\n\n        if ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n        if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n            const extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n            maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n        } else {\n\n            maxAnisotropy = 0;\n\n        }\n\n        return maxAnisotropy;\n\n    }\n\n    function getMaxPrecision( precision ) {\n\n        if ( precision === 'highp' ) {\n\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n                return 'highp';\n\n            }\n\n            precision = 'mediump';\n\n        }\n\n        if ( precision === 'mediump' ) {\n\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n                return 'mediump';\n\n            }\n\n        }\n\n        return 'lowp';\n\n    }\n\n    const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';\n\n    let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n    const maxPrecision = getMaxPrecision( precision );\n\n    if ( maxPrecision !== precision ) {\n\n        console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n        precision = maxPrecision;\n\n    }\n\n    const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n\n    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n    const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n    const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n    const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n    const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n    const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n    const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n    const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n    const vertexTextures = maxVertexTextures > 0;\n    const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n    const floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n    const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;\n\n    return {\n\n        isWebGL2: isWebGL2,\n\n        drawBuffers: drawBuffers,\n\n        getMaxAnisotropy: getMaxAnisotropy,\n        getMaxPrecision: getMaxPrecision,\n\n        precision: precision,\n        logarithmicDepthBuffer: logarithmicDepthBuffer,\n\n        maxTextures: maxTextures,\n        maxVertexTextures: maxVertexTextures,\n        maxTextureSize: maxTextureSize,\n        maxCubemapSize: maxCubemapSize,\n\n        maxAttributes: maxAttributes,\n        maxVertexUniforms: maxVertexUniforms,\n        maxVaryings: maxVaryings,\n        maxFragmentUniforms: maxFragmentUniforms,\n\n        vertexTextures: vertexTextures,\n        floatFragmentTextures: floatFragmentTextures,\n        floatVertexTextures: floatVertexTextures,\n\n        maxSamples: maxSamples\n\n    };\n\n}\n\n\nexport { WebGLCapabilities };\n","export const SceneRevealMode = {\n    Default: 0,\n    Gradual: 1,\n    Instant: 2\n};\n","export const LogLevel = {\n    None: 0,\n    Error: 1,\n    Warning: 2,\n    Info: 3,\n    Debug: 4\n};\n","import * as THREE from 'three';\nimport { SplatScene } from './SplatScene.js';\nimport { SplatTree } from './splattree/SplatTree.js';\nimport { WebGLExtensions } from './three-shim/WebGLExtensions.js';\nimport { WebGLCapabilities } from './three-shim/WebGLCapabilities.js';\nimport { uintEncodedFloat, rgbaArrayToInteger } from './Util.js';\nimport { Constants } from './Constants.js';\nimport { SceneRevealMode } from './SceneRevealMode.js';\nimport { LogLevel } from './LogLevel.js';\nimport { getSphericalHarmonicsComponentCountForDegree } from './Util.js';\n\nconst dummyGeometry = new THREE.BufferGeometry();\nconst dummyMaterial = new THREE.MeshBasicMaterial();\n\nconst COVARIANCES_ELEMENTS_PER_SPLAT = 6;\nconst CENTER_COLORS_ELEMENTS_PER_SPLAT = 4;\n\nconst COVARIANCES_ELEMENTS_PER_TEXEL = 4;\nconst CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\nconst TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL = 1;\n\nconst SCENE_FADEIN_RATE_FAST = 0.012;\nconst SCENE_FADEIN_RATE_GRADUAL = 0.003;\n\nconst VISIBLE_REGION_EXPANSION_DELTA = 1;\n\n/**\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\n */\nexport class SplatMesh extends THREE.Mesh {\n\n    constructor(dynamicMode = true, halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1,\n                enableDistancesComputationOnGPU = true, integerBasedDistancesComputation = false,\n                antialiased = false, maxScreenSpaceSplatSize = 2048, logLevel = LogLevel.None, sphericalHarmonicsDegree = 0) {\n        super(dummyGeometry, dummyMaterial);\n        // Reference to a Three.js renderer\n        this.renderer = undefined;\n        // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n        // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\n        // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\n        // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\n        // can be overriden via parameters to the individual functions that are used to retrieve splat data.\n        this.dynamicMode = dynamicMode;\n        // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\n        this.devicePixelRatio = devicePixelRatio;\n        // Use a transform feedback to calculate splat distances from the camera\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\n        // Use a faster integer-based approach for calculating splat distances from the camera\n        this.integerBasedDistancesComputation = integerBasedDistancesComputation;\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\n        // https://github.com/nerfstudio-project/gsplat/pull/117\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n        this.antialiased = antialiased;\n        // Specify the maximum clip space splat size, can help deal with large splats that get too unwieldy\n        this.maxScreenSpaceSplatSize = maxScreenSpaceSplatSize;\n        // The verbosity of console logging\n        this.logLevel = logLevel;\n        // Degree 0 means no spherical harmonics\n        this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\n        this.minSphericalHarmonicsDegree = 0;\n        // The individual splat scenes stored in this splat mesh, each containing their own transform\n        this.scenes = [];\n        // Special octree tailored to SplatMesh instances\n        this.splatTree = null;\n        this.baseSplatTree = null;\n        // Textures in which splat data will be stored for rendering\n        this.splatDataTextures = {};\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'transformIndexesBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n            'transformIndexesLoc': -1,\n            'transformsLocs': []\n        };\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSceneIndexMap = [];\n\n        this.lastBuildSplatCount = 0;\n        this.lastBuildScenes = [];\n        this.lastBuildMaxSplatCount = 0;\n        this.lastBuildSceneCount = 0;\n        this.firstRenderTime = -1;\n        this.finalBuild = false;\n\n        this.webGLUtils = null;\n\n        this.boundingBox = new THREE.Box3();\n        this.calculatedSceneCenter = new THREE.Vector3();\n        this.maxSplatDistanceFromSceneCenter = 0;\n        this.visibleRegionBufferRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n        this.visibleRegionChanging = false;\n\n        this.splatScale = 1.0;\n        this.pointCloudModeEnabled = false;\n\n        this.disposed = false;\n        this.lastRenderer = null;\n        this.visible = false;\n    }\n\n    /**\n     * Build the Three.js material that is used to render the splats.\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n     *                             that the splat count might change\n     * @param {boolean} antialiased If true, calculate compensation factor to deal with gaussians being rendered at a significantly\n     *                              different resolution than that of their training\n     * @param {number} maxScreenSpaceSplatSize The maximum clip space splat size\n     * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\n     * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\n     * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\n     * @return {THREE.ShaderMaterial}\n     */\n    static buildMaterial(dynamicMode = false, antialiased = false, maxScreenSpaceSplatSize = 2048,\n                         splatScale = 1.0, pointCloudModeEnabled = false, maxSphericalHarmonicsDegree = 0) {\n\n        // Contains the code to project 3D covariance to 2D and from there calculate the quad (using the eigen vectors of the\n        // 2D covariance) that is ultimately rasterized\n        let vertexShaderSource = `\n            precision highp float;\n            #include <common>\n\n            attribute uint splatIndex;\n\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D centersColorsTexture;\n            uniform highp sampler2D sphericalHarmonicsTexture;`;\n\n        if (dynamicMode) {\n            vertexShaderSource += `\n                uniform highp usampler2D transformIndexesTexture;\n                uniform highp mat4 transforms[${Constants.MaxScenes}];\n                uniform vec2 transformIndexesTextureSize;\n            `;\n        }\n\n        vertexShaderSource += `\n            uniform vec2 focal;\n            uniform float orthoZoom;\n            uniform int orthographicMode;\n            uniform int pointCloudModeEnabled;\n            uniform float inverseFocalAdjustment;\n            uniform vec2 viewport;\n            uniform vec2 basisViewport;\n            uniform vec2 covariancesTextureSize;\n            uniform vec2 centersColorsTextureSize;\n            uniform int sphericalHarmonicsDegree;\n            uniform vec2 sphericalHarmonicsTextureSize;\n            uniform int sphericalHarmonics8BitMode;\n            uniform float visibleRegionRadius;\n            uniform float visibleRegionFadeStartRadius;\n            uniform float firstRenderTime;\n            uniform float currentTime;\n            uniform int fadeInComplete;\n            uniform vec3 sceneCenter;\n            uniform float splatScale;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            const float sqrt8 = sqrt(8.0);\n            const float minAlpha = 1.0 / 255.0;\n\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\n            vec4 uintToRGBAVec (uint u) {\n               uvec4 urgba = mask4 & u;\n               urgba = urgba >> shift4;\n               vec4 rgba = vec4(urgba) * encodeNorm4;\n               return rgba;\n            }\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            vec2 getDataUVF(in uint sIndex, in float stride, in uint offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(uint(float(sIndex) * stride) + offset) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            const float SH_C1 = 0.4886025119029199f;\n            const float[5] SH_C2 = float[](1.0925484, -1.0925484, 0.3153916, -1.0925484, 0.5462742);\n\n            const float SphericalHarmonics8BitCompressionRange = ${Constants.SphericalHarmonics8BitCompressionRange.toFixed(1)};\n            const float SphericalHarmonics8BitCompressionHalfRange = SphericalHarmonics8BitCompressionRange / 2.0;\n            const vec3 vec8BitSHShift = vec3(SphericalHarmonics8BitCompressionHalfRange);\n\n            void main () {\n\n                uint oddOffset = splatIndex & uint(0x00000001);\n                uint doubleOddOffset = oddOffset * uint(2);\n                bool isEven = oddOffset == uint(0);\n                uint nearestEvenIndex = splatIndex - oddOffset;\n                float fOddOffset = float(oddOffset);\n\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));`;\n\n            if (dynamicMode) {\n                vertexShaderSource += `\n                    uint transformIndex = texture(transformIndexesTexture, getDataUV(1, 0, transformIndexesTextureSize)).r;\n                    mat4 transform = transforms[transformIndex];\n                    mat4 transformModelViewMatrix = modelViewMatrix * transform;\n                `;\n            } else {\n                vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\n            }\n\n            vertexShaderSource += `\n                vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                float clip = 1.2 * clipCenter.w;\n                if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n\n                vPosition = position.xy;\n                vColor = uintToRGBAVec(sampledCenterColor.r);\n            `;\n\n            if (maxSphericalHarmonicsDegree >= 1) {\n\n                vertexShaderSource += `   \n                if (sphericalHarmonicsDegree >= 1) {\n                `;\n\n                if (dynamicMode) {\n                    vertexShaderSource += `\n                        mat4 mTransform = modelMatrix * transform;\n                        vec3 worldViewDir = normalize(splatCenter - vec3(inverse(mTransform) * vec4(cameraPosition, 1.0)));\n                    `;\n                } else {\n                    vertexShaderSource += `\n                        vec3 worldViewDir = normalize(splatCenter - cameraPosition);\n                    `;\n                }\n\n                if (maxSphericalHarmonicsDegree >= 2) {\n                    vertexShaderSource += `\n                        vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, getDataUV(6, 0, sphericalHarmonicsTextureSize));\n                        vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, getDataUV(6, 1, sphericalHarmonicsTextureSize));\n                        vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, getDataUV(6, 2, sphericalHarmonicsTextureSize));\n                        vec3 sh1 = sampledSH0123.rgb;\n                        vec3 sh2 = vec3(sampledSH0123.a, sampledSH4567.rg);\n                        vec3 sh3 = vec3(sampledSH4567.ba, sampledSH891011.r);\n                    `;\n                } else {\n                    vertexShaderSource += `\n                        vec2 shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset, sphericalHarmonicsTextureSize);\n                        vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(1), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(2), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, shUV);\n\n                        vec3 sh1 = vec3(sampledSH0123.rgb) * (1.0 - fOddOffset) + vec3(sampledSH0123.ba, sampledSH4567.r) * fOddOffset;\n                        vec3 sh2 = vec3(sampledSH0123.a, sampledSH4567.rg) * (1.0 - fOddOffset) + vec3(sampledSH4567.gba) * fOddOffset;\n                        vec3 sh3 = vec3(sampledSH4567.ba, sampledSH891011.r) * (1.0 - fOddOffset) + vec3(sampledSH891011.rgb) * fOddOffset;\n                    `;\n                }\n\n                vertexShaderSource += `\n                        if (sphericalHarmonics8BitMode == 1) {\n                            sh1 = sh1 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            sh2 = sh2 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            sh3 = sh3 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                        }\n                        float x = worldViewDir.x;\n                        float y = worldViewDir.y;\n                        float z = worldViewDir.z;\n                        vColor.rgb += SH_C1 * (-sh1 * y + sh2 * z - sh3 * x);\n                `;\n\n                if (maxSphericalHarmonicsDegree >= 2) {\n\n                    vertexShaderSource += `\n                        if (sphericalHarmonicsDegree >= 2) {\n                            float xx = x * x;\n                            float yy = y * y;\n                            float zz = z * z;\n                            float xy = x * y;\n                            float yz = y * z;\n                            float xz = x * z;\n\n                            vec4 sampledSH12131415 = texture(sphericalHarmonicsTexture, getDataUV(6, 3, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH16171819 = texture(sphericalHarmonicsTexture, getDataUV(6, 4, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH20212223 = texture(sphericalHarmonicsTexture, getDataUV(6, 5, sphericalHarmonicsTextureSize));\n\n                            vec3 sh4 = sampledSH891011.gba;\n                            vec3 sh5 = sampledSH12131415.rgb;\n                            vec3 sh6 = vec3(sampledSH12131415.a, sampledSH16171819.rg);\n                            vec3 sh7 = vec3(sampledSH16171819.ba, sampledSH20212223.r);\n                            vec3 sh8 = sampledSH20212223.gba;\n\n                            if (sphericalHarmonics8BitMode == 1) {\n                                sh4 = sh4 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh5 = sh5 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh6 = sh6 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh7 = sh7 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh8 = sh8 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            }\n\n                            vColor.rgb +=\n                                (SH_C2[0] * xy) * sh4 +\n                                (SH_C2[1] * yz) * sh5 +\n                                (SH_C2[2] * (2.0 * zz - xx - yy)) * sh6 +\n                                (SH_C2[3] * xz) * sh7 +\n                                (SH_C2[4] * (xx - yy)) * sh8;\n                        }\n                    `;\n                }\n\n                vertexShaderSource += `\n               \n                }\n\n                `;\n            }\n\n            vertexShaderSource += `\n\n                vec4 sampledCovarianceA = texture(covariancesTexture,\n                                                  getDataUVF(nearestEvenIndex, 1.5, oddOffset, covariancesTextureSize));\n                vec4 sampledCovarianceB = texture(covariancesTexture,\n                                                  getDataUVF(nearestEvenIndex, 1.5, oddOffset + uint(1), covariancesTextureSize));\n\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rgb) * (1.0 - fOddOffset) +\n                                         vec3(sampledCovarianceA.ba, sampledCovarianceB.r) * fOddOffset;\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg) * (1.0 - fOddOffset) +\n                                         vec3(sampledCovarianceB.gba) * fOddOffset;\n\n                // Construct the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n\n                mat3 J;\n                if (orthographicMode == 1) {\n                    // Since the projection is linear, we don't need an approximation\n                    J = transpose(mat3(orthoZoom, 0.0, 0.0,\n                                       0.0, orthoZoom, 0.0,\n                                       0.0, 0.0, 0.0));\n                } else {\n                    // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                    // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                    // require a non-linear component (perspective division) which would yield a non-gaussian result.\n                    float s = 1.0 / (viewCenter.z * viewCenter.z);\n                    J = mat3(\n                        focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                        0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                        0., 0., 0.\n                    );\n                }\n\n                // Concatenate the projection approximation with the model-view transformation\n                mat3 W = transpose(mat3(transformModelViewMatrix));\n                mat3 T = W * J;\n\n                // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n                `;\n\n            if (antialiased) {\n                vertexShaderSource += `\n                    float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                    cov2Dm[0][0] += 0.3;\n                    cov2Dm[1][1] += 0.3;\n                    float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                    float compensation = sqrt(max(detOrig / detBlur, 0.0));\n                `;\n            } else {\n                vertexShaderSource += `\n                    cov2Dm[0][0] += 0.3;\n                    cov2Dm[1][1] += 0.3;\n                    float compensation = 1.0;\n                `;\n            }\n\n            vertexShaderSource += `\n\n                vColor.a *= compensation;\n\n                if (vColor.a < minAlpha) return;\n\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\n                // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * eigen-value), which is\n                // equal to scaling them by sqrt(8) standard deviations.\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\n                // times the maximum eigen-value, or 3 standard deviations. They then use the inverse 2D covariance\n                // matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by calculating the\n                // full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = traceOver2 - term2;\n\n                if (pointCloudModeEnabled == 1) {\n                    eigenValue1 = eigenValue2 = 0.2;\n                }\n\n                if (eigenValue2 <= 0.0) return;\n\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                // since the eigen vectors are orthogonal, we derive the second one from the first\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n\n                // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\n                vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(maxScreenSpaceSplatSize)}.0);\n                vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(maxScreenSpaceSplatSize)}.0);\n\n                if (fadeInComplete == 0) {\n                    float opacityAdjust = 1.0;\n                    float centerDist = length(splatCenter - sceneCenter);\n                    float renderTime = max(currentTime - firstRenderTime, 0.0);\n\n                    float fadeDistance = 0.75;\n                    float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\n                    distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\n                                               (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\n                                               distanceLoadFadeInFactor;\n                    opacityAdjust *= distanceLoadFadeInFactor;\n                    vColor.a *= opacityAdjust;\n                }\n\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\n                                 basisViewport * 2.0 * inverseFocalAdjustment;\n\n                vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n                gl_Position = quadPos;\n\n                // Scale the position data we send to the fragment shader\n                vPosition *= sqrt8;\n            }`;\n\n        const fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n                vec3 color = vColor.rgb;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                gl_FragColor = vec4(color.rgb, opacity);\n            }`;\n\n        const uniforms = {\n            'sceneCenter': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'fadeInComplete': {\n                'type': 'i',\n                'value': 0\n            },\n            'orthographicMode': {\n                'type': 'i',\n                'value': 0\n            },\n            'visibleRegionFadeStartRadius': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'visibleRegionRadius': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'currentTime': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'firstRenderTime': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'covariancesTexture': {\n                'type': 't',\n                'value': null\n            },\n            'centersColorsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sphericalHarmonicsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'focal': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'orthoZoom': {\n                'type': 'f',\n                'value': 1.0\n            },\n            'inverseFocalAdjustment': {\n                'type': 'f',\n                'value': 1.0\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'basisViewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'debugColor': {\n                'type': 'v3',\n                'value': new THREE.Color()\n            },\n            'covariancesTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'centersColorsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'sphericalHarmonicsDegree': {\n                'type': 'i',\n                'value': maxSphericalHarmonicsDegree\n            },\n            'sphericalHarmonicsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'sphericalHarmonics8BitMode': {\n                'type': 'i',\n                'value': 0\n            },\n            'splatScale': {\n                'type': 'f',\n                'value': splatScale\n            },\n            'pointCloudModeEnabled': {\n                'type': 'i',\n                'value': pointCloudModeEnabled ? 1 : 0\n            }\n        };\n\n        if (dynamicMode) {\n            uniforms['transformIndexesTexture'] = {\n                'type': 't',\n                'value': null\n            };\n            const transformMatrices = [];\n            for (let i = 0; i < Constants.MaxScenes; i++) {\n                transformMatrices.push(new THREE.Matrix4());\n            }\n            uniforms['transforms'] = {\n                'type': 'mat4',\n                'value': transformMatrices\n            };\n            uniforms['transformIndexesTextureSize'] = {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            };\n        }\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.NormalBlending,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    /**\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\n     * @return {THREE.InstancedBufferGeometry}\n     */\n    static buildGeomtery(maxSplatCount) {\n\n        const baseGeometry = new THREE.BufferGeometry();\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n        // Vertices for the instanced quad\n        const positionsArray = new Float32Array(4 * 3);\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\n        baseGeometry.setAttribute('position', positions);\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\n        positions.needsUpdate = true;\n\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n        // Splat index buffer\n        const splatIndexArray = new Uint32Array(maxSplatCount);\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatIndex', splatIndexes);\n\n        geometry.instanceCount = 0;\n\n        return geometry;\n    }\n\n    /**\n     * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\n     * transform data (position, scale, rotation) passed to the splat mesh during the build process.\n     * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\n     * @param {Array<object>} sceneOptions Array of options objects: {\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @return {Array<THREE.Matrix4>}\n     */\n    static buildScenes(splatBuffers, sceneOptions) {\n        const scenes = [];\n        scenes.length = splatBuffers.length;\n        for (let i = 0; i < splatBuffers.length; i++) {\n            const splatBuffer = splatBuffers[i];\n            const options = sceneOptions[i] || {};\n            let positionArray = options['position'] || [0, 0, 0];\n            let rotationArray = options['rotation'] || [0, 0, 0, 1];\n            let scaleArray = options['scale'] || [1, 1, 1];\n            const position = new THREE.Vector3().fromArray(positionArray);\n            const rotation = new THREE.Quaternion().fromArray(rotationArray);\n            const scale = new THREE.Vector3().fromArray(scaleArray);\n            scenes[i] = SplatMesh.createScene(splatBuffer, position, rotation, scale, options.splatAlphaRemovalThreshold || 1);\n        }\n        return scenes;\n    }\n\n    static createScene(splatBuffer, position, rotation, scale, minimumAlpha) {\n        return new SplatScene(splatBuffer, position, rotation, scale, minimumAlpha);\n    }\n\n    /**\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\n     * local data within a single scene.\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\n     * @return {object}\n     */\n    static buildSplatIndexMaps(splatBuffers) {\n        const localSplatIndexMap = [];\n        const sceneIndexMap = [];\n        let totalSplatCount = 0;\n        for (let s = 0; s < splatBuffers.length; s++) {\n            const splatBuffer = splatBuffers[s];\n            const maxSplatCount = splatBuffer.getMaxSplatCount();\n            for (let i = 0; i < maxSplatCount; i++) {\n                localSplatIndexMap[totalSplatCount] = i;\n                sceneIndexMap[totalSplatCount] = s;\n                totalSplatCount++;\n            }\n        }\n        return {\n            localSplatIndexMap,\n            sceneIndexMap\n        };\n    }\n\n    /**\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\n     * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                            builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {SplatTree}\n     */\n     buildSplatTree = function(minAlphas = [], onSplatTreeIndexesUpload, onSplatTreeConstruction) {\n        return new Promise((resolve) => {\n            this.disposeSplatTree();\n            // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\n            // be configured on a per-scene basis\n            this.baseSplatTree = new SplatTree(8, 1000);\n            const buildStartTime = performance.now();\n            const splatColor = new THREE.Vector4();\n            this.baseSplatTree.processSplatMesh(this, (splatIndex) => {\n                this.getSplatColor(splatIndex, splatColor);\n                const sceneIndex = this.getSceneIndexForSplat(splatIndex);\n                const minAlpha = minAlphas[sceneIndex] || 1;\n                return splatColor.w >= minAlpha;\n            }, onSplatTreeIndexesUpload, onSplatTreeConstruction)\n            .then(() => {\n                const buildTime = performance.now() - buildStartTime;\n                if (this.logLevel >= LogLevel.Info) console.log('SplatTree build: ' + buildTime + ' ms');\n                if (this.disposed) {\n                    resolve();\n                } else {\n\n                    this.splatTree = this.baseSplatTree;\n                    this.baseSplatTree = null;\n\n                    let leavesWithVertices = 0;\n                    let avgSplatCount = 0;\n                    let maxSplatCount = 0;\n                    let nodeCount = 0;\n\n                    this.splatTree.visitLeaves((node) => {\n                        const nodeSplatCount = node.data.indexes.length;\n                        if (nodeSplatCount > 0) {\n                            avgSplatCount += nodeSplatCount;\n                            maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                            nodeCount++;\n                            leavesWithVertices++;\n                        }\n                    });\n                    if (this.logLevel >= LogLevel.Info) {\n                        console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\n                        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n                        avgSplatCount = avgSplatCount / nodeCount;\n                        console.log(`Avg splat count per node: ${avgSplatCount}`);\n                        console.log(`Total splat count: ${this.getSplatCount()}`);\n                    }\n                    resolve();\n                }\n            });\n        });\n    };\n\n    /**\n     * Construct this instance of SplatMesh.\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\n     * @param {Array<object>} sceneOptions Dynamic options for each scene {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     * }\n     * @param {boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\n     *                                      says to keep the transform from the existing scene.\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                            builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {object} Object containing info about the splats that are updated\n     */\n    build(splatBuffers, sceneOptions, keepSceneTransforms = true, finalBuild = false,\n          onSplatTreeIndexesUpload, onSplatTreeConstruction) {\n\n        this.sceneOptions = sceneOptions;\n        this.finalBuild = finalBuild;\n\n        const maxSplatCount = SplatMesh.getTotalMaxSplatCountForSplatBuffers(splatBuffers);\n\n        const newScenes = SplatMesh.buildScenes(splatBuffers, sceneOptions);\n        if (keepSceneTransforms) {\n            for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\n                const newScene = newScenes[i];\n                const existingScene = this.getScene(i);\n                newScene.copyTransformData(existingScene);\n            }\n        }\n        this.scenes = newScenes;\n\n        let minSphericalHarmonicsDegree = 3;\n        for (let splatBuffer of splatBuffers) {\n            const splatBufferSphericalHarmonicsDegree = splatBuffer.getMinSphericalHarmonicsDegree();\n            if (splatBufferSphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\n                minSphericalHarmonicsDegree = splatBufferSphericalHarmonicsDegree;\n            }\n        }\n        this.minSphericalHarmonicsDegree = Math.min(minSphericalHarmonicsDegree, this.sphericalHarmonicsDegree);\n\n        let splatBuffersChanged = false;\n        if (splatBuffers.length !== this.lastBuildScenes.length) {\n            splatBuffersChanged = true;\n        } else {\n            for (let i = 0; i < splatBuffers.length; i++) {\n                const splatBuffer = splatBuffers[i];\n                if (splatBuffer !== this.lastBuildScenes[i].splatBuffer) {\n                    splatBuffersChanged = true;\n                    break;\n                }\n            }\n        }\n\n        let isUpdateBuild = true;\n        if (this.scenes.length !== 1 ||\n            this.lastBuildSceneCount !== this.scenes.length ||\n            this.lastBuildMaxSplatCount !== maxSplatCount ||\n            splatBuffersChanged) {\n                isUpdateBuild = false;\n       }\n\n       if (!isUpdateBuild) {\n            this.boundingBox = new THREE.Box3();\n            this.maxSplatDistanceFromSceneCenter = 0;\n            this.visibleRegionBufferRadius = 0;\n            this.visibleRegionRadius = 0;\n            this.visibleRegionFadeStartRadius = 0;\n            this.firstRenderTime = -1;\n            this.lastBuildScenes = [];\n            this.lastBuildSplatCount = 0;\n            this.lastBuildMaxSplatCount = 0;\n            this.disposeMeshData();\n            this.geometry = SplatMesh.buildGeomtery(maxSplatCount);\n            this.material = SplatMesh.buildMaterial(this.dynamicMode, this.antialiased, this.maxScreenSpaceSplatSize,\n                                                    this.splatScale, this.pointCloudModeEnabled, this.minSphericalHarmonicsDegree);\n            const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\n            this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\n            this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\n        }\n\n        const splatCount = this.getSplatCount();\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\n        const dataUpdateResults = this.refreshGPUDataFromSplatBuffers(isUpdateBuild);\n\n        for (let i = 0; i < this.scenes.length; i++) {\n            this.lastBuildScenes[i] = this.scenes[i];\n        }\n        this.lastBuildSplatCount = splatCount;\n        this.lastBuildMaxSplatCount = this.getMaxSplatCount();\n        this.lastBuildSceneCount = this.scenes.length;\n\n        if (finalBuild && this.scenes.length > 0) {\n            this.buildSplatTree(sceneOptions.map(options => options.splatAlphaRemovalThreshold || 1),\n                                onSplatTreeIndexesUpload, onSplatTreeConstruction)\n            .then(() => {\n                if (this.onSplatTreeReadyCallback) this.onSplatTreeReadyCallback(this.splatTree);\n            });\n        }\n\n        this.visible = (this.scenes.length > 0);\n\n        return dataUpdateResults;\n    }\n\n    /**\n     * Dispose all resources held by the splat mesh\n     */\n    dispose() {\n        this.disposeMeshData();\n        this.disposeTextures();\n        this.disposeSplatTree();\n        if (this.enableDistancesComputationOnGPU) {\n            if (this.computeDistancesOnGPUSyncTimeout) {\n                clearTimeout(this.computeDistancesOnGPUSyncTimeout);\n                this.computeDistancesOnGPUSyncTimeout = null;\n            }\n            this.disposeDistancesComputationGPUResources();\n        }\n        this.scenes = [];\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'transformIndexesBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n            'transformIndexesLoc': -1,\n            'transformsLocs': []\n        };\n        this.renderer = null;\n\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSceneIndexMap = [];\n\n        this.lastBuildSplatCount = 0;\n        this.lastBuildScenes = [];\n        this.lastBuildMaxSplatCount = 0;\n        this.lastBuildSceneCount = 0;\n        this.firstRenderTime = -1;\n        this.finalBuild = false;\n\n        this.webGLUtils = null;\n\n        this.boundingBox = new THREE.Box3();\n        this.calculatedSceneCenter = new THREE.Vector3();\n        this.maxSplatDistanceFromSceneCenter = 0;\n        this.visibleRegionBufferRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n        this.visibleRegionChanging = false;\n\n        this.splatScale = 1.0;\n        this.pointCloudModeEnabled = false;\n\n        this.disposed = true;\n        this.lastRenderer = null;\n        this.visible = false;\n    }\n\n    /**\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\n     */\n    disposeMeshData() {\n        if (this.geometry && this.geometry !== dummyGeometry) {\n            this.geometry.dispose();\n            this.geometry = null;\n        }\n        if (this.material) {\n            this.material.dispose();\n            this.material = null;\n        }\n    }\n\n    disposeTextures() {\n        for (let textureKey in this.splatDataTextures) {\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\n                const textureContainer = this.splatDataTextures[textureKey];\n                if (textureContainer.texture) {\n                    textureContainer.texture.dispose();\n                    textureContainer.texture = null;\n                }\n            }\n        }\n        this.splatDataTextures = null;\n    }\n\n    disposeSplatTree() {\n        if (this.splatTree) {\n            this.splatTree.dispose();\n            this.splatTree = null;\n        } else if (this.baseSplatTree) {\n            this.baseSplatTree.dispose();\n            this.baseSplatTree = null;\n        }\n    }\n\n    getSplatTree() {\n        return this.splatTree;\n    }\n\n    onSplatTreeReady(callback) {\n        this.onSplatTreeReadyCallback = callback;\n    }\n\n    /**\n     * Get copies of data that are necessary for splat distance computation: splat center positions and splat\n     * scene indexes (necessary for applying dynamic scene transformations during distance computation)\n     * @param {*} start The index at which to start copying data\n     * @param {*} end  The index at which to stop copying data\n     * @return {object}\n     */\n    getDataForDistancesComputation(start, end) {\n        const centers = this.integerBasedDistancesComputation ?\n                        this.getIntegerCenters(start, end, true) :\n                        this.getFloatCenters(start, end, true);\n        const sceneIndexes = this.getSceneIndexes(start, end);\n        return {\n            centers,\n            sceneIndexes\n        };\n    }\n\n    /**\n     * Refresh data textures and GPU buffers with splat data from the splat buffers belonging to this mesh.\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n     * @return {object}\n     */\n    refreshGPUDataFromSplatBuffers(sinceLastBuildOnly) {\n        const splatCount = this.getSplatCount();\n        this.refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly);\n        const updateStart = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n        const { centers, sceneIndexes } = this.getDataForDistancesComputation(updateStart, splatCount - 1);\n        if (this.enableDistancesComputationOnGPU) {\n            this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly);\n        }\n        return {\n            'from': updateStart,\n            'to': splatCount - 1,\n            'count': splatCount - updateStart,\n            'centers': centers,\n            'sceneIndexes': sceneIndexes\n        };\n    }\n\n    /**\n     * Update the GPU buffers that are used for computing splat distances on the GPU.\n     * @param {Array<number>} centers Splat center positions\n     * @param {Array<number>} sceneIndexes Indexes of the scene to which each splat belongs\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n     */\n    refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly = false) {\n        const offset = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n        this.updateGPUCentersBufferForDistancesComputation(sinceLastBuildOnly, centers, offset);\n        this.updateGPUTransformIndexesBufferForDistancesComputation(sinceLastBuildOnly, sceneIndexes, offset);\n    }\n\n    /**\n     * Refresh data textures with data from the splat buffers for this mesh.\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n     */\n    refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly) {\n        if (!sinceLastBuildOnly) {\n            this.setupDataTextures();\n        } else {\n            this.updateDataTextures();\n        }\n        this.updateVisibleRegion(sinceLastBuildOnly);\n    }\n\n    setupDataTextures() {\n        const maxSplatCount = this.getMaxSplatCount();\n        const splatCount = this.getSplatCount();\n\n        this.disposeTextures();\n\n        const computeDataTextureSize = (elementsPerTexel, elementsPerSplatl) => {\n            const texSize = new THREE.Vector2(4096, 1024);\n            while (texSize.x * texSize.y * elementsPerTexel < maxSplatCount * elementsPerSplatl) texSize.y *= 2;\n            return texSize;\n        };\n\n        const covarianceCompressionLevel = this.getTargetCovarianceCompressionLevel();\n        const sphericalHarmonicsCompressionLevel = this.getTargetSphericalHarmonicsCompressionLevel();\n\n        const covariances = new Float32Array(maxSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT);\n        const centers = new Float32Array(maxSplatCount * 3);\n        const colors = new Uint8Array(maxSplatCount * 4);\n\n        let SphericalHarmonicsArrayType = Float32Array;\n        if (sphericalHarmonicsCompressionLevel === 1) SphericalHarmonicsArrayType = Uint16Array;\n        else if (sphericalHarmonicsCompressionLevel === 2) SphericalHarmonicsArrayType = Uint8Array;\n        const sphericalHarmonicsComponentCount = getSphericalHarmonicsComponentCountForDegree(this.minSphericalHarmonicsDegree);\n        let paddedSphericalHarmonicsComponentCount = sphericalHarmonicsComponentCount;\n        if (paddedSphericalHarmonicsComponentCount % 2 !== 0) paddedSphericalHarmonicsComponentCount++;\n        const sphericalHarmonics = this.minSphericalHarmonicsDegree ?\n                                   new SphericalHarmonicsArrayType(maxSplatCount * sphericalHarmonicsComponentCount) : undefined;\n\n        this.fillSplatDataArrays(covariances, centers, colors, sphericalHarmonics, undefined,\n                                 covarianceCompressionLevel, sphericalHarmonicsCompressionLevel);\n\n        // set up covariances data texture\n        const covTexSize = computeDataTextureSize(COVARIANCES_ELEMENTS_PER_TEXEL, 6);\n        let CovariancesDataType = covarianceCompressionLevel >= 1 ? Uint16Array : Float32Array;\n        let covariancesTextureType = covarianceCompressionLevel >= 1 ? THREE.HalfFloatType : THREE.FloatType;\n        const paddedCovariances = new CovariancesDataType(covTexSize.x * covTexSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n        paddedCovariances.set(covariances);\n\n        const covTex = new THREE.DataTexture(paddedCovariances, covTexSize.x, covTexSize.y, THREE.RGBAFormat, covariancesTextureType);\n        covTex.needsUpdate = true;\n        this.material.uniforms.covariancesTexture.value = covTex;\n        this.material.uniforms.covariancesTextureSize.value.copy(covTexSize);\n\n        // set up centers/colors data texture\n        const centersColsTexSize = computeDataTextureSize(CENTER_COLORS_ELEMENTS_PER_TEXEL, 4);\n        const paddedCentersCols = new Uint32Array(centersColsTexSize.x * centersColsTexSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\n        SplatMesh.updateCenterColorsPaddedData(0, splatCount, centers, colors, paddedCentersCols);\n\n        const centersColsTex = new THREE.DataTexture(paddedCentersCols, centersColsTexSize.x, centersColsTexSize.y,\n                                                     THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n        centersColsTex.internalFormat = 'RGBA32UI';\n        centersColsTex.needsUpdate = true;\n        this.material.uniforms.centersColorsTexture.value = centersColsTex;\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColsTexSize);\n        this.material.uniformsNeedUpdate = true;\n\n        this.splatDataTextures = {\n            'baseData': {\n                'covariances': covariances,\n                'centers': centers,\n                'colors': colors,\n                'sphericalHarmonics': sphericalHarmonics\n            },\n            'covariances': {\n                'data': paddedCovariances,\n                'texture': covTex,\n                'size': covTexSize,\n                'compressionLevel': covarianceCompressionLevel\n            },\n            'centerColors': {\n                'data': paddedCentersCols,\n                'texture': centersColsTex,\n                'size': centersColsTexSize\n            }\n        };\n\n        if (sphericalHarmonics) {\n            const sphericalHarmonicsElementsPerTexel = 4;\n            const sphericalHarmonicsTexSize = computeDataTextureSize(sphericalHarmonicsElementsPerTexel,\n                                                                     paddedSphericalHarmonicsComponentCount);\n            const paddedSHArraySize = sphericalHarmonicsTexSize.x * sphericalHarmonicsTexSize.y * sphericalHarmonicsElementsPerTexel;\n            const paddedSHArray = new SphericalHarmonicsArrayType(paddedSHArraySize);\n            for (let c = 0; c < splatCount; c++) {\n                const srcBase = sphericalHarmonicsComponentCount * c;\n                const destBase = paddedSphericalHarmonicsComponentCount * c;\n                for (let i = 0; i < sphericalHarmonicsComponentCount; i++) {\n                    paddedSHArray[destBase + i] = sphericalHarmonics[srcBase + i];\n                }\n            }\n\n            const textureType = sphericalHarmonicsCompressionLevel === 2 ? THREE.UnsignedByteType : THREE.HalfFloatType;\n            const sphericalHarmonicsTex = new THREE.DataTexture(paddedSHArray, sphericalHarmonicsTexSize.x,\n                                                                sphericalHarmonicsTexSize.y, THREE.RGBAFormat, textureType);\n            sphericalHarmonicsTex.needsUpdate = true;\n            this.material.uniforms.sphericalHarmonicsTexture.value = sphericalHarmonicsTex;\n            this.material.uniforms.sphericalHarmonicsTextureSize.value.copy(sphericalHarmonicsTexSize);\n            if (sphericalHarmonicsCompressionLevel === 2) {\n                this.material.uniforms.sphericalHarmonics8BitMode.value = 1;\n            }\n            this.material.uniformsNeedUpdate = true;\n\n            this.splatDataTextures['sphericalHarmonics'] = {\n                'componentCount': sphericalHarmonicsComponentCount,\n                'paddedComponentCount': paddedSphericalHarmonicsComponentCount,\n                'data': paddedSHArray,\n                'texture': sphericalHarmonicsTex,\n                'size': sphericalHarmonicsTexSize,\n                'compressionLevel': sphericalHarmonicsCompressionLevel\n            };\n        }\n\n        if (this.dynamicMode) {\n            const transformIndexesTexSize = computeDataTextureSize(TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL, 4);\n            const paddedTransformIndexes = new Uint32Array(transformIndexesTexSize.x *\n                                                           transformIndexesTexSize.y * TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL);\n            for (let c = 0; c < splatCount; c++) paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n            const transformIndexesTexture = new THREE.DataTexture(paddedTransformIndexes, transformIndexesTexSize.x,\n                                                                  transformIndexesTexSize.y, THREE.RedIntegerFormat,\n                                                                  THREE.UnsignedIntType);\n            transformIndexesTexture.internalFormat = 'R32UI';\n            transformIndexesTexture.needsUpdate = true;\n            this.material.uniforms.transformIndexesTexture.value = transformIndexesTexture;\n            this.material.uniforms.transformIndexesTextureSize.value.copy(transformIndexesTexSize);\n            this.material.uniformsNeedUpdate = true;\n            this.splatDataTextures['tansformIndexes'] = {\n                'data': paddedTransformIndexes,\n                'texture': transformIndexesTexture,\n                'size': transformIndexesTexSize\n            };\n        }\n    }\n\n    updateDataTextures() {\n        const splatCount = this.getSplatCount();\n        const covarianceCompressionLevel = this.splatDataTextures['covariances'].compressionLevel;\n\n        const sphericalHarmonicsTextureDesc = this.splatDataTextures['sphericalHarmonics'];\n        const sphericalHarmonicsCompressionLevel = sphericalHarmonicsTextureDesc ? sphericalHarmonicsTextureDesc.compressionLevel : 0;\n\n        this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances,\n                                 this.splatDataTextures.baseData.centers, this.splatDataTextures.baseData.colors,\n                                 this.splatDataTextures.baseData.sphericalHarmonics, undefined, covarianceCompressionLevel,\n                                 sphericalHarmonicsCompressionLevel, this.lastBuildSplatCount, splatCount - 1, this.lastBuildSplatCount);\n\n        const covariancesTextureDescriptor = this.splatDataTextures['covariances'];\n        const paddedCovariances = covariancesTextureDescriptor.data;\n        const covariancesTexture = covariancesTextureDescriptor.texture;\n        const covarancesStartSplat = this.lastBuildSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT;\n        const covariancesEndSplat = splatCount * COVARIANCES_ELEMENTS_PER_SPLAT;\n        for (let i = covarancesStartSplat; i < covariancesEndSplat; i++) {\n            const covariance = this.splatDataTextures.baseData.covariances[i];\n            paddedCovariances[i] = covariance;\n        }\n        const covariancesTextureProps = this.renderer ? this.renderer.properties.get(covariancesTexture) : null;\n        if (!covariancesTextureProps || !covariancesTextureProps.__webglTexture) {\n            covariancesTexture.needsUpdate = true;\n        } else {\n            const covaranceBytesPerElement = covarianceCompressionLevel ? 2 : 4;\n            this.updateDataTexture(paddedCovariances, covariancesTextureDescriptor, covariancesTextureProps,\n                                   COVARIANCES_ELEMENTS_PER_TEXEL, COVARIANCES_ELEMENTS_PER_SPLAT, covaranceBytesPerElement,\n                                   this.lastBuildSplatCount, splatCount - 1);\n        }\n\n        const centerColorsTextureDescriptor = this.splatDataTextures['centerColors'];\n        const paddedCenterColors = centerColorsTextureDescriptor.data;\n        const centerColorsTexture = centerColorsTextureDescriptor.texture;\n        SplatMesh.updateCenterColorsPaddedData(this.lastBuildSplatCount, splatCount, this.splatDataTextures.baseData.centers,\n                                               this.splatDataTextures.baseData.colors, paddedCenterColors);\n        const centerColorsTextureProps = this.renderer ? this.renderer.properties.get(centerColorsTexture) : null;\n        if (!centerColorsTextureProps || !centerColorsTextureProps.__webglTexture) {\n            centerColorsTexture.needsUpdate = true;\n        } else {\n            this.updateDataTexture(paddedCenterColors, centerColorsTextureDescriptor, centerColorsTextureProps,\n                                   CENTER_COLORS_ELEMENTS_PER_TEXEL, CENTER_COLORS_ELEMENTS_PER_SPLAT, 4,\n                                   this.lastBuildSplatCount, splatCount - 1);\n        }\n\n        if (this.splatDataTextures.baseData.sphericalHarmonics) {\n            const sphericalHarmonicsComponentCount = sphericalHarmonicsTextureDesc.componentCount;\n            const paddedSphericalHarmonicsComponentCount = sphericalHarmonicsTextureDesc.paddedComponentCount;\n            const paddedSHArray = sphericalHarmonicsTextureDesc.data;\n            for (let c = this.lastBuildSplatCount; c < splatCount; c++) {\n                const srcBase = sphericalHarmonicsComponentCount * c;\n                const destBase = paddedSphericalHarmonicsComponentCount * c;\n                for (let i = 0; i < sphericalHarmonicsComponentCount; i++) {\n                    paddedSHArray[destBase + i] = this.splatDataTextures.baseData.sphericalHarmonics[srcBase + i];\n                }\n            }\n\n            const sphericalHarmonicsTex = sphericalHarmonicsTextureDesc.texture;\n            const sphericalHarmonicsTextureProps = this.renderer ? this.renderer.properties.get(sphericalHarmonicsTex) : null;\n            if (!sphericalHarmonicsTextureProps || !sphericalHarmonicsTextureProps.__webglTexture) {\n                sphericalHarmonicsTex.needsUpdate = true;\n            } else {\n                const sphericalHarmonicsElementsPerTexel = 4;\n                let sphericalHarmonicsBytesPerElement = 4;\n                if (sphericalHarmonicsCompressionLevel === 1) sphericalHarmonicsBytesPerElement = 2;\n                else if (sphericalHarmonicsCompressionLevel === 2) sphericalHarmonicsBytesPerElement = 1;\n                this.updateDataTexture(paddedSHArray, sphericalHarmonicsTextureDesc, sphericalHarmonicsTextureProps,\n                                       sphericalHarmonicsElementsPerTexel, paddedSphericalHarmonicsComponentCount,\n                                       sphericalHarmonicsBytesPerElement, this.lastBuildSplatCount, splatCount - 1);\n            }\n        }\n\n        if (this.dynamicMode) {\n            const transformIndexesTexDesc = this.splatDataTextures['tansformIndexes'];\n            const paddedTransformIndexes = transformIndexesTexDesc.data;\n            for (let c = this.lastBuildSplatCount; c < splatCount; c++) {\n                paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n            }\n\n            const transformIndexesTexture = transformIndexesTexDesc.texture;\n            const transformIndexesTextureProps = this.renderer ? this.renderer.properties.get(transformIndexesTexture) : null;\n            if (!transformIndexesTextureProps || !transformIndexesTextureProps.__webglTexture) {\n                transformIndexesTexture.needsUpdate = true;\n            } else {\n                this.updateDataTexture(paddedTransformIndexes, transformIndexesTexDesc, transformIndexesTextureProps, 1, 1, 1,\n                                       this.lastBuildSplatCount, splatCount - 1);\n            }\n        }\n    }\n\n    getTargetCovarianceCompressionLevel() {\n        return this.halfPrecisionCovariancesOnGPU ? 1 : 0;\n    }\n\n    getTargetSphericalHarmonicsCompressionLevel() {\n        return Math.max(1, this.getMaximumSplatBufferCompressionLevel());\n    }\n\n    getMaximumSplatBufferCompressionLevel() {\n        let maxCompressionLevel;\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            if (i === 0 || splatBuffer.compressionLevel > maxCompressionLevel) {\n                maxCompressionLevel = splatBuffer.compressionLevel;\n            }\n        }\n        return maxCompressionLevel;\n    }\n\n    getMinimumSplatBufferCompressionLevel() {\n        let minCompressionLevel;\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            if (i === 0 || splatBuffer.compressionLevel < minCompressionLevel) {\n                minCompressionLevel = splatBuffer.compressionLevel;\n            }\n        }\n        return minCompressionLevel;\n    }\n\n    static computeTextureUpdateRegion(startSplat, endSplat, textureWidth, elementsPerTexel, elementsPerSplat) {\n        const texelsPerSplat = elementsPerSplat / elementsPerTexel;\n\n        const startSplatTexels = startSplat * texelsPerSplat;\n        const startRow = Math.floor(startSplatTexels / textureWidth);\n        const startRowElement = startRow * textureWidth * elementsPerTexel;\n\n        const endSplatTexels = endSplat * texelsPerSplat;\n        const endRow = Math.floor(endSplatTexels / textureWidth);\n        const endRowEndElement = endRow * textureWidth * elementsPerTexel + (textureWidth * elementsPerTexel);\n\n        return {\n            'dataStart': startRowElement,\n            'dataEnd': endRowEndElement,\n            'startRow': startRow,\n            'endRow': endRow\n        };\n    }\n\n    updateDataTexture(paddedData, textureDesc, textureProps, elementsPerTexel, elementsPerSplat, bytesPerElement, from, to) {\n        const gl = this.renderer.getContext();\n        const updateRegion = SplatMesh.computeTextureUpdateRegion(from, to, textureDesc.size.x, elementsPerTexel, elementsPerSplat);\n        const updateElementCount = updateRegion.dataEnd - updateRegion.dataStart;\n        const updateDataView = new paddedData.constructor(paddedData.buffer,\n                                                          updateRegion.dataStart * bytesPerElement, updateElementCount);\n        const updateHeight = updateRegion.endRow - updateRegion.startRow + 1;\n        const dataTexture = textureDesc.texture;\n        const glType = this.webGLUtils.convert(dataTexture.type);\n        const glFormat = this.webGLUtils.convert(dataTexture.format, dataTexture.colorSpace);\n        const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n        gl.bindTexture(gl.TEXTURE_2D, textureProps.__webglTexture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, updateRegion.startRow,\n                         textureDesc.size.x, updateHeight, glFormat, glType, updateDataView);\n        gl.bindTexture(gl.TEXTURE_2D, currentTexture);\n    }\n\n\n    static updateCenterColorsPaddedData(to, from, centers, colors, paddedCenterColors) {\n        for (let c = to; c < from; c++) {\n            const colorsBase = c * 4;\n            const centersBase = c * 3;\n            const centerColorsBase = c * 4;\n            paddedCenterColors[centerColorsBase] = rgbaArrayToInteger(colors, colorsBase);\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\n        }\n    }\n\n    updateVisibleRegion(sinceLastBuildOnly) {\n        const splatCount = this.getSplatCount();\n        const tempCenter = new THREE.Vector3();\n        if (!sinceLastBuildOnly) {\n            const avgCenter = new THREE.Vector3();\n            this.scenes.forEach((scene) => {\n                avgCenter.add(scene.splatBuffer.sceneCenter);\n            });\n            avgCenter.multiplyScalar(1.0 / this.scenes.length);\n            this.calculatedSceneCenter.copy(avgCenter);\n            this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter);\n            this.material.uniformsNeedUpdate = true;\n        }\n\n        const startSplatFormMaxDistanceCalc = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n        for (let i = startSplatFormMaxDistanceCalc; i < splatCount; i++) {\n            this.getSplatCenter(i, tempCenter, false);\n            const distFromCSceneCenter = tempCenter.sub(this.calculatedSceneCenter).length();\n            if (distFromCSceneCenter > this.maxSplatDistanceFromSceneCenter) this.maxSplatDistanceFromSceneCenter = distFromCSceneCenter;\n        }\n\n        if (this.maxSplatDistanceFromSceneCenter - this.visibleRegionBufferRadius > VISIBLE_REGION_EXPANSION_DELTA) {\n            this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\n            this.visibleRegionRadius = Math.max(this.visibleRegionBufferRadius - VISIBLE_REGION_EXPANSION_DELTA, 0.0);\n        }\n        if (this.finalBuild) this.visibleRegionRadius = this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\n        this.updateVisibleRegionFadeDistance();\n    }\n\n    updateVisibleRegionFadeDistance(sceneRevealMode = SceneRevealMode.Default) {\n        const fastFadeRate = SCENE_FADEIN_RATE_FAST;\n        const gradualFadeRate = SCENE_FADEIN_RATE_GRADUAL;\n        const defaultFadeInRate = this.finalBuild ? fastFadeRate : gradualFadeRate;\n        const fadeInRate = sceneRevealMode === SceneRevealMode.Default ? defaultFadeInRate : gradualFadeRate;\n        this.visibleRegionFadeStartRadius = (this.visibleRegionRadius - this.visibleRegionFadeStartRadius) *\n                                             fadeInRate + this.visibleRegionFadeStartRadius;\n        const fadeInPercentage = (this.visibleRegionBufferRadius > 0) ?\n                                 (this.visibleRegionFadeStartRadius / this.visibleRegionBufferRadius) : 0;\n        const fadeInComplete = fadeInPercentage > 0.99;\n        const shaderFadeInComplete = (fadeInComplete || sceneRevealMode === SceneRevealMode.Instant) ? 1 : 0;\n\n        this.material.uniforms.visibleRegionFadeStartRadius.value = this.visibleRegionFadeStartRadius;\n        this.material.uniforms.visibleRegionRadius.value = this.visibleRegionRadius;\n        this.material.uniforms.firstRenderTime.value = this.firstRenderTime;\n        this.material.uniforms.currentTime.value = performance.now();\n        this.material.uniforms.fadeInComplete.value = shaderFadeInComplete;\n        this.material.uniformsNeedUpdate = true;\n        this.visibleRegionChanging = !fadeInComplete;\n    }\n\n    /**\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\n     *                                  every splat.\n     */\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\n        const geometry = this.geometry;\n        geometry.attributes.splatIndex.set(globalIndexes);\n        geometry.attributes.splatIndex.needsUpdate = true;\n        if (renderSplatCount > 0 && this.firstRenderTime === -1) this.firstRenderTime = performance.now();\n        geometry.instanceCount = renderSplatCount;\n    }\n\n    /**\n     * Update the transforms for each scene in this splat mesh from their individual components (position,\n     * quaternion, and scale)\n     */\n    updateTransforms() {\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            scene.updateTransform();\n        }\n    }\n\n    updateUniforms = function() {\n\n        const viewport = new THREE.Vector2();\n\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY,\n                        orthographicMode, orthographicZoom, inverseFocalAdjustment) {\n            const splatCount = this.getSplatCount();\n            if (splatCount > 0) {\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\n                             renderDimensions.y * this.devicePixelRatio);\n                this.material.uniforms.viewport.value.copy(viewport);\n                this.material.uniforms.basisViewport.value.set(1.0 / viewport.x, 1.0 / viewport.y);\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\n                this.material.uniforms.orthographicMode.value = orthographicMode ? 1 : 0;\n                this.material.uniforms.orthoZoom.value = orthographicZoom;\n                this.material.uniforms.inverseFocalAdjustment.value = inverseFocalAdjustment;\n                if (this.dynamicMode) {\n                    for (let i = 0; i < this.scenes.length; i++) {\n                        this.material.uniforms.transforms.value[i].copy(this.getScene(i).transform);\n                    }\n                }\n                this.material.uniformsNeedUpdate = true;\n            }\n        };\n\n    }();\n\n    setSplatScale(splatScale = 1) {\n        this.splatScale = splatScale;\n        this.material.uniforms.splatScale.value = splatScale;\n        this.material.uniformsNeedUpdate = true;\n    }\n\n    getSplatScale() {\n        return this.splatScale;\n    }\n\n    setPointCloudModeEnabled(enabled) {\n        this.pointCloudModeEnabled = enabled;\n        this.material.uniforms.pointCloudModeEnabled.value = enabled ? 1 : 0;\n        this.material.uniformsNeedUpdate = true;\n    }\n\n    getPointCloudModeEnabled() {\n        return this.pointCloudModeEnabled;\n    }\n\n    getSplatDataTextures() {\n        return this.splatDataTextures;\n    }\n\n    getSplatCount() {\n        return SplatMesh.getTotalSplatCountForScenes(this.scenes);\n    }\n\n    static getTotalSplatCountForScenes(scenes) {\n        let totalSplatCount = 0;\n        for (let scene of scenes) {\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getSplatCount();\n        }\n        return totalSplatCount;\n    }\n\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\n        return totalSplatCount;\n    }\n\n    getMaxSplatCount() {\n        return SplatMesh.getTotalMaxSplatCountForScenes(this.scenes);\n    }\n\n    static getTotalMaxSplatCountForScenes(scenes) {\n        let totalSplatCount = 0;\n        for (let scene of scenes) {\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getMaxSplatCount();\n        }\n        return totalSplatCount;\n    }\n\n    static getTotalMaxSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getMaxSplatCount();\n        return totalSplatCount;\n    }\n\n    disposeDistancesComputationGPUResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.vao) {\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\n            this.distancesTransformFeedback.vao = null;\n        }\n        if (this.distancesTransformFeedback.program) {\n            gl.deleteProgram(this.distancesTransformFeedback.program);\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\n            this.distancesTransformFeedback.program = null;\n            this.distancesTransformFeedback.vertexShader = null;\n            this.distancesTransformFeedback.fragmentShader = null;\n        }\n        this.disposeDistancesComputationGPUBufferResources();\n        if (this.distancesTransformFeedback.id) {\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\n            this.distancesTransformFeedback.id = null;\n        }\n    }\n\n    disposeDistancesComputationGPUBufferResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.centersBuffer) {\n            this.distancesTransformFeedback.centersBuffer = null;\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\n        }\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\n            this.distancesTransformFeedback.outDistancesBuffer = null;\n        }\n    }\n\n    /**\n     * Set the Three.js renderer used by this splat mesh\n     * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\n     */\n    setRenderer(renderer) {\n        if (renderer !== this.renderer) {\n            this.renderer = renderer;\n            const gl = this.renderer.getContext();\n            const extensions = new WebGLExtensions(gl);\n            const capabilities = new WebGLCapabilities(gl, extensions, {});\n            extensions.init(capabilities);\n            this.webGLUtils = new THREE.WebGLUtils(gl, extensions, capabilities);\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\n                this.setupDistancesComputationTransformFeedback();\n                const { centers, sceneIndexes } = this.getDataForDistancesComputation(0, this.getSplatCount() - 1);\n                this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes);\n            }\n        }\n    }\n\n    setupDistancesComputationTransformFeedback = function() {\n\n        let currentMaxSplatCount;\n\n        return function() {\n            const maxSplatCount = this.getMaxSplatCount();\n\n            if (!this.renderer) return;\n\n            const rebuildGPUObjects = (this.lastRenderer !== this.renderer);\n            const rebuildBuffers = currentMaxSplatCount !== maxSplatCount;\n\n            if (!rebuildGPUObjects && !rebuildBuffers) return;\n\n            if (rebuildGPUObjects) {\n                this.disposeDistancesComputationGPUResources();\n            } else if (rebuildBuffers) {\n                this.disposeDistancesComputationGPUBufferResources();\n            }\n\n            const gl = this.renderer.getContext();\n\n            const createShader = (gl, type, source) => {\n                const shader = gl.createShader(type);\n                if (!shader) {\n                    console.error('Fatal error: gl could not create a shader object.');\n                    return null;\n                }\n\n                gl.shaderSource(shader, source);\n                gl.compileShader(shader);\n\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n                if (!compiled) {\n                    let typeName = 'unknown';\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\n                    const errors = gl.getShaderInfoLog(shader);\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\n                    gl.deleteShader(shader);\n                    return null;\n                }\n\n                return shader;\n            };\n\n            let vsSource;\n            if (this.integerBasedDistancesComputation) {\n                vsSource =\n                `#version 300 es\n                in ivec4 center;\n                flat out int distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint transformIndex;\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[transformIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            } else {\n                vsSource =\n                `#version 300 es\n                in vec4 center;\n                flat out float distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint transformIndex;\n                        uniform mat4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[transformIndex] * vec4(center.xyz, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            }\n\n            const fsSource =\n            `#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            `;\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\n            }\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n            if (rebuildGPUObjects) {\n                const program = gl.createProgram();\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\n                if (!vertexShader || !fragmentShader) {\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\n                }\n                gl.attachShader(program, vertexShader);\n                gl.attachShader(program, fragmentShader);\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\n                gl.linkProgram(program);\n\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n                if (!linked) {\n                    const error = gl.getProgramInfoLog(program);\n                    console.error('Fatal error: Failed to link program: ' + error);\n                    gl.deleteProgram(program);\n                    gl.deleteShader(fragmentShader);\n                    gl.deleteShader(vertexShader);\n                    throw new Error('Could not link shaders for distances computation on GPU.');\n                }\n\n                this.distancesTransformFeedback.program = program;\n                this.distancesTransformFeedback.vertexShader = vertexShader;\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\n            }\n\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            this.distancesTransformFeedback.centersLoc =\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\n            if (this.dynamicMode) {\n                this.distancesTransformFeedback.transformIndexesLoc =\n                    gl.getAttribLocation(this.distancesTransformFeedback.program, 'transformIndex');\n                for (let i = 0; i < this.scenes.length; i++) {\n                    this.distancesTransformFeedback.transformsLocs[i] =\n                        gl.getUniformLocation(this.distancesTransformFeedback.program, `transforms[${i}]`);\n                }\n            } else {\n                this.distancesTransformFeedback.modelViewProjLoc =\n                    gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n                if (this.integerBasedDistancesComputation) {\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n                } else {\n                    gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\n                }\n\n                if (this.dynamicMode) {\n                    this.distancesTransformFeedback.transformIndexesBuffer = gl.createBuffer();\n                    gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n                    gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n                }\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, maxSplatCount * 4, gl.STATIC_READ);\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\n            }\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            this.lastRenderer = this.renderer;\n            currentMaxSplatCount = maxSplatCount;\n        };\n\n    }();\n\n    /**\n     * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n     * @param {Array<number>} centers The splat centers data\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n     */\n    updateGPUCentersBufferForDistancesComputation(isUpdate, centers, offsetSplats) {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        const ArrayType = this.integerBasedDistancesComputation ? Uint32Array : Float32Array;\n        const attributeBytesPerCenter = 16;\n        const subBufferOffset = offsetSplats * attributeBytesPerCenter;\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n\n        if (isUpdate) {\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, centers);\n        } else {\n            const maxArray = new ArrayType(this.getMaxSplatCount() * attributeBytesPerCenter);\n            maxArray.set(centers);\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n        }\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n     * @param {Array<number>} transformIndexes The splat transform indexes\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n     */\n    updateGPUTransformIndexesBufferForDistancesComputation(isUpdate, transformIndexes, offsetSplats) {\n\n        if (!this.renderer || !this.dynamicMode) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        const subBufferOffset = offsetSplats * 4;\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n\n        if (isUpdate) {\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, transformIndexes);\n        } else {\n            const maxArray = new Uint32Array(this.getMaxSplatCount() * 4);\n            maxArray.set(transformIndexes);\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n        }\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Get a typed array containing a mapping from global splat indexes to their scene index.\n     * @param {number} start Starting splat index to store\n     * @param {number} end Ending splat index to store\n     * @return {Uint32Array}\n     */\n    getSceneIndexes(start, end) {\n\n        let sceneIndexes;\n        const fillCount = end - start + 1;\n        sceneIndexes = new Uint32Array(fillCount);\n        for (let i = start; i <= end; i++) {\n            sceneIndexes[i] = this.globalSplatIndexToSceneIndexMap[i];\n        }\n\n        return sceneIndexes;\n    }\n\n    /**\n     * Fill 'array' with the transforms for each scene in this splat mesh.\n     * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\n     */\n    fillTransformsArray = function() {\n\n        const tempArray = [];\n\n        return function(array) {\n            if (tempArray.length !== array.length) tempArray.length = array.length;\n            for (let i = 0; i < this.scenes.length; i++) {\n                const sceneTransform = this.getScene(i).transform;\n                const sceneTransformElements = sceneTransform.elements;\n                for (let j = 0; j < 16; j++) {\n                    tempArray[i * 16 + j] = sceneTransformElements[j];\n                }\n            }\n            array.set(tempArray);\n        };\n\n    }();\n\n    computeDistancesOnGPU = function() {\n\n        const tempMatrix = new THREE.Matrix4();\n\n        return function(modelViewProjMatrix, outComputedDistances) {\n            if (!this.renderer) return;\n\n            // console.time(\"gpu_compute_distances\");\n            const gl = this.renderer.getContext();\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            gl.enable(gl.RASTERIZER_DISCARD);\n\n            if (this.dynamicMode) {\n                for (let i = 0; i < this.scenes.length; i++) {\n                    tempMatrix.copy(this.getScene(i).transform);\n                    tempMatrix.premultiply(modelViewProjMatrix);\n\n                    if (this.integerBasedDistancesComputation) {\n                        const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\n                        const iTransform = [iTempMatrix[2], iTempMatrix[6], iTempMatrix[10], iTempMatrix[14]];\n                        gl.uniform4i(this.distancesTransformFeedback.transformsLocs[i], iTransform[0], iTransform[1],\n                                                                                        iTransform[2], iTransform[3]);\n                    } else {\n                        gl.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[i], false, tempMatrix.elements);\n                    }\n                }\n            } else {\n                if (this.integerBasedDistancesComputation) {\n                    const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\n                    const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\n                    gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\n                } else {\n                    const viewProj = [modelViewProjMatrix.elements[2], modelViewProjMatrix.elements[6], modelViewProjMatrix.elements[10]];\n                    gl.uniform3f(this.distancesTransformFeedback.modelViewProjLoc, viewProj[0], viewProj[1], viewProj[2]);\n                }\n            }\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n            gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n            if (this.integerBasedDistancesComputation) {\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n            } else {\n                gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\n            }\n\n            if (this.dynamicMode) {\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n            }\n\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            gl.beginTransformFeedback(gl.POINTS);\n            gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\n            gl.endTransformFeedback();\n\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n            gl.disable(gl.RASTERIZER_DISCARD);\n\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n\n            const promise = new Promise((resolve) => {\n                const checkSync = () => {\n                    if (this.disposed) {\n                        resolve();\n                    } else {\n                        const timeout = 0;\n                        const bitflags = 0;\n                        const status = gl.clientWaitSync(sync, bitflags, timeout);\n                        switch (status) {\n                            case gl.TIMEOUT_EXPIRED:\n                                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n                                return this.computeDistancesOnGPUSyncTimeout;\n                            case gl.WAIT_FAILED:\n                                throw new Error('should never get here');\n                            default:\n                                this.computeDistancesOnGPUSyncTimeout = null;\n                                gl.deleteSync(sync);\n                                const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n                                gl.bindVertexArray(this.distancesTransformFeedback.vao);\n                                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n                                gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\n                                gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n                                if (currentVao) gl.bindVertexArray(currentVao);\n\n                                // console.timeEnd(\"gpu_compute_distances\");\n\n                                resolve();\n                        }\n                    }\n                };\n                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n            });\n\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            return promise;\n        };\n\n    }();\n\n    /**\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\n     * buffer, and the corresponding transform)\n     * @param {number} globalIndex Global splat index\n     * @param {object} paramsObj Object in which to store local data\n     * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\n     *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\n     *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\n     *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\n     *                                       be null.\n     */\n    getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\n        if (returnSceneTransform === undefined || returnSceneTransform === null) {\n            returnSceneTransform = this.dynamicMode ? false : true;\n        }\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\n        paramsObj.sceneTransform = returnSceneTransform ? this.getSceneTransformForSplat(globalIndex) : null;\n    }\n\n    /**\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\n     * @param {Float32Array} covariances Target storage for splat covariances\n     * @param {Float32Array} centers Target storage for splat centers\n     * @param {Uint8Array} colors Target storage for splat colors\n     * @param {Float32Array} sphericalHarmonics Target storage for spherical harmonics\n     * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\n     *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\n     *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\n     * @param {number} covarianceCompressionLevel The compression level for covariances in the destination array\n     * @param {number} sphericalHarmonicsCompressionLevel The compression level for spherical harmonics in the destination array\n     * @param {number} srcStart The start location from which to pull source data\n     * @param {number} srcEnd The end location from which to pull source data\n     * @param {number} destStart The start location from which to write data\n     */\n    fillSplatDataArrays(covariances, centers, colors, sphericalHarmonics, applySceneTransform,\n                        covarianceCompressionLevel = 0, sphericalHarmonicsCompressionLevel = 1, srcStart, srcEnd, destStart = 0) {\n\n        for (let i = 0; i < this.scenes.length; i++) {\n            if (applySceneTransform === undefined || applySceneTransform === null) {\n                applySceneTransform = this.dynamicMode ? false : true;\n            }\n\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            const sceneTransform = applySceneTransform ? scene.transform : null;\n            if (covariances) {\n                splatBuffer.fillSplatCovarianceArray(covariances, sceneTransform,\n                                                     srcStart, srcEnd, destStart, covarianceCompressionLevel);\n            }\n            if (centers) splatBuffer.fillSplatCenterArray(centers, sceneTransform, srcStart, srcEnd, destStart);\n            if (colors) splatBuffer.fillSplatColorArray(colors, scene.minimumAlpha, srcStart, srcEnd, destStart);\n            if (sphericalHarmonics) {\n                splatBuffer.fillSphericalHarmonicsArray(sphericalHarmonics, this.minSphericalHarmonicsDegree,\n                                                        sceneTransform, srcStart, srcEnd, destStart, sphericalHarmonicsCompressionLevel);\n            }\n            destStart += splatBuffer.getSplatCount();\n        }\n    }\n\n    /**\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\n     * @param {number} start The index at which to start retrieving data\n     * @param {number} end The index at which to stop retrieving data\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n     * @return {Int32Array}\n     */\n    getIntegerCenters(start, end, padFour = false) {\n        const splatCount = end - start + 1;\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, floatCenters, null, null, undefined, undefined, undefined, start);\n        let intCenters;\n        let componentCount = padFour ? 4 : 3;\n        intCenters = new Int32Array(splatCount * componentCount);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\n            }\n            if (padFour) intCenters[i * componentCount + 3] = 1000;\n        }\n        return intCenters;\n    }\n\n    /**\n     * Returns an array of splat centers, transformed as appropriate, optionally padded.\n     * @param {number} start The index at which to start retrieving data\n     * @param {number} end The index at which to stop retrieving data\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n     * @return {Float32Array}\n     */\n    getFloatCenters(start, end, padFour = false) {\n        const splatCount = end - start + 1;\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, floatCenters, null, null, undefined, undefined, undefined, start);\n        if (!padFour) return floatCenters;\n        let paddedFloatCenters = new Float32Array(splatCount * 4);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\n            }\n            paddedFloatCenters[i * 4 + 3] = 1.0;\n        }\n        return paddedFloatCenters;\n    }\n\n    /**\n     * Get the center for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\n     *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\n     *                                      scene transform will never be applied. If undefined, the default behavior will apply.\n     */\n    getSplatCenter = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outCenter, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Get the scale and rotation for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\n     *                                      'applySceneTransform' is true, the scene transform will always be applied and if\n     *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\n     *                                      the default behavior will apply.\n     */\n    getSplatScaleAndRotation = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outScale, outRotation, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Get the color for a splat.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\n     */\n    getSplatColor = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outColor) {\n            this.getLocalSplatParameters(globalIndex, paramsObj);\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor);\n        };\n\n    }();\n\n    /**\n     * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\n     */\n    getSceneTransform(sceneIndex, outTransform) {\n        const scene = this.getScene(sceneIndex);\n        scene.updateTransform();\n        outTransform.copy(scene.transform);\n    }\n\n    /**\n     * Get the scene at 'sceneIndex'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @return {SplatScene}\n     */\n    getScene(sceneIndex) {\n        if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\n            throw new Error('SplatMesh::getScene() -> Invalid scene index.');\n        }\n        return this.scenes[sceneIndex];\n    }\n\n    getSplatBufferForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).splatBuffer;\n    }\n\n    getSceneIndexForSplat(globalIndex) {\n        return this.globalSplatIndexToSceneIndexMap[globalIndex];\n    }\n\n    getSceneTransformForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).transform;\n    }\n\n    getSplatLocalIndex(globalIndex) {\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\n    }\n\n    static getIntegerMatrixArray(matrix) {\n        const matrixElements = matrix.elements;\n        const intMatrixArray = [];\n        for (let i = 0; i < 16; i++) {\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\n        }\n        return intMatrixArray;\n    }\n}\n","import SorterWasm from './sorter.wasm';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n\n    let wasmInstance;\n    let wasmMemory;\n    let useSharedMemory;\n    let integerBasedSort;\n    let dynamicMode;\n    let splatCount;\n    let indexesToSortOffset;\n    let sortedIndexesOffset;\n    let transformIndexesOffset;\n    let transformsOffset;\n    let precomputedDistancesOffset;\n    let mappedDistancesOffset;\n    let frequenciesOffset;\n    let centersOffset;\n    let modelViewProjOffset;\n    let countsZero;\n    let sortedIndexesOut;\n\n    let Constants;\n\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances, copyTransforms) {\n        const sortStartTime = performance.now();\n\n        if (!useSharedMemory) {\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / Constants.BytesPerInt);\n            indexesToSort.set(copyIndexesToSort);\n            const transforms = new Float32Array(wasmMemory, transformsOffset, copyTransforms.byteLength / Constants.BytesPerFloat);\n            transforms.set(copyTransforms);\n            if (usePrecomputedDistances) {\n                let precomputedDistances;\n                if (integerBasedSort) {\n                    precomputedDistances = new Int32Array(wasmMemory, precomputedDistancesOffset,\n                                                          copyPrecomputedDistances.byteLength / Constants.BytesPerInt);\n                } else {\n                    precomputedDistances = new Float32Array(wasmMemory, precomputedDistancesOffset,\n                                                            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat);\n                }\n                precomputedDistances.set(copyPrecomputedDistances);\n            }\n        }\n\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\n        new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\n                                         sortedIndexesOffset, transformIndexesOffset, transformsOffset, Constants.DepthMapRange,\n                                         splatSortCount, splatRenderCount, splatCount, usePrecomputedDistances, integerBasedSort,\n                                         dynamicMode);\n\n        const sortMessage = {\n            'sortDone': true,\n            'splatSortCount': splatSortCount,\n            'splatRenderCount': splatRenderCount,\n            'sortTime': 0\n        };\n        if (!useSharedMemory) {\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\n            if (!sortedIndexesOut || sortedIndexesOut.length < splatRenderCount) {\n                sortedIndexesOut = new Uint32Array(splatRenderCount);\n            }\n            sortedIndexesOut.set(sortedIndexes);\n            sortMessage.sortedIndexes = sortedIndexesOut;\n        }\n        const sortEndTime = performance.now();\n\n        sortMessage.sortTime = sortEndTime - sortStartTime;\n\n        self.postMessage(sortMessage);\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.centers) {\n            centers = e.data.centers;\n            transformIndexes = e.data.transformIndexes;\n            if (integerBasedSort) {\n                new Int32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerInt * 4,\n                               e.data.range.count * 4).set(new Int32Array(centers));\n            } else {\n                new Float32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerFloat * 4,\n                                 e.data.range.count * 4).set(new Float32Array(centers));\n            }\n            if (dynamicMode) {\n                new Uint32Array(wasmMemory, transformIndexesOffset + e.data.range.from * 4,\n                                e.data.range.count).set(new Uint32Array(transformIndexes));\n            }\n            self.postMessage({\n                'centerDataSet': true,\n            });\n        } else if (e.data.sort) {\n            const renderCount = e.data.sort.splatRenderCount || 0;\n            const sortCount = e.data.sort.splatSortCount || 0;\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\n\n            let copyIndexesToSort;\n            let copyPrecomputedDistances;\n            let copyTransforms;\n            if (!useSharedMemory) {\n                copyIndexesToSort = e.data.sort.indexesToSort;\n                copyTransforms = e.data.sort.transforms;\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\n            }\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\n                 copyIndexesToSort, copyPrecomputedDistances, copyTransforms);\n        } else if (e.data.init) {\n            // Yep, this is super hacky and gross :(\n            Constants = e.data.init.Constants;\n\n            splatCount = e.data.init.splatCount;\n            useSharedMemory = e.data.init.useSharedMemory;\n            integerBasedSort = e.data.init.integerBasedSort;\n            dynamicMode = e.data.init.dynamicMode;\n\n            const CENTERS_BYTES_PER_ENTRY = integerBasedSort ? (Constants.BytesPerInt * 4) : (Constants.BytesPerFloat * 4);\n\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n\n            const matrixSize = 16 * Constants.BytesPerFloat;\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\n            const memoryRequiredForModelViewProjectionMatrix = matrixSize;\n            const memoryRequiredForPrecomputedDistances = integerBasedSort ?\n                                                          (splatCount * Constants.BytesPerInt) : (splatCount * Constants.BytesPerFloat);\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\n            const memoryRequiredforTransformIndexes = dynamicMode ? (splatCount * Constants.BytesPerInt) : 0;\n            const memoryRequiredforTransforms = dynamicMode ? (Constants.MaxScenes * matrixSize) : 0;\n            const extraMemory = Constants.MemoryPageSize * 32;\n\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\n                                        memoryRequiredForCenters +\n                                        memoryRequiredForModelViewProjectionMatrix +\n                                        memoryRequiredForPrecomputedDistances +\n                                        memoryRequiredForMappedDistances +\n                                        memoryRequiredForIntermediateSortBuffers +\n                                        memoryRequiredForSortedIndexes +\n                                        memoryRequiredforTransformIndexes +\n                                        memoryRequiredforTransforms +\n                                        extraMemory;\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\n            const sorterWasmImport = {\n                module: {},\n                env: {\n                    memory: new WebAssembly.Memory({\n                        initial: totalPagesRequired * 2,\n                        maximum: totalPagesRequired * 4,\n                        shared: true,\n                    }),\n                }\n            };\n            WebAssembly.compile(sorterWasmBytes)\n            .then((wasmModule) => {\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n            })\n            .then((instance) => {\n                wasmInstance = instance;\n                indexesToSortOffset = 0;\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\n                transformIndexesOffset = sortedIndexesOffset + memoryRequiredForSortedIndexes;\n                transformsOffset = transformIndexesOffset + memoryRequiredforTransformIndexes;\n                wasmMemory = sorterWasmImport.env.memory.buffer;\n                if (useSharedMemory) {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true,\n                        'indexesToSortBuffer': wasmMemory,\n                        'indexesToSortOffset': indexesToSortOffset,\n                        'sortedIndexesBuffer': wasmMemory,\n                        'sortedIndexesOffset': sortedIndexesOffset,\n                        'precomputedDistancesBuffer': wasmMemory,\n                        'precomputedDistancesOffset': precomputedDistancesOffset,\n                        'transformsBuffer': wasmMemory,\n                        'transformsOffset': transformsOffset\n                    });\n                } else {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true\n                    });\n                }\n            });\n        }\n    };\n}\n\nexport function createSortWorker(splatCount, useSharedMemory, integerBasedSort, dynamicMode) {\n    const worker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n\n    const sorterWasmBinaryString = atob(SorterWasm);\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n    }\n\n    worker.postMessage({\n        'init': {\n            'sorterWasmBytes': sorterWasmBytes.buffer,\n            'splatCount': splatCount,\n            'useSharedMemory': useSharedMemory,\n            'integerBasedSort': integerBasedSort,\n            'dynamicMode': dynamicMode,\n            // Super hacky\n            'Constants': {\n                'BytesPerFloat': Constants.BytesPerFloat,\n                'BytesPerInt': Constants.BytesPerInt,\n                'DepthMapRange': Constants.DepthMapRange,\n                'MemoryPageSize': Constants.MemoryPageSize,\n                'MaxScenes': Constants.MaxScenes\n            }\n        }\n    });\n    return worker;\n}\n","export const WebXRMode = {\n    None: 0,\n    VR: 1,\n    AR: 2\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class VRButton {\n\n    static createButton( renderer ) {\n\n        const button = document.createElement( 'button' );\n\n        function showEnterVR( /* device */ ) {\n\n            let currentSession = null;\n\n            async function onSessionStarted( session ) {\n\n                session.addEventListener( 'end', onSessionEnded );\n\n                await renderer.xr.setSession( session );\n                button.textContent = 'EXIT VR';\n\n                currentSession = session;\n\n            }\n\n            function onSessionEnded( /* event */ ) {\n\n                currentSession.removeEventListener( 'end', onSessionEnded );\n\n                button.textContent = 'ENTER VR';\n\n                currentSession = null;\n\n            }\n\n            //\n\n            button.style.display = '';\n\n            button.style.cursor = 'pointer';\n            button.style.left = 'calc(50% - 50px)';\n            button.style.width = '100px';\n\n            button.textContent = 'ENTER VR';\n\n            // WebXR's requestReferenceSpace only works if the corresponding feature\n            // was requested at session creation time. For simplicity, just ask for\n            // the interesting ones as optional features, but be aware that the\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\n            // ('local' is always available for immersive sessions and doesn't need to\n            // be requested separately.)\n\n            const sessionInit = { optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers'] };\n\n            button.onmouseenter = function() {\n\n                button.style.opacity = '1.0';\n\n            };\n\n            button.onmouseleave = function() {\n\n                button.style.opacity = '0.5';\n\n            };\n\n            button.onclick = function() {\n\n                if ( currentSession === null ) {\n\n                    navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );\n\n                } else {\n\n                    currentSession.end();\n\n                    if ( navigator.xr.offerSession !== undefined ) {\n\n                        navigator.xr.offerSession( 'immersive-vr', sessionInit )\n                            .then( onSessionStarted )\n                            .catch( ( err ) => {\n\n                                console.warn( err );\n\n                            } );\n\n                    }\n\n                }\n\n            };\n\n            if ( navigator.xr.offerSession !== undefined ) {\n\n                navigator.xr.offerSession( 'immersive-vr', sessionInit )\n                    .then( onSessionStarted )\n                    .catch( ( err ) => {\n\n                        console.warn( err );\n\n                    } );\n\n            }\n\n        }\n\n        function disableButton() {\n\n            button.style.display = '';\n\n            button.style.cursor = 'auto';\n            button.style.left = 'calc(50% - 75px)';\n            button.style.width = '150px';\n\n            button.onmouseenter = null;\n            button.onmouseleave = null;\n\n            button.onclick = null;\n\n        }\n\n        function showWebXRNotFound() {\n\n            disableButton();\n\n            button.textContent = 'VR NOT SUPPORTED';\n\n        }\n\n        function showVRNotAllowed( exception ) {\n\n            disableButton();\n\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n            button.textContent = 'VR NOT ALLOWED';\n\n        }\n\n        function stylizeElement( element ) {\n\n            element.style.position = 'absolute';\n            element.style.bottom = '20px';\n            element.style.padding = '12px 6px';\n            element.style.border = '1px solid #fff';\n            element.style.borderRadius = '4px';\n            element.style.background = 'rgba(0,0,0,0.1)';\n            element.style.color = '#fff';\n            element.style.font = 'normal 13px sans-serif';\n            element.style.textAlign = 'center';\n            element.style.opacity = '0.5';\n            element.style.outline = 'none';\n            element.style.zIndex = '999';\n\n        }\n\n        if ( 'xr' in navigator ) {\n\n            button.id = 'VRButton';\n            button.style.display = 'none';\n\n            stylizeElement( button );\n\n            navigator.xr.isSessionSupported( 'immersive-vr' ).then( function( supported ) {\n\n                supported ? showEnterVR() : showWebXRNotFound();\n\n                if ( supported && VRButton.xrSessionIsGranted ) {\n\n                    button.click();\n\n                }\n\n            } ).catch( showVRNotAllowed );\n\n            return button;\n\n        } else {\n\n            const message = document.createElement( 'a' );\n\n            if ( window.isSecureContext === false ) {\n\n                message.href = document.location.href.replace( /^http:/, 'https:' );\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n            } else {\n\n                message.href = 'https://immersiveweb.dev/';\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\n\n            }\n\n            message.style.left = 'calc(50% - 90px)';\n            message.style.width = '180px';\n            message.style.textDecoration = 'none';\n\n            stylizeElement( message );\n\n            return message;\n\n        }\n\n    }\n\n    static registerSessionGrantedListener() {\n\n        if ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\n\n            // WebXRViewer (based on Firefox) has a bug where addEventListener\n            // throws a silent exception and aborts execution entirely.\n            if ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\n\n            navigator.xr.addEventListener( 'sessiongranted', () => {\n\n                VRButton.xrSessionIsGranted = true;\n\n            } );\n\n        }\n\n    }\n\n}\n\nVRButton.xrSessionIsGranted = false;\nVRButton.registerSessionGrantedListener();\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class ARButton {\n\n    static createButton( renderer, sessionInit = {} ) {\n\n        const button = document.createElement( 'button' );\n\n        function showStartAR( /* device */ ) {\n\n            if ( sessionInit.domOverlay === undefined ) {\n\n                const overlay = document.createElement( 'div' );\n                overlay.style.display = 'none';\n                document.body.appendChild( overlay );\n\n                const svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' );\n                svg.setAttribute( 'width', 38 );\n                svg.setAttribute( 'height', 38 );\n                svg.style.position = 'absolute';\n                svg.style.right = '20px';\n                svg.style.top = '20px';\n                svg.addEventListener( 'click', function() {\n\n                    currentSession.end();\n\n                } );\n                overlay.appendChild( svg );\n\n                const path = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\n                path.setAttribute( 'd', 'M 12,12 L 28,28 M 28,12 12,28' );\n                path.setAttribute( 'stroke', '#fff' );\n                path.setAttribute( 'stroke-width', 2 );\n                svg.appendChild( path );\n\n                if ( sessionInit.optionalFeatures === undefined ) {\n\n                    sessionInit.optionalFeatures = [];\n\n                }\n\n                sessionInit.optionalFeatures.push( 'dom-overlay' );\n                sessionInit.domOverlay = { root: overlay };\n\n            }\n\n            //\n\n            let currentSession = null;\n\n            async function onSessionStarted( session ) {\n\n                session.addEventListener( 'end', onSessionEnded );\n\n                renderer.xr.setReferenceSpaceType( 'local' );\n\n                await renderer.xr.setSession( session );\n\n                button.textContent = 'STOP AR';\n                sessionInit.domOverlay.root.style.display = '';\n\n                currentSession = session;\n\n            }\n\n            function onSessionEnded( /* event */ ) {\n\n                currentSession.removeEventListener( 'end', onSessionEnded );\n\n                button.textContent = 'START AR';\n                sessionInit.domOverlay.root.style.display = 'none';\n\n                currentSession = null;\n\n            }\n\n            //\n\n            button.style.display = '';\n\n            button.style.cursor = 'pointer';\n            button.style.left = 'calc(50% - 50px)';\n            button.style.width = '100px';\n\n            button.textContent = 'START AR';\n\n            button.onmouseenter = function() {\n\n                button.style.opacity = '1.0';\n\n            };\n\n            button.onmouseleave = function() {\n\n                button.style.opacity = '0.5';\n\n            };\n\n            button.onclick = function() {\n\n                if ( currentSession === null ) {\n\n                    navigator.xr.requestSession( 'immersive-ar', sessionInit ).then( onSessionStarted );\n\n                } else {\n\n                    currentSession.end();\n\n                    if ( navigator.xr.offerSession !== undefined ) {\n\n                        navigator.xr.offerSession( 'immersive-ar', sessionInit )\n                            .then( onSessionStarted )\n                            .catch( ( err ) => {\n\n                                console.warn( err );\n\n                            } );\n\n                    }\n\n                }\n\n            };\n\n            if ( navigator.xr.offerSession !== undefined ) {\n\n                navigator.xr.offerSession( 'immersive-ar', sessionInit )\n                    .then( onSessionStarted )\n                    .catch( ( err ) => {\n\n                        console.warn( err );\n\n                    } );\n\n            }\n\n        }\n\n        function disableButton() {\n\n            button.style.display = '';\n\n            button.style.cursor = 'auto';\n            button.style.left = 'calc(50% - 75px)';\n            button.style.width = '150px';\n\n            button.onmouseenter = null;\n            button.onmouseleave = null;\n\n            button.onclick = null;\n\n        }\n\n        function showARNotSupported() {\n\n            disableButton();\n\n            button.textContent = 'AR NOT SUPPORTED';\n\n        }\n\n        function showARNotAllowed( exception ) {\n\n            disableButton();\n\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n            button.textContent = 'AR NOT ALLOWED';\n\n        }\n\n        function stylizeElement( element ) {\n\n            element.style.position = 'absolute';\n            element.style.bottom = '20px';\n            element.style.padding = '12px 6px';\n            element.style.border = '1px solid #fff';\n            element.style.borderRadius = '4px';\n            element.style.background = 'rgba(0,0,0,0.1)';\n            element.style.color = '#fff';\n            element.style.font = 'normal 13px sans-serif';\n            element.style.textAlign = 'center';\n            element.style.opacity = '0.5';\n            element.style.outline = 'none';\n            element.style.zIndex = '999';\n\n        }\n\n        if ( 'xr' in navigator ) {\n\n            button.id = 'ARButton';\n            button.style.display = 'none';\n\n            stylizeElement( button );\n\n            navigator.xr.isSessionSupported( 'immersive-ar' ).then( function( supported ) {\n\n                supported ? showStartAR() : showARNotSupported();\n\n            } ).catch( showARNotAllowed );\n\n            return button;\n\n        } else {\n\n            const message = document.createElement( 'a' );\n\n            if ( window.isSecureContext === false ) {\n\n                message.href = document.location.href.replace( /^http:/, 'https:' );\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n            } else {\n\n                message.href = 'https://immersiveweb.dev/';\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\n\n            }\n\n            message.style.left = 'calc(50% - 90px)';\n            message.style.width = '180px';\n            message.style.textDecoration = 'none';\n\n            stylizeElement( message );\n\n            return message;\n\n        }\n\n    }\n\n}\n","export const RenderMode = {\n    Always: 0,\n    OnChange: 1,\n    Never: 2\n};\n","import * as THREE from 'three';\nimport { OrbitControls } from './OrbitControls.js';\nimport { PlyLoader } from './loaders/ply/PlyLoader.js';\nimport { SplatLoader } from './loaders/splat/SplatLoader.js';\nimport { KSplatLoader } from './loaders/ksplat/KSplatLoader.js';\nimport { sceneFormatFromPath } from './loaders/Utils.js';\nimport { LoadingSpinner } from './ui/LoadingSpinner.js';\nimport { LoadingProgressBar } from './ui/LoadingProgressBar.js';\nimport { InfoPanel } from './ui/InfoPanel.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './SplatMesh.js';\nimport { createSortWorker } from './worker/SortWorker.js';\nimport { Constants } from './Constants.js';\nimport { getCurrentTime } from './Util.js';\nimport { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\nimport { SceneFormat } from './loaders/SceneFormat.js';\nimport { WebXRMode } from './webxr/WebXRMode.js';\nimport { VRButton } from './webxr/VRButton.js';\nimport { ARButton } from './webxr/ARButton.js';\nimport { delayedExecute } from './Util.js';\nimport { LoaderStatus } from './loaders/LoaderStatus.js';\nimport { RenderMode } from './RenderMode.js';\nimport { LogLevel } from './LogLevel.js';\nimport { SceneRevealMode } from './SceneRevealMode.js';\n\nconst THREE_CAMERA_FOV = 50;\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\nconst MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER = 1500000;\nconst FOCUS_MARKER_FADE_IN_SPEED = 10.0;\nconst FOCUS_MARKER_FADE_OUT_SPEED = 2.5;\nconst CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION = 60;\n\n/**\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\n * that performs the sort for its splats.\n */\nexport class Viewer {\n\n    constructor(options = {}) {\n\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\n        // when the viewer uses its own camera).\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\n\n        // The camera's initial position (only used when the viewer uses its own camera).\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\n\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\n\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\n        this.dropInMode = options.dropInMode || false;\n\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\n        this.useBuiltInControls = options.useBuiltInControls;\n\n        // parent element of the Three.js renderer canvas\n        this.rootElement = options.rootElement;\n\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\n        // at a small cost to visual quality\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\n\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU || false;\n\n        // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\n        this.threeScene = options.threeScene;\n        // Allows for usage of an external Three.js renderer\n        this.renderer = options.renderer;\n        // Allows for usage of an external Three.js camera\n        this.camera = options.camera;\n\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\n        // Currently this means pre-computing splat distances from the camera on the GPU\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort || false;\n\n        // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\n        // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\n        // overflow in larger scenes.\n        if (options.integerBasedSort === undefined || options.integerBasedSort === null) {\n            options.integerBasedSort = true;\n        }\n        this.integerBasedSort = options.integerBasedSort;\n\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\n        // https://web.dev/articles/cross-origin-isolation-guide\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\n        // loading the application. More information is available in the README.\n        if (options.sharedMemoryForWorkers === undefined || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = false;\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\n\n        // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\n        // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\n        // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\n        // SplatMesh.getSplatCenter() by default.\n        this.dynamicScene = !!options.dynamicScene;\n\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\n        // https://github.com/nerfstudio-project/gsplat/pull/117\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n        this.antialiased = options.antialiased || false;\n\n        this.webXRMode = options.webXRMode || WebXRMode.None;\n        if (this.webXRMode !== WebXRMode.None) {\n            this.gpuAcceleratedSort = false;\n        }\n        this.webXRActive = false;\n\n        // if 'renderMode' is RenderMode.Always, then the viewer will rrender the scene on every update. If it is RenderMode.OnChange,\n        // it will only render when something in the scene has changed.\n        this.renderMode = options.renderMode || RenderMode.Always;\n\n        // SceneRevealMode.Default results in a nice, slow fade-in effect for progressively loaded scenes,\n        // and a fast fade-in for non progressively loaded scenes.\n        // SceneRevealMode.Gradual will force a slow fade-in for all scenes.\n        // SceneRevealMode.Instant will force all loaded scene data to be immediately visible.\n        this.sceneRevealMode = options.sceneRevealMode || SceneRevealMode.Default;\n\n        // Hacky, experimental, non-scientific parameter for tweaking focal length related calculations. For scenes with very\n        // small gaussians, small details, and small dimensions -- increasing this value can help improve visual quality.\n        this.focalAdjustment = options.focalAdjustment || 1.0;\n\n        // Specify the maximum screen-space splat size, can help deal with large splats that get too unwieldy\n        this.maxScreenSpaceSplatSize = options.maxScreenSpaceSplatSize || 2048;\n\n        // The verbosity of console logging\n        this.logLevel = options.logLevel || LogLevel.None;\n\n        // Degree of spherical harmonics to utilize in rendering splats (assuming the data is present in the splat scene).\n        // Valid values are 0 - 3. Default value is 0.\n        this.sphericalHarmonicsDegree = options.sphericalHarmonicsDegree || 0;\n\n        this.createSplatMesh();\n\n        this.controls = null;\n        this.perspectiveControls = null;\n        this.orthographicControls = null;\n\n        this.orthographicCamera = null;\n        this.perspectiveCamera = null;\n\n        this.showMeshCursor = false;\n        this.showControlPlane = false;\n        this.showInfo = false;\n\n        this.sceneHelper = null;\n\n        this.sortWorker = null;\n        this.sortRunning = false;\n        this.splatRenderCount = 0;\n        this.sortWorkerIndexesToSort = null;\n        this.sortWorkerSortedIndexes = null;\n        this.sortWorkerPrecomputedDistances = null;\n        this.sortWorkerTransforms = null;\n        this.runAfterFirstSort = [];\n\n        this.selfDrivenModeRunning = false;\n        this.splatRenderReady = false;\n\n        this.raycaster = new Raycaster();\n\n        this.infoPanel = null;\n\n        this.startInOrthographicMode = false;\n\n        this.currentFPS = 0;\n        this.lastSortTime = 0;\n        this.consecutiveRenderFrames = 0;\n\n        this.previousCameraTarget = new THREE.Vector3();\n        this.nextCameraTarget = new THREE.Vector3();\n\n        this.mousePosition = new THREE.Vector2();\n        this.mouseDownPosition = new THREE.Vector2();\n        this.mouseDownTime = null;\n\n        this.resizeObserver = null;\n        this.mouseMoveListener = null;\n        this.mouseDownListener = null;\n        this.mouseUpListener = null;\n        this.keyDownListener = null;\n\n        this.sortPromise = null;\n        this.sortPromiseResolver = null;\n        this.splatSceneDownloadPromises = {};\n        this.splatSceneDownloadAndBuildPromise = null;\n        this.splatSceneRemovalPromise = null;\n\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\n        this.loadingSpinner.hide();\n        this.loadingProgressBar = new LoadingProgressBar(this.rootElement || document.body);\n        this.loadingProgressBar.hide();\n        this.infoPanel = new InfoPanel(this.rootElement || document.body);\n        this.infoPanel.hide();\n\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\n\n        this.initialized = false;\n        this.disposing = false;\n        this.disposed = false;\n        if (!this.dropInMode) this.init();\n    }\n\n    createSplatMesh() {\n        this.splatMesh = new SplatMesh(this.dynamicScene, this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio,\n                                       this.gpuAcceleratedSort, this.integerBasedSort, this.antialiased,\n                                       this.maxScreenSpaceSplatSize, this.logLevel, this.sphericalHarmonicsDegree);\n        this.splatMesh.frustumCulled = false;\n    }\n\n    init() {\n\n        if (this.initialized) return;\n\n        if (!this.rootElement) {\n            if (!this.usingExternalRenderer) {\n                this.rootElement = document.createElement('div');\n                this.rootElement.style.width = '100%';\n                this.rootElement.style.height = '100%';\n                this.rootElement.style.position = 'absolute';\n                document.body.appendChild(this.rootElement);\n            } else {\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\n            }\n        }\n\n        this.setupCamera();\n        this.setupRenderer();\n        this.setupWebXR();\n        this.setupControls();\n        this.setupEventHandlers();\n\n        this.threeScene = this.threeScene || new THREE.Scene();\n        this.sceneHelper = new SceneHelper(this.threeScene);\n        this.sceneHelper.setupMeshCursor();\n        this.sceneHelper.setupFocusMarker();\n        this.sceneHelper.setupControlPlane();\n\n        this.loadingProgressBar.setContainer(this.rootElement);\n        this.loadingSpinner.setContainer(this.rootElement);\n        this.infoPanel.setContainer(this.rootElement);\n\n        this.initialized = true;\n    }\n\n    setupCamera() {\n        if (!this.usingExternalCamera) {\n            const renderDimensions = new THREE.Vector2();\n            this.getRenderDimensions(renderDimensions);\n\n            this.perspectiveCamera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 1000);\n            this.orthographicCamera = new THREE.OrthographicCamera(renderDimensions.x / -2, renderDimensions.x / 2,\n                                                                   renderDimensions.y / 2, renderDimensions.y / -2, 0.1, 1000 );\n            this.camera = this.startInOrthographicMode ? this.orthographicCamera : this.perspectiveCamera;\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.up.copy(this.cameraUp).normalize();\n            this.camera.lookAt(this.initialCameraLookAt);\n        }\n    }\n\n    setupRenderer() {\n        if (!this.usingExternalRenderer) {\n            const renderDimensions = new THREE.Vector2();\n            this.getRenderDimensions(renderDimensions);\n\n            this.renderer = new THREE.WebGLRenderer({\n                antialias: false,\n                precision: 'highp'\n            });\n            this.renderer.setPixelRatio(this.devicePixelRatio);\n            this.renderer.autoClear = true;\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n\n            this.resizeObserver = new ResizeObserver(() => {\n                this.getRenderDimensions(renderDimensions);\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n                this.forceRenderNextFrame();\n            });\n            this.resizeObserver.observe(this.rootElement);\n            this.rootElement.appendChild(this.renderer.domElement);\n        }\n\n    }\n\n    setupWebXR() {\n        if (this.webXRMode) {\n            if (this.webXRMode === WebXRMode.VR) {\n                this.rootElement.appendChild(VRButton.createButton(this.renderer));\n            } else if (this.webXRMode === WebXRMode.AR) {\n                this.rootElement.appendChild(ARButton.createButton(this.renderer));\n            }\n            this.renderer.xr.addEventListener('sessionstart', (e) => {\n                this.webXRActive = true;\n            });\n            this.renderer.xr.addEventListener('sessionend', (e) => {\n                this.webXRActive = false;\n            });\n            this.renderer.xr.enabled = true;\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.up.copy(this.cameraUp).normalize();\n            this.camera.lookAt(this.initialCameraLookAt);\n        }\n    }\n\n    setupControls() {\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n            if (!this.usingExternalCamera) {\n                this.perspectiveControls = new OrbitControls(this.perspectiveCamera, this.renderer.domElement);\n                this.orthographicControls = new OrbitControls(this.orthographicCamera, this.renderer.domElement);\n            } else {\n                if (this.camera.isOrthographicCamera) {\n                    this.orthographicControls = new OrbitControls(this.camera, this.renderer.domElement);\n                } else {\n                    this.perspectiveControls = new OrbitControls(this.camera, this.renderer.domElement);\n                }\n            }\n            for (let controls of [this.perspectiveControls, this.orthographicControls]) {\n                if (controls) {\n                    controls.listenToKeyEvents(window);\n                    controls.rotateSpeed = 0.5;\n                    controls.minPolarAngle = Math.PI / 5; // Allows looking up to 30 degrees above horizontal\n                    controls.maxPolarAngle = Math.PI / 2.5; // Prevents looking below horizontal (hides chair bottom)\n                    controls.enableDamping = true;\n                    controls.dampingFactor = 0.05;\n                    controls.target.copy(this.initialCameraLookAt);\n                    controls.update();\n                }\n\n            }\n            this.controls = this.camera.isOrthographicCamera ? this.orthographicControls : this.perspectiveControls;\n        }\n    }\n\n    setupEventHandlers() {\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n            this.mouseMoveListener = this.onMouseMove.bind(this);\n            this.renderer.domElement.addEventListener('pointermove', this.mouseMoveListener, false);\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.renderer.domElement.addEventListener('pointerdown', this.mouseDownListener, false);\n            this.mouseUpListener = this.onMouseUp.bind(this);\n            this.renderer.domElement.addEventListener('pointerup', this.mouseUpListener, false);\n            this.keyDownListener = this.onKeyDown.bind(this);\n            window.addEventListener('keydown', this.keyDownListener, false);\n        }\n    }\n\n    removeEventHandlers() {\n        if (this.useBuiltInControls) {\n            this.renderer.domElement.removeEventListener('pointermove', this.mouseMoveListener);\n            this.mouseMoveListener = null;\n            this.renderer.domElement.removeEventListener('pointerdown', this.mouseDownListener);\n            this.mouseDownListener = null;\n            this.renderer.domElement.removeEventListener('pointerup', this.mouseUpListener);\n            this.mouseUpListener = null;\n            window.removeEventListener('keydown', this.keyDownListener);\n            this.keyDownListener = null;\n        }\n    }\n\n    setRenderMode(renderMode) {\n        this.renderMode = renderMode;\n    }\n\n    onKeyDown = function() {\n\n        const forward = new THREE.Vector3();\n        const tempMatrixLeft = new THREE.Matrix4();\n        const tempMatrixRight = new THREE.Matrix4();\n\n        return function(e) {\n            forward.set(0, 0, -1);\n            forward.transformDirection(this.camera.matrixWorld);\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\n            switch (e.code) {\n                case 'KeyG':\n                    this.focalAdjustment += 0.02;\n                    this.forceRenderNextFrame();\n                break;\n                case 'KeyF':\n                    this.focalAdjustment -= 0.02;\n                    this.forceRenderNextFrame();\n                break;\n                case 'KeyA':\n                    this.camera.up.transformDirection(tempMatrixLeft);\n                break;\n                case 'KeyD':\n                    this.camera.up.transformDirection(tempMatrixRight);\n                break;\n                case 'KeyC':\n                    this.showMeshCursor = !this.showMeshCursor;\n                break;\n                case 'KeyU':\n                    this.showControlPlane = !this.showControlPlane;\n                break;\n                case 'KeyI':\n                    this.showInfo = !this.showInfo;\n                    if (this.showInfo) {\n                        this.infoPanel.show();\n                    } else {\n                        this.infoPanel.hide();\n                    }\n                break;\n                case 'KeyO':\n                    if (!this.usingExternalCamera) {\n                        this.setOrthographicMode(!this.camera.isOrthographicCamera);\n                    }\n                break;\n                case 'KeyP':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setPointCloudModeEnabled(!this.splatMesh.getPointCloudModeEnabled());\n                    }\n                break;\n                case 'Equal':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setSplatScale(this.splatMesh.getSplatScale() + 0.05);\n                    }\n                break;\n                case 'Minus':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setSplatScale(Math.max(this.splatMesh.getSplatScale() - 0.05, 0.0));\n                    }\n                break;\n            }\n        };\n\n    }();\n\n    onMouseMove(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    }\n\n    onMouseDown() {\n        this.mouseDownPosition.copy(this.mousePosition);\n        this.mouseDownTime = getCurrentTime();\n    }\n\n    onMouseUp = function() {\n\n        const clickOffset = new THREE.Vector2();\n\n        return function(mouse) {\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n            const mouseUpTime = getCurrentTime();\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n            if (wasClick) {\n                this.onMouseClick(mouse);\n            }\n        };\n\n    }();\n\n    onMouseClick(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n        //this.checkForFocalPointChange();  //Disabled Target Change\n    }\n\n    checkForFocalPointChange = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        const toNewFocalPoint = new THREE.Vector3();\n        const outHits = [];\n\n        return function() {\n            if (!this.transitioningCameraTarget) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    const hit = outHits[0];\n                    const intersectionPoint = hit.origin;\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\n                        this.previousCameraTarget.copy(this.controls.target);\n                        this.nextCameraTarget.copy(intersectionPoint);\n                        this.transitioningCameraTarget = true;\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\n                    }\n                }\n            }\n        };\n\n    }();\n\n    getRenderDimensions(outDimensions) {\n        if (this.rootElement) {\n            outDimensions.x = this.rootElement.offsetWidth;\n            outDimensions.y = this.rootElement.offsetHeight;\n        } else {\n            this.renderer.getSize(outDimensions);\n        }\n    }\n\n    setOrthographicMode(orthographicMode) {\n        if (orthographicMode === this.camera.isOrthographicCamera) return;\n        const fromCamera = this.camera;\n        const toCamera = orthographicMode ? this.orthographicCamera : this.perspectiveCamera;\n        toCamera.position.copy(fromCamera.position);\n        toCamera.up.copy(fromCamera.up);\n        toCamera.rotation.copy(fromCamera.rotation);\n        toCamera.quaternion.copy(fromCamera.quaternion);\n        toCamera.matrix.copy(fromCamera.matrix);\n        this.camera = toCamera;\n\n        if (this.controls) {\n\n            const resetControls = (controls) => {\n                controls.saveState();\n                controls.reset();\n            };\n\n            const fromControls = this.controls;\n            const toControls = orthographicMode ? this.orthographicControls : this.perspectiveControls;\n\n            resetControls(toControls);\n            resetControls(fromControls);\n\n            toControls.target.copy(fromControls.target);\n            if (orthographicMode) {\n                Viewer.setCameraZoomFromPosition(toCamera, fromCamera, fromControls);\n            } else {\n                Viewer.setCameraPositionFromZoom(toCamera, fromCamera, toControls);\n            }\n            this.controls = toControls;\n            this.camera.lookAt(this.controls.target);\n        }\n    }\n\n    static setCameraPositionFromZoom = function() {\n\n        const tempVector = new THREE.Vector3();\n\n        return function(positionCamera, zoomedCamera, controls) {\n            const toLookAtDistance = 1 / (zoomedCamera.zoom * 0.001);\n            tempVector.copy(controls.target).sub(positionCamera.position).normalize().multiplyScalar(toLookAtDistance).negate();\n            positionCamera.position.copy(controls.target).add(tempVector);\n        };\n\n    }();\n\n\n    static setCameraZoomFromPosition = function() {\n\n        const tempVector = new THREE.Vector3();\n\n        return function(zoomCamera, positionZamera, controls) {\n            const toLookAtDistance = tempVector.copy(controls.target).sub(positionZamera.position).length();\n            zoomCamera.zoom = 1 / (toLookAtDistance * .001);\n        };\n\n    }();\n\n    updateSplatMesh = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.splatMesh) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            if (splatCount > 0) {\n                this.splatMesh.updateTransforms();\n                this.getRenderDimensions(renderDimensions);\n                const focalLengthX = this.camera.projectionMatrix.elements[0] * 0.5 *\n                                     this.devicePixelRatio * renderDimensions.x;\n                const focalLengthY = this.camera.projectionMatrix.elements[5] * 0.5 *\n                                     this.devicePixelRatio * renderDimensions.y;\n\n                const focalMultiplier = this.camera.isOrthographicCamera ? (1.0 / this.devicePixelRatio) : 1.0;\n                const focalAdjustment = this.focalAdjustment * focalMultiplier;\n                const inverseFocalAdjustment = 1.0 / focalAdjustment;\n\n                this.adjustForWebXRStereo(renderDimensions);\n                this.splatMesh.updateUniforms(renderDimensions, focalLengthX * focalAdjustment, focalLengthY * focalAdjustment,\n                                              this.camera.isOrthographicCamera, this.camera.zoom || 1.0, inverseFocalAdjustment);\n            }\n        };\n\n    }();\n\n    adjustForWebXRStereo(renderDimensions) {\n        // TODO: Figure out a less hacky way to determine if stereo rendering is active\n        if (this.camera && this.webXRActive) {\n            const xrCamera = this.renderer.xr.getCamera();\n            const xrCameraProj00 = xrCamera.projectionMatrix.elements[0];\n            const cameraProj00 = this.camera.projectionMatrix.elements[0];\n            renderDimensions.x *= (cameraProj00 / xrCameraProj00);\n        }\n    }\n\n    isLoadingOrUnloading() {\n        return Object.keys(this.splatSceneDownloadPromises).length > 0 || this.splatSceneDownloadAndBuildPromise !== null ||\n                           this.splatSceneRemovalPromise !== null;\n    }\n\n    isDisposingOrDisposed() {\n        return this.disposing || this.disposed;\n    }\n\n    addSplatSceneDownloadPromise(promise) {\n        this.splatSceneDownloadPromises[promise.id] = promise;\n    }\n\n    removeSplatSceneDownloadPromise(promise) {\n        delete this.splatSceneDownloadPromises[promise.id];\n    }\n\n    setSplatSceneDownloadAndBuildPromise(promise) {\n        this.splatSceneDownloadAndBuildPromise = promise;\n    }\n\n    clearSplatSceneDownloadAndBuildPromise() {\n        this.splatSceneDownloadAndBuildPromise = null;\n    }\n\n    /**\n     * Add a splat scene to the viewer and display any loading UI if appropriate.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received, or other processing occurs\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot add splat scene after dispose() is called.');\n        }\n\n        const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(path);\n        const streamBuildSections = Viewer.isStreamable(format) && options.streamView;\n        const showLoadingUI = (options.showLoadingUI !== undefined && options.showLoadingUI !== null) ? options.showLoadingUI : true;\n\n        let loadingUITaskId = null;\n        if (showLoadingUI) {\n            this.loadingSpinner.removeAllTasks();\n            loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\n        }\n        const hideLoadingUI = () => {\n            this.loadingProgressBar.hide();\n            this.loadingSpinner.removeAllTasks();\n        };\n\n        const onProgressUIUpdate = (percentComplete, percentCompleteLabel, loaderStatus) => {\n            if (showLoadingUI) {\n                if (loaderStatus === LoaderStatus.Downloading) {\n                    if (percentComplete == 100) {\n                        this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Download complete!');\n                    } else {\n                        if (streamBuildSections) {\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Downloading splats...');\n                        } else {\n                            const suffix = percentCompleteLabel ? `: ${percentCompleteLabel}` : `...`;\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, `Downloading${suffix}`);\n                        }\n                    }\n                } else if (loaderStatus === LoaderStatus.Processing) {\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Processing splats...');\n                } else {\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Ready!');\n                }\n            }\n        };\n\n        let downloadDone = false;\n        let downloadedPercentage = 0;\n        const splatBuffersAddedUIUpdate = (firstBuild, finalBuild) => {\n            if (showLoadingUI) {\n                if (firstBuild && streamBuildSections || finalBuild && !streamBuildSections) {\n                    this.runAfterFirstSort.push(() => {\n                        this.loadingSpinner.removeTask(loadingUITaskId);\n                        if (!finalBuild && !downloadDone) this.loadingProgressBar.show();\n                    });\n                }\n                if (streamBuildSections) {\n                    if (finalBuild) {\n                        downloadDone = true;\n                        this.loadingProgressBar.hide();\n                    } else {\n                        this.loadingProgressBar.setProgress(downloadedPercentage);\n                    }\n                }\n            }\n        };\n\n        const onProgress = (percentComplete, percentCompleteLabel, loaderStatus) => {\n            downloadedPercentage = percentComplete;\n            onProgressUIUpdate(percentComplete, percentCompleteLabel, loaderStatus);\n            if (options.onProgress) options.onProgress(percentComplete, percentCompleteLabel, loaderStatus);\n        };\n\n        const buildSection = (splatBuffer, firstBuild, finalBuild) => {\n            if (!streamBuildSections && options.onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\n            const addSplatBufferOptions = {\n                'rotation': options.rotation || options.orientation,\n                'position': options.position,\n                'scale': options.scale,\n                'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\n            };\n            return this.addSplatBuffers([splatBuffer], [addSplatBufferOptions],\n                                         finalBuild, firstBuild && showLoadingUI, showLoadingUI).then(() => {\n                if (!streamBuildSections && options.onProgress) options.onProgress(100, '100%', LoaderStatus.Processing);\n                splatBuffersAddedUIUpdate(firstBuild, finalBuild);\n            });\n        };\n\n        const loadFunc = streamBuildSections ? this.downloadAndBuildSingleSplatSceneStreaming.bind(this) :\n                                               this.downloadAndBuildSingleSplatSceneNonStreaming.bind(this);\n        return loadFunc(path, format, options.splatAlphaRemovalThreshold, buildSection.bind(this), onProgress, hideLoadingUI.bind(this));\n    }\n\n    /**\n     * Download a single non-streamed splat scene, convert to splat buffer and then rebuild the viewer's splat mesh\n     * by calling 'buildFunc'. Also sets/clears relevant instance synchronization objects, and calls appropriate functions\n     * on success or failure.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {SceneFormat} format Format of the splat scene file\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n     * @param {function} buildFunc Function to build the viewer's splat mesh with the downloaded splat buffer\n     * @param {function} onProgress Function to be called as file data are received, or other processing occurs\n     * @param {function} onException Function to be called when exception occurs\n     * @return {AbortablePromise}\n     */\n    downloadAndBuildSingleSplatSceneNonStreaming(path, format, splatAlphaRemovalThreshold, buildFunc, onProgress, onException) {\n        const downloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onProgress, false, undefined, format)\n        .then((splatBuffer) => {\n            this.removeSplatSceneDownloadPromise(downloadPromise);\n            return buildFunc(splatBuffer, true, true).then(() => {\n                this.clearSplatSceneDownloadAndBuildPromise();\n            });\n        })\n        .catch((e) => {\n            if (onException) onException();\n            this.clearSplatSceneDownloadAndBuildPromise();\n            this.removeSplatSceneDownloadPromise(downloadPromise);\n            if (!(e instanceof AbortedPromiseError)) {\n                throw (new Error(`Viewer::addSplatScene -> Could not load file ${path}`));\n            }\n        });\n\n        this.addSplatSceneDownloadPromise(downloadPromise);\n        this.setSplatSceneDownloadAndBuildPromise(downloadPromise);\n\n        return downloadPromise;\n    }\n\n    /**\n     * Download a single splat scene and convert to splat buffer in a streamed manner, allowing rendering as the file downloads.\n     * As each section is downloaded, the viewer's splat mesh is rebuilt by calling 'buildFunc'\n     * Also sets/clears relevant instance synchronization objects, and calls appropriate functions on success or failure.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {SceneFormat} format Format of the splat scene file\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n     * @param {function} buildFunc Function to rebuild the viewer's splat mesh after a new splat buffer section is downloaded\n     * @param {function} onDownloadProgress Function to be called as file data are received\n     * @param {function} onDownloadException Function to be called when exception occurs at any point during the full download\n     * @return {AbortablePromise}\n     */\n    downloadAndBuildSingleSplatSceneStreaming(path, format, splatAlphaRemovalThreshold, buildFunc,\n                                              onDownloadProgress, onDownloadException) {\n        let firstStreamedSectionDownloadAndBuildResolver;\n        let firstStreamedSectionDownloadAndBuildRejecter;\n        let splatSceneDownloadAndBuildResolver;\n        let splatSceneDownloadAndBuildRejecter;\n        let steamedSectionBuildCount = 0;\n        let streamedSectionBuilding = false;\n        const queuedStreamedSectionBuilds = [];\n\n        const checkAndBuildStreamedSections = () => {\n            if (queuedStreamedSectionBuilds.length > 0 && !streamedSectionBuilding && !this.isDisposingOrDisposed()) {\n                streamedSectionBuilding = true;\n                const queuedBuild = queuedStreamedSectionBuilds.shift();\n                buildFunc(queuedBuild.splatBuffer, queuedBuild.firstBuild, queuedBuild.finalBuild)\n                .then(() => {\n                    streamedSectionBuilding = false;\n                    if (queuedBuild.firstBuild) {\n                        firstStreamedSectionDownloadAndBuildRejecter = null;\n                        firstStreamedSectionDownloadAndBuildResolver();\n                    } else if (queuedBuild.finalBuild) {\n                        splatSceneDownloadAndBuildResolver();\n                        this.clearSplatSceneDownloadAndBuildPromise();\n                    }\n                    if (queuedStreamedSectionBuilds.length > 0) delayedExecute(() => checkAndBuildStreamedSections());\n                });\n            }\n        };\n\n        const onStreamedSectionProgress = (splatBuffer, finalBuild) => {\n            if (!this.isDisposingOrDisposed()) {\n                if (finalBuild || queuedStreamedSectionBuilds.length === 0 ||\n                    splatBuffer.getSplatCount() > queuedStreamedSectionBuilds[0].splatBuffer.getSplatCount()) {\n                    queuedStreamedSectionBuilds.push({\n                        splatBuffer,\n                        firstBuild: steamedSectionBuildCount === 0,\n                        finalBuild\n                    });\n                    steamedSectionBuildCount++;\n                    checkAndBuildStreamedSections();\n                }\n            }\n        };\n\n        let splatSceneDownloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold,\n                                                                             onDownloadProgress, true, onStreamedSectionProgress, format);\n\n        const firstStreamedSectionBuildPromise = new AbortablePromise((resolver, rejecter) => {\n            firstStreamedSectionDownloadAndBuildResolver = resolver;\n            firstStreamedSectionDownloadAndBuildRejecter = rejecter;\n        }, splatSceneDownloadPromise.abortHandler);\n\n        const splatSceneDownloadAndBuildPromise = new AbortablePromise((resolver, rejecter) => {\n            splatSceneDownloadAndBuildResolver = resolver;\n            splatSceneDownloadAndBuildRejecter = rejecter;\n        });\n\n        this.addSplatSceneDownloadPromise(splatSceneDownloadPromise);\n        this.setSplatSceneDownloadAndBuildPromise(splatSceneDownloadAndBuildPromise);\n\n        splatSceneDownloadPromise.then(() => {\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n        })\n        .catch((e) => {\n            this.clearSplatSceneDownloadAndBuildPromise();\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n            if (!(e instanceof AbortedPromiseError)) {\n                splatSceneDownloadAndBuildRejecter(e);\n                if (firstStreamedSectionDownloadAndBuildRejecter) firstStreamedSectionDownloadAndBuildRejecter(e);\n                if (onDownloadException) onDownloadException(e);\n            }\n        });\n\n        return firstStreamedSectionBuildPromise;\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer and display any loading UI if appropriate.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n     * @param {function} onProgress Function to be called as file data are received\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingUI = true, onProgress = undefined) {\n\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot add splat scene after dispose() is called.');\n        }\n\n        const fileCount = sceneOptions.length;\n        const percentComplete = [];\n        if (showLoadingUI) {\n            this.loadingSpinner.removeAllTasks();\n            this.loadingSpinner.show();\n        }\n        const onLoadProgress = (fileIndex, percent, percentLabel) => {\n            percentComplete[fileIndex] = percent;\n            let totalPercent = 0;\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\n            totalPercent = totalPercent / fileCount;\n            percentLabel = `${totalPercent.toFixed(2)}%`;\n            if (showLoadingUI) {\n                this.loadingSpinner.setMessage(totalPercent == 100 ? `Download complete!` : `Downloading: ${percentLabel}`);\n            }\n            if (onProgress) onProgress(totalPercent, percentLabel, LoaderStatus.Downloading);\n        };\n\n        const downloadPromises = [];\n        const nativeLoadPromises = [];\n        const abortHandlers = [];\n        for (let i = 0; i < sceneOptions.length; i++) {\n            const options = sceneOptions[i];\n            const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(options.path);\n            const downloadPromise = this.downloadSplatSceneToSplatBuffer(options.path, options.splatAlphaRemovalThreshold,\n                                                                         onLoadProgress.bind(this, i), false, undefined, format);\n            abortHandlers.push(downloadPromise.abortHandler);\n            downloadPromises.push(downloadPromise);\n            nativeLoadPromises.push(downloadPromise.promise);\n            this.addSplatSceneDownloadPromise(downloadPromise);\n        }\n\n        const downloadPromise = new AbortablePromise((resolve, reject) => {\n            Promise.all(nativeLoadPromises)\n            .then((splatBuffers) => {\n                if (showLoadingUI) this.loadingSpinner.hide();\n                if (onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\n                this.addSplatBuffers(splatBuffers, sceneOptions, true, showLoadingUI, showLoadingUI).then(() => {\n                    if (onProgress) onProgress(100, '100%', LoaderStatus.Processing);\n                    this.clearSplatSceneDownloadAndBuildPromise();\n                    resolve();\n                });\n            })\n            .catch((e) => {\n                if (showLoadingUI) this.loadingSpinner.hide();\n                this.clearSplatSceneDownloadAndBuildPromise();\n                if (!(e instanceof AbortedPromiseError)) {\n                    reject(new Error(`Viewer::addSplatScenes -> Could not load one or more splat scenes.`));\n                } else {\n                    resolve();\n                }\n            })\n            .finally(() => {\n                for (let downloadPromise of downloadPromises) {\n                    this.removeSplatSceneDownloadPromise(downloadPromise);\n                }\n            });\n        }, () => {\n            for (let abortHandler of abortHandlers) abortHandler();\n        });\n        this.setSplatSceneDownloadAndBuildPromise(downloadPromise);\n        return downloadPromise;\n    }\n\n    /**\n     * Download a splat scene and convert to SplatBuffer instance.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\n     *                                            value (valid range: 0 - 255), defaults to 1\n     *\n     * @param {function} onProgress Function to be called as file data are received\n     * @param {boolean} streamBuiltSections Construct file sections into splat buffers as they are downloaded\n     * @param {function} onSectionBuilt Function to be called when new section is added to the file\n     * @param {string} format File format of the scene\n     * @return {AbortablePromise}\n     */\n    downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined,\n                                    streamBuiltSections = false, onSectionBuilt = undefined, format) {\n        if (format === SceneFormat.Splat) {\n            return SplatLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt, splatAlphaRemovalThreshold, 0, false);\n        } else if (format === SceneFormat.KSplat) {\n            return KSplatLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt);\n        } else if (format === SceneFormat.Ply) {\n            return PlyLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt,\n                                         splatAlphaRemovalThreshold, 0, this.sphericalHarmonicsDegree);\n        }\n        return AbortablePromise.reject(new Error(`Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${path}`));\n    }\n\n    static isStreamable(format) {\n        return format === SceneFormat.Splat || format === SceneFormat.KSplat || format === SceneFormat.Ply;\n    }\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\n     * This function will terminate the existing sort worker (if there is one).\n     */\n    addSplatBuffers = function() {\n\n        return function(splatBuffers, splatBufferOptions = [], finalBuild = true,\n                        showLoadingUI = true, showLoadingUIForSplatTreeBuild = true) {\n\n            if (this.isDisposingOrDisposed()) return Promise.resolve();\n\n            this.splatRenderReady = false;\n            let splatProcessingTaskId = null;\n\n            const finish = (buildResults) => {\n                if (this.isDisposingOrDisposed()) return;\n\n                if (splatProcessingTaskId !== null) {\n                    this.loadingSpinner.removeTask(splatProcessingTaskId);\n                    splatProcessingTaskId = null;\n                }\n\n                // If we aren't calculating the splat distances from the center on the GPU, the sorting worker needs splat centers and\n                // transform indexes so that it can calculate those distance values.\n                if (!this.gpuAcceleratedSort && this.sortWorker) {\n                    this.sortWorker.postMessage({\n                        'centers': buildResults.centers.buffer,\n                        'transformIndexes': buildResults.sceneIndexes.buffer,\n                        'range': {\n                            'from': buildResults.from,\n                            'to': buildResults.to,\n                            'count': buildResults.count\n                        }\n                    });\n                }\n\n                this.splatRenderReady = true;\n                this.sortNeededForSceneChange = true;\n            };\n\n            return new Promise((resolve) => {\n                if (showLoadingUI) {\n                    splatProcessingTaskId = this.loadingSpinner.addTask('Processing splats...');\n                }\n                delayedExecute(() => {\n                    if (this.isDisposingOrDisposed()) {\n                        resolve();\n                    } else {\n                        const buildResults = this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions,\n                                                                        finalBuild, showLoadingUIForSplatTreeBuild);\n                        const maxSplatCount = this.splatMesh.getMaxSplatCount();\n                        if (this.sortWorker && this.sortWorker.maxSplatCount !== maxSplatCount) this.disposeSortWorker();\n                        const sortWorkerSetupPromise = (!this.sortWorker && maxSplatCount > 0) ?\n                                                         this.setupSortWorker(this.splatMesh) : Promise.resolve();\n                        sortWorkerSetupPromise.then(() => {\n                            finish(buildResults);\n                            resolve();\n                        });\n                    }\n                }, true);\n            });\n        };\n\n    }();\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. This function is additive; all splat\n     * buffers contained by the viewer's splat mesh before calling this function will be preserved.\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n     * @param {boolean} showLoadingUIForSplatTreeBuild Whether or not to show the loading spinner during construction of the splat tree.\n     * @return {object} Object containing info about the splats that are updated\n     */\n    addSplatBuffersToMesh(splatBuffers, splatBufferOptions, finalBuild = true, showLoadingUIForSplatTreeBuild = false) {\n        if (this.isDisposingOrDisposed()) return;\n        const allSplatBuffers = this.splatMesh.splatBuffers || [];\n        const allSplatBufferOptions = this.splatMesh.splatBufferOptions || [];\n        allSplatBuffers.push(...splatBuffers);\n        allSplatBufferOptions.push(...splatBufferOptions);\n        if (this.renderer) this.splatMesh.setRenderer(this.renderer);\n        let splatOptimizingTaskId;\n        const onSplatTreeIndexesUpload = (finished) => {\n            if (this.isDisposingOrDisposed()) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            if (showLoadingUIForSplatTreeBuild && splatCount >= MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER) {\n                if (!finished && !splatOptimizingTaskId) {\n                    this.loadingSpinner.setMinimized(true, true);\n                    splatOptimizingTaskId = this.loadingSpinner.addTask('Optimizing splats...');\n                }\n            }\n        };\n        const onSplatTreeReady = (finished) => {\n            if (this.isDisposingOrDisposed()) return;\n            if (finished && splatOptimizingTaskId) {\n                this.loadingSpinner.removeTask(splatOptimizingTaskId);\n            }\n        };\n        return this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true, finalBuild, onSplatTreeIndexesUpload, onSplatTreeReady);\n    }\n\n    /**\n     * Set up the splat sorting web worker.\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\n     * @return {Promise}\n     */\n    setupSortWorker(splatMesh) {\n        if (this.isDisposingOrDisposed()) return;\n        return new Promise((resolve) => {\n            const DistancesArrayType = this.integerBasedSort ? Int32Array : Float32Array;\n            const splatCount = splatMesh.getSplatCount();\n            const maxSplatCount = splatMesh.getMaxSplatCount();\n            this.sortWorker = createSortWorker(maxSplatCount, this.sharedMemoryForWorkers,\n                                               this.integerBasedSort, this.splatMesh.dynamicMode);\n            let sortCount = 0;\n            this.sortWorker.onmessage = (e) => {\n                if (e.data.sortDone) {\n                    this.sortRunning = false;\n                    if (this.sharedMemoryForWorkers) {\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\n                    } else {\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes.buffer, 0, e.data.splatRenderCount);\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\n                    }\n                    this.lastSortTime = e.data.sortTime;\n                    this.sortPromiseResolver();\n                    this.sortPromiseResolver = null;\n                    this.forceRenderNextFrame();\n                    if (sortCount === 0) {\n                        this.runAfterFirstSort.forEach((func) => {\n                            func();\n                        });\n                        this.runAfterFirstSort.length = 0;\n                    }\n                    sortCount++;\n                } else if (e.data.sortCanceled) {\n                    this.sortRunning = false;\n                } else if (e.data.sortSetupPhase1Complete) {\n                    if (this.logLevel >= LogLevel.Info) console.log('Sorting web worker WASM setup complete.');\n                    if (this.sharedMemoryForWorkers) {\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\n                                                                       e.data.sortedIndexesOffset, maxSplatCount);\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\n                                                                       e.data.indexesToSortOffset, maxSplatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(e.data.precomputedDistancesBuffer,\n                                                                                     e.data.precomputedDistancesOffset,\n                                                                                     maxSplatCount);\n                         this.sortWorkerTransforms = new Float32Array(e.data.transformsBuffer,\n                                                                      e.data.transformsOffset, Constants.MaxScenes * 16);\n                    } else {\n                        this.sortWorkerIndexesToSort = new Uint32Array(maxSplatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(maxSplatCount);\n                        this.sortWorkerTransforms = new Float32Array(Constants.MaxScenes * 16);\n                    }\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\n                    this.sortWorker.maxSplatCount = maxSplatCount;\n\n                    if (this.logLevel >= LogLevel.Info) {\n                        console.log('Sorting web worker ready.');\n                        const splatDataTextures = this.splatMesh.getSplatDataTextures();\n                        const covariancesTextureSize = splatDataTextures.covariances.size;\n                        const centersColorsTextureSize = splatDataTextures.centerColors.size;\n                        console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\n                        console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\n                    }\n\n                    resolve();\n                }\n            };\n        });\n    }\n\n    disposeSortWorker() {\n        if (this.sortWorker) this.sortWorker.terminate();\n        this.sortWorker = null;\n        this.sortPromise = null;\n        if (this.sortPromiseResolver) {\n            this.sortPromiseResolver();\n            this.sortPromiseResolver = null;\n        }\n        this.sortRunning = false;\n    }\n\n    removeSplatScene(index, showLoadingUI = true) {\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot remove splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot remove splat scene after dispose() is called.');\n        }\n\n        let sortPromise;\n\n        this.splatSceneRemovalPromise = new Promise((resolve, reject) => {\n            let revmovalTaskId;\n\n            if (showLoadingUI) {\n                this.loadingSpinner.removeAllTasks();\n                this.loadingSpinner.show();\n                revmovalTaskId = this.loadingSpinner.addTask('Removing splat scene...');\n            }\n\n            const checkAndHideLoadingUI = () => {\n                if (showLoadingUI) {\n                    this.loadingSpinner.hide();\n                    this.loadingSpinner.removeTask(revmovalTaskId);\n                }\n            };\n\n            const onDone = (error) => {\n                checkAndHideLoadingUI();\n                this.splatSceneRemovalPromise = null;\n                if (!error) resolve();\n                else reject(error);\n            };\n\n            const checkForEarlyExit = () => {\n                if (this.isDisposingOrDisposed()) {\n                    onDone();\n                    return true;\n                }\n                return false;\n            };\n\n            sortPromise = this.sortPromise || Promise.resolve();\n            sortPromise.then(() => {\n                if (checkForEarlyExit()) return;\n                const savedSplatBuffers = [];\n                const savedSceneOptions = [];\n                const savedSceneTransformComponents = [];\n                const savedVisibleRegionFadeStartRadius = this.splatMesh.visibleRegionFadeStartRadius;\n                for (let i = 0; i < this.splatMesh.scenes.length; i++) {\n                    if (i !== index) {\n                        const scene = this.splatMesh.scenes[i];\n                        savedSplatBuffers.push(scene.splatBuffer);\n                        savedSceneOptions.push(this.splatMesh.sceneOptions[i]);\n                        savedSceneTransformComponents.push({\n                            'position': scene.position.clone(),\n                            'quaternion': scene.quaternion.clone(),\n                            'scale': scene.scale.clone()\n                        });\n                    }\n                }\n                this.disposeSortWorker();\n                this.splatMesh.dispose();\n                this.createSplatMesh();\n                this.addSplatBuffers(savedSplatBuffers, savedSceneOptions, true, false, true)\n                .then(() => {\n                    if (checkForEarlyExit()) return;\n                    checkAndHideLoadingUI();\n                    this.splatMesh.visibleRegionFadeStartRadius = savedVisibleRegionFadeStartRadius;\n                    this.splatMesh.scenes.forEach((scene, index) => {\n                        scene.position.copy(savedSceneTransformComponents[index].position);\n                        scene.quaternion.copy(savedSceneTransformComponents[index].quaternion);\n                        scene.scale.copy(savedSceneTransformComponents[index].scale);\n                    });\n                    this.splatMesh.updateTransforms();\n                    this.splatRenderReady = false;\n                    this.updateSplatSort(true)\n                    .then(() => {\n                        if (checkForEarlyExit()) {\n                            this.splatRenderReady = true;\n                            return;\n                        }\n                        sortPromise = this.sortPromise || Promise.resolve();\n                        sortPromise.then(() => {\n                            this.splatRenderReady = true;\n                            onDone();\n                        });\n                    });\n                })\n                .catch((e) => {\n                    onDone(e);\n                });\n            });\n        });\n\n        return this.splatSceneRemovalPromise;\n    }\n\n    /**\n     * Start self-driven mode\n     */\n    start() {\n        if (this.selfDrivenMode) {\n            if (this.webXRMode) {\n                this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\n            } else {\n                this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n            }\n            this.selfDrivenModeRunning = true;\n        } else {\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\n        }\n    }\n\n    /**\n     * Stop self-driven mode\n     */\n    stop() {\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\n            if (!this.webXRMode) {\n                cancelAnimationFrame(this.requestFrameId);\n            }\n            this.selfDrivenModeRunning = false;\n        }\n    }\n\n    /**\n     * Dispose of all resources held directly and indirectly by this viewer.\n     */\n    async dispose() {\n        this.disposing = true;\n        let waitPromises = [];\n        let promisesToAbort = [];\n        for (let promiseKey in this.splatSceneDownloadPromises) {\n            if (this.splatSceneDownloadPromises.hasOwnProperty(promiseKey)) {\n                const downloadPromiseToAbort = this.splatSceneDownloadPromises[promiseKey];\n                promisesToAbort.push(downloadPromiseToAbort);\n                waitPromises.push(downloadPromiseToAbort.promise);\n            }\n        }\n        if (this.sortPromise) {\n            waitPromises.push(this.sortPromise);\n        }\n        const disposePromise = Promise.all(waitPromises).finally(() => {\n            this.stop();\n            if (this.controls) {\n                this.controls.dispose();\n                this.controls = null;\n            }\n            if (this.splatMesh) {\n                this.splatMesh.dispose();\n                this.splatMesh = null;\n            }\n            if (this.sceneHelper) {\n                this.sceneHelper.dispose();\n                this.sceneHelper = null;\n            }\n            if (this.resizeObserver) {\n                this.resizeObserver.unobserve(this.rootElement);\n                this.resizeObserver = null;\n            }\n            this.disposeSortWorker();\n            this.removeEventHandlers();\n\n            this.loadingSpinner.removeAllTasks();\n            this.loadingSpinner.setContainer(null);\n            this.loadingProgressBar.hide();\n            this.loadingProgressBar.setContainer(null);\n            this.infoPanel.setContainer(null);\n\n            this.camera = null;\n            this.threeScene = null;\n            this.splatRenderReady = false;\n            this.initialized = false;\n            if (this.renderer) {\n                if (!this.usingExternalRenderer) {\n                    this.rootElement.removeChild(this.renderer.domElement);\n                    this.renderer.dispose();\n                }\n                this.renderer = null;\n            }\n\n            if (!this.usingExternalRenderer) {\n                document.body.removeChild(this.rootElement);\n            }\n\n            this.sortWorkerSortedIndexes = null;\n            this.sortWorkerIndexesToSort = null;\n            this.sortWorkerPrecomputedDistances = null;\n            this.sortWorkerTransforms = null;\n            this.disposed = true;\n            this.disposing = false;\n        });\n        promisesToAbort.forEach((toAbort) => {\n            toAbort.abort();\n        });\n        return disposePromise;\n    }\n\n    selfDrivenUpdate() {\n        if (this.selfDrivenMode && !this.webXRMode) {\n            this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n        }\n        this.update();\n        if (this.shouldRender()) {\n            this.render();\n            this.consecutiveRenderFrames++;\n        } else {\n            this.consecutiveRenderFrames = 0;\n        }\n        this.renderNextFrame = false;\n    }\n\n    forceRenderNextFrame() {\n        this.renderNextFrame = true;\n    }\n\n    shouldRender = function() {\n\n        let renderCount = 0;\n        const lastCameraPosition = new THREE.Vector3();\n        const lastCameraOrientation = new THREE.Quaternion();\n        const changeEpsilon = 0.0001;\n\n        return function() {\n            let shouldRender = false;\n            let cameraChanged = false;\n            if (this.camera) {\n                const cp = this.camera.position;\n                const co = this.camera.quaternion;\n                cameraChanged = Math.abs(cp.x - lastCameraPosition.x) > changeEpsilon ||\n                                Math.abs(cp.y - lastCameraPosition.y) > changeEpsilon ||\n                                Math.abs(cp.z - lastCameraPosition.z) > changeEpsilon ||\n                                Math.abs(co.x - lastCameraOrientation.x) > changeEpsilon ||\n                                Math.abs(co.y - lastCameraOrientation.y) > changeEpsilon ||\n                                Math.abs(co.z - lastCameraOrientation.z) > changeEpsilon ||\n                                Math.abs(co.w - lastCameraOrientation.w) > changeEpsilon;\n            }\n\n            shouldRender = this.renderMode !== RenderMode.Never && (renderCount === 0 || this.splatMesh.visibleRegionChanging ||\n                           cameraChanged || this.renderMode === RenderMode.Always || this.dynamicMode === true || this.renderNextFrame);\n\n            if (this.camera) {\n                lastCameraPosition.copy(this.camera.position);\n                lastCameraOrientation.copy(this.camera.quaternion);\n            }\n\n            renderCount++;\n            return shouldRender;\n        };\n\n    }();\n\n    render = function() {\n\n        return function() {\n            if (!this.initialized || !this.splatRenderReady) return;\n\n            const hasRenderables = (threeScene) => {\n                for (let child of threeScene.children) {\n                    if (child.visible) return true;\n                }\n                return false;\n            };\n\n            const savedAuoClear = this.renderer.autoClear;\n            if (hasRenderables(this.threeScene)) {\n                this.renderer.render(this.threeScene, this.camera);\n                this.renderer.autoClear = false;\n            }\n            this.renderer.render(this.splatMesh, this.camera);\n            this.renderer.autoClear = false;\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\n            this.renderer.autoClear = savedAuoClear;\n        };\n\n    }();\n\n    update(renderer, camera) {\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\n        if (!this.initialized || !this.splatRenderReady) return;\n        if (this.controls) {\n            this.controls.update();\n            if (this.camera.isOrthographicCamera && !this.usingExternalCamera) {\n                Viewer.setCameraPositionFromZoom(this.camera, this.camera, this.controls);\n            }\n        }\n        this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode);\n        this.updateSplatSort();\n        this.updateForRendererSizeChanges();\n        this.updateSplatMesh();\n        this.updateMeshCursor();\n        this.updateFPS();\n        this.timingSensitiveUpdates();\n        this.updateInfoPanel();\n        this.updateControlPlane();\n    }\n\n    updateForDropInMode(renderer, camera) {\n        this.renderer = renderer;\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\n        this.camera = camera;\n        if (this.controls) this.controls.object = camera;\n        this.init();\n    }\n\n    updateFPS = function() {\n\n        let lastCalcTime = getCurrentTime();\n        let frameCount = 0;\n\n        return function() {\n            if (this.consecutiveRenderFrames > CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION) {\n                const currentTime = getCurrentTime();\n                const calcDelta = currentTime - lastCalcTime;\n                if (calcDelta >= 1.0) {\n                    this.currentFPS = frameCount;\n                    frameCount = 0;\n                    lastCalcTime = currentTime;\n                } else {\n                    frameCount++;\n                }\n            } else {\n                this.currentFPS = null;\n            }\n        };\n\n    }();\n\n    updateForRendererSizeChanges = function() {\n\n        const lastRendererSize = new THREE.Vector2();\n        const currentRendererSize = new THREE.Vector2();\n        let lastCameraOrthographic;\n\n        return function() {\n            if (!this.usingExternalCamera) {\n                this.renderer.getSize(currentRendererSize);\n                if (lastCameraOrthographic === undefined || lastCameraOrthographic !== this.camera.isOrthographicCamera ||\n                    currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\n                    if (this.camera.isOrthographicCamera) {\n                        this.camera.left = -currentRendererSize.x / 2.0;\n                        this.camera.right = currentRendererSize.x / 2.0;\n                        this.camera.top = currentRendererSize.y / 2.0;\n                        this.camera.bottom = -currentRendererSize.y / 2.0;\n                    } else {\n                        this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n                    }\n                    this.camera.updateProjectionMatrix();\n                    lastRendererSize.copy(currentRendererSize);\n                    lastCameraOrthographic = this.camera.isOrthographicCamera;\n                }\n            }\n        };\n\n    }();\n\n    timingSensitiveUpdates = function() {\n\n        let lastUpdateTime;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\n            const timeDelta = currentTime - lastUpdateTime;\n\n            this.updateCameraTransition(currentTime);\n            this.updateFocusMarker(timeDelta);\n\n            lastUpdateTime = currentTime;\n        };\n\n    }();\n\n    updateCameraTransition = function() {\n\n        let tempCameraTarget = new THREE.Vector3();\n        let toPreviousTarget = new THREE.Vector3();\n        let toNextTarget = new THREE.Vector3();\n\n        return function(currentTime) {\n            if (this.transitioningCameraTarget) {\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\n                this.camera.lookAt(tempCameraTarget);\n                this.controls.target.copy(tempCameraTarget);\n                if (t >= 1.0) {\n                    this.transitioningCameraTarget = false;\n                }\n            }\n        };\n\n    }();\n\n    updateFocusMarker = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        let wasTransitioning = false;\n\n        return function(timeDelta) {\n            this.getRenderDimensions(renderDimensions);\n            if (this.transitioningCameraTarget) {\n                this.sceneHelper.setFocusMarkerVisibility(true);\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + FOCUS_MARKER_FADE_IN_SPEED * timeDelta, 1.0);\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                wasTransitioning = true;\n                this.forceRenderNextFrame();\n            } else {\n                let currentFocusMarkerOpacity;\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\n                if (currentFocusMarkerOpacity > 0) {\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - FOCUS_MARKER_FADE_OUT_SPEED * timeDelta, 0.0);\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\n                }\n                if (currentFocusMarkerOpacity > 0.0) this.forceRenderNextFrame();\n                wasTransitioning = false;\n            }\n        };\n\n    }();\n\n    updateMeshCursor = function() {\n\n        const outHits = [];\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showMeshCursor) {\n                this.forceRenderNextFrame();\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    this.sceneHelper.setMeshCursorVisibility(true);\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\n                } else {\n                    this.sceneHelper.setMeshCursorVisibility(false);\n                }\n            } else {\n                if (this.sceneHelper.getMeschCursorVisibility()) this.forceRenderNextFrame();\n                this.sceneHelper.setMeshCursorVisibility(false);\n            }\n        };\n\n    }();\n\n    updateInfoPanel = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.showInfo) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            this.getRenderDimensions(renderDimensions);\n            const cameraLookAtPosition = this.controls ? this.controls.target : null;\n            const meshCursorPosition = this.showMeshCursor ? this.sceneHelper.meshCursor.position : null;\n            const splatRenderCountPct = splatCount > 0 ? this.splatRenderCount / splatCount * 100 : 0;\n            this.infoPanel.update(renderDimensions, this.camera.position, cameraLookAtPosition,\n                                  this.camera.up, this.camera.isOrthographicCamera, meshCursorPosition,\n                                  this.currentFPS || 'N/A', splatCount, this.splatRenderCount, splatRenderCountPct,\n                                  this.lastSortTime, this.focalAdjustment, this.splatMesh.getSplatScale(),\n                                  this.splatMesh.getPointCloudModeEnabled());\n        };\n\n    }();\n\n    updateControlPlane() {\n        if (this.showControlPlane) {\n            this.sceneHelper.setControlPlaneVisibility(true);\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\n        } else {\n            this.sceneHelper.setControlPlaneVisibility(false);\n        }\n    }\n\n    updateSplatSort = function() {\n\n        const mvpMatrix = new THREE.Matrix4();\n        const cameraPositionArray = [];\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\n        const lastSortViewPos = new THREE.Vector3();\n        const sortViewOffset = new THREE.Vector3();\n        const queuedSorts = [];\n\n        const partialSorts = [\n            {\n                'angleThreshold': 0.55,\n                'sortFractions': [0.125, 0.33333, 0.75]\n            },\n            {\n                'angleThreshold': 0.65,\n                'sortFractions': [0.33333, 0.66667]\n            },\n            {\n                'angleThreshold': 0.8,\n                'sortFractions': [0.5]\n            }\n        ];\n\n        return async function(force = false) {\n            if (this.sortRunning) return;\n            if (this.splatMesh.getSplatCount() <= 0) return;\n\n            let angleDiff = 0;\n            let positionDiff = 0;\n            let needsRefreshForRotation = false;\n            let needsRefreshForPosition = false;\n\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n            angleDiff = sortViewDir.dot(lastSortViewDir);\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\n\n            if (!force) {\n                if (!this.sortNeededForSceneChange && !this.splatMesh.dynamicMode && queuedSorts.length === 0) {\n                    if (angleDiff <= 0.99) needsRefreshForRotation = true;\n                    if (positionDiff >= 1.0) needsRefreshForPosition = true;\n                    if (!needsRefreshForRotation && !needsRefreshForPosition) return;\n                }\n            }\n\n            this.sortRunning = true;\n            const { splatRenderCount, shouldSortAll } = this.gatherSceneNodesForSort();\n            this.splatRenderCount = splatRenderCount;\n\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\n            const mvpCamera = this.perspectiveCamera || this.camera;\n            mvpMatrix.premultiply(mvpCamera.projectionMatrix);\n            mvpMatrix.multiply(this.splatMesh.matrixWorld);\n\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\n                await this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\n            }\n\n            if (this.splatMesh.dynamicMode || shouldSortAll) {\n                queuedSorts.push(this.splatRenderCount);\n            } else {\n                if (queuedSorts.length === 0) {\n                    for (let partialSort of partialSorts) {\n                        if (angleDiff < partialSort.angleThreshold) {\n                            for (let sortFraction of partialSort.sortFractions) {\n                                queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\n                            }\n                            break;\n                        }\n                    }\n                    queuedSorts.push(this.splatRenderCount);\n                }\n            }\n            let sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\n\n            cameraPositionArray[0] = this.camera.position.x;\n            cameraPositionArray[1] = this.camera.position.y;\n            cameraPositionArray[2] = this.camera.position.z;\n\n            const sortMessage = {\n                'modelViewProj': mvpMatrix.elements,\n                'cameraPosition': cameraPositionArray,\n                'splatRenderCount': this.splatRenderCount,\n                'splatSortCount': sortCount,\n                'usePrecomputedDistances': this.gpuAcceleratedSort\n            };\n            if (this.splatMesh.dynamicMode) {\n                this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\n            }\n            if (!this.sharedMemoryForWorkers) {\n                sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\n                sortMessage.transforms = this.sortWorkerTransforms;\n                if (this.gpuAcceleratedSort) {\n                    sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\n                }\n            }\n\n            this.sortPromise = new Promise((resolve) => {\n                this.sortPromiseResolver = resolve;\n            });\n\n            this.sortWorker.postMessage({\n                'sort': sortMessage\n            });\n\n            if (queuedSorts.length === 0) {\n                lastSortViewPos.copy(this.camera.position);\n                lastSortViewDir.copy(sortViewDir);\n            }\n\n            this.sortNeededForSceneChange = false;\n        };\n\n    }();\n\n    /**\n     * Determine which splats to render by checking which are inside or close to the view frustum\n     */\n    gatherSceneNodesForSort = function() {\n\n        const nodeRenderList = [];\n        let allSplatsSortBuffer = null;\n        const tempVectorYZ = new THREE.Vector3();\n        const tempVectorXZ = new THREE.Vector3();\n        const tempVector = new THREE.Vector3();\n        const modelView = new THREE.Matrix4();\n        const baseModelView = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const renderDimensions = new THREE.Vector3();\n        const forward = new THREE.Vector3(0, 0, -1);\n\n        const tempMax = new THREE.Vector3();\n        const nodeSize = (node) => {\n            return tempMax.copy(node.max).sub(node.min).length();\n        };\n\n        return function(gatherAllNodes = false) {\n\n            this.getRenderDimensions(renderDimensions);\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\n            const cosFovXOver2 = Math.cos(fovXOver2);\n            const cosFovYOver2 = Math.cos(fovYOver2);\n\n            const splatTree = this.splatMesh.getSplatTree();\n\n            if (splatTree) {\n                baseModelView.copy(this.camera.matrixWorld).invert();\n                baseModelView.multiply(this.splatMesh.matrixWorld);\n\n                let nodeRenderCount = 0;\n                let splatRenderCount = 0;\n\n                for (let s = 0; s < splatTree.subTrees.length; s++) {\n                    const subTree = splatTree.subTrees[s];\n                    modelView.copy(baseModelView);\n                    if (this.splatMesh.dynamicMode) {\n                        this.splatMesh.getSceneTransform(s, sceneTransform);\n                        modelView.multiply(sceneTransform);\n                    }\n                    const nodeCount = subTree.nodesWithIndexes.length;\n                    for (let i = 0; i < nodeCount; i++) {\n                        const node = subTree.nodesWithIndexes[i];\n                        if (!node.data || !node.data.indexes || node.data.indexes.length === 0) continue;\n                        tempVector.copy(node.center).applyMatrix4(modelView);\n\n                        const distanceToNode = tempVector.length();\n                        tempVector.normalize();\n\n                        tempVectorYZ.copy(tempVector).setX(0).normalize();\n                        tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n                        const cameraAngleXZDot = forward.dot(tempVectorXZ);\n                        const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n                        const ns = nodeSize(node);\n                        const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\n                        const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\n                        if (!gatherAllNodes && ((outOfFovX || outOfFovY) && distanceToNode > ns)) {\n                            continue;\n                        }\n                        splatRenderCount += node.data.indexes.length;\n                        nodeRenderList[nodeRenderCount] = node;\n                        node.data.distanceToNode = distanceToNode;\n                        nodeRenderCount++;\n                    }\n                }\n\n                nodeRenderList.length = nodeRenderCount;\n                nodeRenderList.sort((a, b) => {\n                    if (a.data.distanceToNode < b.data.distanceToNode) return -1;\n                    else return 1;\n                });\n\n                let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n                for (let i = 0; i < nodeRenderCount; i++) {\n                    const node = nodeRenderList[i];\n                    const windowSizeInts = node.data.indexes.length;\n                    const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n                    let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer,\n                                                   currentByteOffset - windowSizeBytes, windowSizeInts);\n                    destView.set(node.data.indexes);\n                    currentByteOffset -= windowSizeBytes;\n                }\n\n                return {\n                    'splatRenderCount': splatRenderCount,\n                    'shouldSortAll': false\n                };\n            } else {\n                const totalSplatCount = this.splatMesh.getSplatCount();\n                if (!allSplatsSortBuffer || allSplatsSortBuffer.length !== totalSplatCount) {\n                    allSplatsSortBuffer = new Uint32Array(totalSplatCount);\n                    for (let i = 0; i < totalSplatCount; i++) {\n                        allSplatsSortBuffer[i] = i;\n                    }\n                }\n                this.sortWorkerIndexesToSort.set(allSplatsSortBuffer);\n                return {\n                    'splatRenderCount': totalSplatCount,\n                    'shouldSortAll': true\n                };\n            }\n        };\n\n    }();\n\n    getSplatMesh() {\n        return this.splatMesh;\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.splatMesh.getScene(sceneIndex);\n    }\n\n    isMobile() {\n        return navigator.userAgent.includes('Mobi');\n    }\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0005\u0001|\u0003{\u0002\u0003}\u0002~ \u000b \nk!\f\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \u000e \u0005 \u000eH\u001b!\u000e \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000f\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000\"\u0015A\u0002tj(\u0002\u0000\"\nG\u0004@\u0002~ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001\"\u0011�\u001f\u0002��\u0014 \u0011�\u001f\u0003��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u0019\u0002~ \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012!\u0013\u0002~ \u0011�\u001f\u0000��\u0014 \u0011�\u001f\u0001��\"\u0001 \u0012��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u001a \u0013 \u0019�\u001e\u0001!\u0012\u0002~ \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012 \u001a�\u001e\u0001 \u0012�\r\u0000\u0001\u0002\u0003\b\t\n\u000b\u0010\u0011\u0012\u0013\u0018\u0019\u001a\u001b!\u0012 \n!\u000f\u000b \u0003 \u0014j \u0001 \u0015A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0002\u000b\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \u0002�\u0011 \n�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \u000e \u0002 \u000eH\u001b!\u000e \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0001\u000b \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0001\u000b\u0002@ \u000fE\u0004@ \u000b \fK\r\u0001A����x!\rA����\u0007!\u000e\f\u0002\u000bA����\u0007!\u000eA����x!\r \u000b \fM\r\u0001A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\nG\u0004@ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001!\u0011 \n!\u000f\u000b \u0003 \u0014j\u0002 \u0011 \u0001 \u0015A\u0002t\"\nj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000 \u0012�\u001f\u0001� \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0001 \nA\brj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000� \u0012�\u001f\u0001��D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000b \u0005*\u0002(!\u0016 \u0005*\u0002\u0018!\u0017 \u0005*\u0002\b!\u0018A����\u0007!\u000eA����x!\r \f!\u0005\u0003@\u0002 \u0018 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\u0000� \u0017 \u0002*\u0002\u0004�� \u0016 \u0002*\u0002\b���D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n \u0003 \u0007j \n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \u000e���!\u0016 \f!\r\u0003@\u0002 \u0016 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \u000ek��\"\u0017�C\u0000\u0000\u0000O]\u0004@ \u0017�\f\u0001\u000bA����x\u000b!\n \u0001 \n6\u0002\u0000 \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\u000e\u0003@ \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \u000eA\u0001j\"\u000e \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\u000e\u0003@ \u0006 \u000eA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \u000eA\u0001J!\u0002 \u0001!\u000e \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\u000e\u0003@ \u0006 \u000b \u0004 \u0003 \u000eA\u0001k\"\u000eA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \f \u000eH\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","import * as THREE from 'three';\nimport { Viewer } from './Viewer.js';\n\n/**\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\n * any other Three.js scene object (Mesh, Object3D, etc.)\n */\nexport class DropInViewer extends THREE.Group {\n\n    constructor(options = {}) {\n        super();\n\n        options.selfDrivenMode = false;\n        options.useBuiltInControls = false;\n        options.rootElement = null;\n        options.ignoreDevicePixelRatio = false;\n        options.dropInMode = true;\n        options.camera = undefined;\n        options.renderer = undefined;\n\n        this.viewer = new Viewer(options);\n        this.splatMesh = null;\n\n        this.callbackMesh = DropInViewer.createCallbackMesh();\n        this.add(this.callbackMesh);\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\n\n    }\n\n    /**\n     * Add a single splat scene to the viewer.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n        if (options.showLoadingUI !== false) options.showLoadingUI = true;\n        return this.viewer.addSplatScene(path, options);\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingUI) {\n        if (showLoadingUI !== false) showLoadingUI = true;\n        return this.viewer.addSplatScenes(sceneOptions, showLoadingUI);\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.viewer.getSplatScene(sceneIndex);\n    }\n\n    removeSplatScene(index) {\n        return this.viewer.removeSplatScene(index);\n    }\n\n    dispose() {\n        return this.viewer.dispose();\n    }\n\n    static onBeforeRender(viewer, renderer, threeScene, camera) {\n        if (this.splatMesh !== this.viewer.splatMesh) {\n            if (this.splatMesh) {\n                this.remove(this.splatMesh);\n            }\n            this.splatMesh = this.viewer.splatMesh;\n            this.add(this.viewer.splatMesh);\n        }\n        viewer.update(renderer, camera);\n    }\n\n    static createCallbackMesh() {\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\n        const material = new THREE.MeshBasicMaterial();\n        material.colorWrite = false;\n        material.depthWrite = false;\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.frustumCulled = false;\n        return mesh;\n    }\n\n}\n"],"names":["AbortablePromise","static","constructor","promiseFunc","abortHandler","promiseResolve","promiseReject","this","promise","Promise","resolve","reject","bind","args","error","id","idGen","then","onResolve","onResolveResult","args2","catch","onFail","abort","AbortedPromiseError","Error","msg","super","floatView","Float32Array","int32View","Int32Array","buffer","uintEncodedFloat","f","fetchWithProgress","path","onProgress","saveChunks","abortController","AbortController","signal","aborted","rejectFunc","fetch","async","data","reader","body","getReader","bytesDownloaded","_fileSize","headers","get","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","push","clamp","val","min","max","Math","getCurrentTime","performance","now","disposeAllMeshes","object3D","geometry","dispose","material","children","child","delayedExecute","func","fast","window","setTimeout","getSphericalHarmonicsComponentCountForDegree","sphericalHarmonicsDegree","UncompressedSplatArray","X","Y","Z","SCALE0","SCALE1","SCALE2","ROTATION0","ROTATION1","ROTATION2","ROTATION3","FDC0","FDC1","FDC2","OPACITY","FRC0","FRC1","FRC2","FRC3","FRC4","FRC5","FRC6","FRC7","FRC8","FRC9","FRC10","FRC11","FRC12","FRC13","FRC14","FRC15","FRC16","FRC17","FRC18","FRC19","FRC20","FRC21","FRC22","FRC23","sphericalHarmonicsCount","componentCount","defaultSphericalHarmonics","Array","fill","splats","splatCount","createSplat","baseSplat","shEntries","i","addSplat","splat","getSplat","index","addDefaultSplat","newSplat","addSplatFromComonents","x","y","z","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","opacity","rest","addSplatFromArray","src","srcIndex","srcSplat","Constants","SphericalHarmonics8BitCompressionHalfRange","SphericalHarmonics8BitCompressionRange","toHalfFloat","THREE","DataUtils","toUint8","v","floor","fromHalfFloat","fromHalfFloatToUint8","toUncompressedFloat","compressionLevel","isSH","dataViewFloatForCompressionLevel","dataView","floatIndex","getFloat32","getUint16","getUint8","SplatBuffer","BytesPerCenter","BytesPerScale","BytesPerRotation","BytesPerColor","ScaleOffsetBytes","RotationffsetBytes","ColorOffsetBytes","SphericalHarmonicsOffsetBytes","ScaleRange","BytesPerSphericalHarmonicsComponent","SphericalHarmonicsOffsetFloat","SphericalHarmonicsDegrees","BytesPerSplat","bufferData","secLoadedCountsToMax","constructFromBuffer","getSplatCount","getMaxSplatCount","maxSplatCount","getMinSphericalHarmonicsDegree","minSphericalHarmonicsDegree","sections","section","getBucketIndex","localSplatIndex","bucketIndex","maxSplatIndexInFullBuckets","fullBucketCount","bucketSize","bucketSplatIndex","partiallyFullBucketIndex","currentPartiallyFilledBucketSize","partiallyFilledBucketLengths","getSplatCenter","globalSplatIndex","outCenter","transform","sectionIndex","globalSplatIndexToSectionMap","splatCountOffset","srcSplatCentersBase","bytesPerSplat","DataView","dataBase","bucketBase","BucketStorageSizeFloats","sf","compressionScaleFactor","sr","compressionScaleRange","bucketArray","applyMatrix4","getSplatScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","Vector3","scale","rotation","Quaternion","outScale","outRotation","srcSplatScalesBase","CompressionLevels","set","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getSplatColor","outColor","srcSplatColorsBase","splatColorsArray","Uint8Array","fillSplatCenterArray","outCenterArray","srcFrom","srcTo","destFrom","center","centerDestBase","CenterComponentCount","tempMatrix4","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","outCovariance","outOffset","desiredOutputCompressionLevel","setFromMatrix4","transpose","premultiply","elements","fillSplatCovarianceArray","covarianceArray","covarianceDestBase","CovarianceComponentCount","computeCovariance","fillSplatColorArray","outColorArray","minimumAlpha","colorDestBase","ColorComponentCount","alpha","fillSphericalHarmonicsArray","sphericalHarmonicVectors","tempMatrix3","sh11","sh12","sh13","sh21","sh22","sh23","sh24","sh25","shIn1","shIn2","shIn3","shIn4","shIn5","shOut1","shOut2","shOut3","shOut4","shOut5","noop","set3","array","val1","val2","val3","set3FromArray","srcDestView","stride","srcBase","copy3","srcArray","destArray","setOutput3","destBase","conversionFunc","toUncompressedFloatArray3","dest","outSphericalHarmonicsArray","outSphericalHarmonicsDegree","outSphericalHarmonicsComponentsCount","srcSplatSHBase","shDestBase","compressionLevelForOutputConversion","outputConversionFunc","rotateSphericalHarmonics3","rotateSphericalHarmonics5","v1","v2","v3","transformRow","outArray","t0","t1","t2","addInto3","v4","v5","t3","t4","in1","in2","in3","tsh11","tsh12","tsh13","out1","out2","out3","dot3","in4","in5","tsh21","tsh22","tsh23","tsh24","tsh25","out4","out5","kSqrt0104","sqrt","kSqrt0304","kSqrt0103","kSqrt0403","kSqrt0112","dot5","parseHeader","headerArrayUint8","HeaderSizeBytes","headerArrayUint16","Uint16Array","headerArrayUint32","Uint32Array","headerArrayFloat32","versionMajor","versionMinor","maxSectionCount","sectionCount","sceneCenter","writeHeaderCountsToBuffer","writeHeaderToBuffer","header","parseSectionHeaders","offset","sectionHeaderArrayUint16","SectionHeaderSizeBytes","sectionHeaderArrayUint32","sectionHeaderArrayFloat32","sectionHeaders","sectionHeaderBase","sectionHeaderBaseUint16","sectionHeaderBaseUint32","sectionBase","bucketCount","bucketBlockSize","halfBucketBlockSize","bucketStorageSizeBytes","partiallyFilledBucketCount","bucketsMetaDataSizeBytes","bucketsStorageSizeBytes","calculateComponentStorage","splatDataStorageSizeBytes","storageSizeBytes","sectionHeader","base","bucketsBase","writeSectionHeaderToBuffer","sectionHeadeArrayUint16","sectionHeadeArrayUint32","sectionHeadeArrayFloat32","BucketStorageSizeBytes","writeSectionHeaderSplatCountToBuffer","globalSplatIndexToLocalSplatIndexMap","linkBufferArrays","buildMaps","bytesPerCenter","bytesPerScale","bytesPerRotation","bytesPerColor","sphericalHarmonicsComponentsPerSplat","sphericalHarmonicsBytesPerSplat","cumulativeSplatCount","j","updateLoadedCounts","newSectionCount","newSplatCount","updateSectionLoadedCounts","sectionHeaderOffset","generateFromUncompressedSplatArrays","splatArrays","blockSize","options","copyBetweenBuffers","srcBuffer","srcOffset","destBuffer","destOffset","byteCount","sa","splatArray","sectionBuffers","sectionHeaderBuffers","totalSplatCount","tempRotation","sectionOptions","sectionBlockSize","blockSizeFactor","BucketBlockSize","sectionBucketSize","ceil","bucketSizeFactor","BucketSize","validSplats","targetSplat","OFFSET","bucketInfo","computeBucketsForUncompressedSplatArray","fullBuckets","partiallyFullBucketLengths","partiallyFullBuckets","map","bucket","buckets","sectionDataSizeBytes","bucketMetaDataSizeBytes","bucketDataBytes","sectionSizeBytes","sectionBuffer","ArrayBuffer","doubleCompressionScaleRange","tempCenterBuffer","tempScaleBuffer","tempRotationBuffer","tempColorBuffer","tempSHBuffer","bucketCenter","bucketCenterDelta","outSplatCount","fromArray","row","centerBase","scaleBase","rotationBase","colorBase","sphericalHarmonicsBase","rot","RotationComponentCount","ScaleComponentCount","normalize","w","shOut","s","sub","round","bytesPerSHComponent","srcVal","degree1ByteCount","degree2ByteCount","rgba","Uint8ClampedArray","bucketMetaDataArray","pfb","sectionHeaderBuffer","sectionsCumulativeSizeBytes","byteLength","unifiedBufferSize","unifiedBuffer","currentUnifiedBase","halfBlockSize","dimensions","yBlocks","zBlocks","blockCenter","xBlock","yBlock","zBlock","bucketId","toArray","partiallyFullBucketArray","hasOwnProperty","HeaderMagicBytes","HeaderEndTokenBytes","HeaderEndToken","DataTypeMap","Map","Int8Array","Int16Array","Float64Array","unpackUnorm","bits","t","unpack111011","result","lerp","a","getElementPropStorage","element","name","properties","find","p","storage","CompressedPlyParser","decodeHeaderText","headerText","chunkElement","vertexElement","headerLines","split","filter","line","startsWith","words","count","has","StorageType","storageSizeByes","BYTES_PER_ELEMENT","type","byteSize","headerSizeBytes","indexOf","decodeHeader","plyBuffer","endHeaderTokenOffset","buf","search","endIndex","TextDecoder","decode","slice","readElementData","readBuffer","readOffset","fromIndex","toIndex","propertyFilter","e","property","requiredStorageSizeBytes","getInt8","getInt16","getInt32","getUint32","getFloat64","readPly","readIndex","getElementStorageArrays","minX","minY","minZ","maxX","maxY","maxZ","minScaleX","minScaleY","minScaleZ","positionExtremes","scaleExtremes","maxScaleX","maxScaleY","maxScaleZ","position","color","c","Vector4","chunkSplatIndexOffset","positionArray","scaleArray","rotationArray","colorArray","outSplat","chunkIndex","norm","m","unpackRot","exp","parseToUncompressedSplatBufferSection","vertexDataBuffer","veretxReadOffset","outBuffer","outBytesPerCenter","outBytesPerScale","outBytesPerRotation","outBytesPerSplat","tempSplat","decompressSplat","outBase","parseToUncompressedSplatArray","identity","PlyParser","from","BaseFields","SphericalHarmonicsFields","checkTextForEndHeader","endHeaderTestText","includes","checkBufferForEndHeader","searchOfset","chunkSize","decoder","endHeaderTestChunk","prunedLines","propertyTypes","compressed","trim","match","splatCountMatch","propertyMatch","propertyType","fieldOffsets","fieldSize","double","int","uint","float","short","ushort","uchar","fieldNames","fieldName","sphericalHarmonicsFieldCount","sphericalHarmonicsCoefficientsPerChannel","sphericalHarmonicsDegree1Fields","rgb","sphericalHarmonicsDegree2Fields","decodeHeadeFromBuffer","headerOffset","readChunkSize","headerChunk","findVertexData","readRawVertexFast","vertexData","propertiesToRead","outVertex","rawVertex","fromSplat","toSplat","vertexDataOffset","toBuffer","toOffset","outBytesPerColor","parsedSplat","parseToUncompressedSplat","outSphericalHarmonics","Fields","SH_C0","SplatPartitioner","sectionFilters","groupingParameters","partitionGenerator","partitionUncompressedSplatArray","results","newArrays","sectionSplats","sectionFilter","parameters","getStandardPartitioner","partitionSize","centerA","centerB","clampDistance","clampPoint","point","sort","centerADist","lengthSq","patitionCount","currentStartSplat","startSplat","splatIndex","blocksSize","SplatBufferGenerator","splatPartitioner","alphaRemovalThreshold","sectionSize","generateFromUncompressedSplatArray","partitionResults","getStandardGenerator","LoaderStatus","storeChunksInBuffer","inBytes","sizeBytes","PlyLoader","loadFromURL","fileName","streamLoadData","onStreamedSectionProgress","streamedSectionSizeBytes","StreamingSectionSize","splatDataOffsetBytes","streamBufferIn","streamBufferOut","streamedSplatBuffer","compressedPlyHeaderChunksBuffer","streamLoadCompleteResolver","headerLoaded","readyToLoadSplatData","streamLoadPromise","numBytesStreamed","numBytesParsed","numBytesDownloaded","textDecoder","chunkData","loadComplete","startBytes","endBytes","sizeRequiredForHeaderAndChunks","shDescriptor","splatBufferSizeBytes","CurrentMajorVersion","CurrentMinorVersion","numBytesToProcess","addedSplatCount","numBytesToParse","numBytesLeftOver","parsedDataViewOffset","dataToParse","keepChunks","keepSize","unshift","plyFileData","loadFromFileData","splatBuffer","SplatParser","fromBuffer","fromOffset","inBase","RowSizeBytes","inCenter","inScale","CenterSizeBytes","inColor","ScaleSizeBytes","inRotation","RotationSizeBytes","quat","parseStandardSplatToUncompressedSplatArray","inBuffer","ColorSizeBytes","SplatLoader","optimizeSplatData","streamSectionSizeBytes","streamSplatBuffer","numBytesLoaded","percentStr","bytesLoadedSinceLastSection","fullBuffer","splatFileData","KSplatLoader","checkVersion","minVersionMajor","minVersionMinor","onSectionBuilt","streamBuffer","headerBuffer","sectionHeadersBuffer","headerLoading","sectionHeadersLoaded","sectionHeadersLoading","totalBytesToDownload","queuedCheckAndLoadSectionsCount","checkAndLoadSectionHeaders","performLoad","totalSectionStorageStorageByes","totalStorageSizeBytes","checkAndLoadSections","baseDataOffset","reachedSections","loadedSplatCount","bytesRequiredToReachSectionSplatData","bytesPastSSectionSplatDataStart","loadedSplatsForSection","fileData","downLoadLink","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","SceneFormat","Splat","KSplat","Ply","sceneFormatFromPath","endsWith","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","style","touchAction","enabled","target","minDistance","maxDistance","minZoom","maxZoom","Infinity","minPolarAngle","PI","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","clearDampedRotation","clearDampedPan","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","sphericalDelta","panOffset","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","isFinite","makeSafe","addScaledVector","add","performCursorZoom","isOrthographicCamera","radius","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","console","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","quaternion","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","pow","angle","rotateUp","panLeft","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","container","taskIDGen","elementID","elementIDGen","tasks","spinnerContainerOuter","className","display","spinnerContainerPrimary","spinnerPrimary","classList","messageContainerPrimary","innerHTML","spinnerContainerMin","spinnerMin","messageContainerMin","setMinimized","fadeTransitions","addTask","newTask","removeTask","task","removeAllTasks","setMessageForTask","show","setMessage","hide","visible","setContainer","removeChild","zIndex","minimized","instant","showHideSpinner","displayStyle","fadeTransitionsIndex","out","duration","onComplete","startTime","startOpacity","parseFloat","isNaN","interval","setInterval","elapsed","clearInterval","fadeElement","LoadingProgressBar","progressBarContainerOuter","progressBarBox","progressBarBackground","progressBar","setProgress","progress","InfoPanel","infoCells","layout","infoPanelContainer","append","infoPanel","infoTable","layoutEntry","labelCell","spacerCell","infoCell","renderDimensions","cameraPosition","cameraLookAtPosition","cameraUp","orthographicCamera","meshCursorPosition","currentFPS","splatRenderCount","splatRenderCountPct","lastSortTime","focalAdjustment","splatScale","pointCloudMode","cameraPosString","cla","cameraLookAtString","cameraLookAt","cameraUpString","cursPos","cursorPosString","cursorPosition","fps","renderWindow","renderSplatCount","sortTime","ArrowHelper","Object3D","dir","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","_axis","radians","acos","setFromAxisAngle","setColor","source","SceneHelper","threeScene","splatRenderTarget","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","debugRoot","secondaryDebugRoot","updateSplatRenderTargetForRenderDimensions","destroySplatRendertarget","WebGLRenderTarget","format","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","renderTargetCopyMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","destroyRenderTargetCopyObjects","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","destroyMeshCursor","remove","setMeshCursorVisibility","getMeschCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","destroyFocusMarker","updateFocusMarker","toCamera","viewport","matrixWorld","toCameraDistance","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","destroyControlPlane","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","createDebugMeshes","createSecondaryDebugMeshes","destroyDebugMeshes","renderOrder","debugMeshRoot","createMesh","sphereMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","Hit","hitClone","Raycaster","raycastAgainstTrueSplatEllipsoid","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","sceneTransform","localRay","tempPoint","splatMesh","outHits","splatTree","getSplatTree","subTrees","subTree","dynamicMode","getSceneTransform","outHitsForSubTree","rootNode","castRayAtSplatTreeNode","forEach","hit","tempColor","tempCenter","tempScale","tempHit","scaleEpsilon","uniformScaleMatrix","toSphereSpace","fromSphereSpace","tempRay","node","boundingBox","indexes","splatGlobalIndex","uniformScale","log10","SplatScene","updateTransform","copyTransformData","otherScene","compose","SplatTreeNode","depth","Box3","SplatSubTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","nodesWithIndexes","convertWorkerSubTreeNode","workerSubTreeNode","minVector","maxVector","convertedNode","convertWorkerSubTree","workerSubTree","convertedSubTree","visitLeavesFromNode","visitFunc","createSplatTreeWorker","self","WorkerSplatTreeNodeIDGen","WorkerBox3","containsPoint","WorkerSplatSubTree","addedIndexes","disposed","WorkerSplatTreeNode","processSplatTreeNode","tree","indexToCenter","sceneCenters","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","childNode","buildSubTree","centerCount","onmessage","process","allCenters","postMessage","createSplatTree","centers","SplatTree","diposeSplatTreeWorker","splatTreeWorker","terminate","processSplatMesh","filterFunc","onIndexesUpload","onSplatTreeConstruction","Worker","toString","addCentersForScene","splatOffset","addedCount","addBase","checkForEarlyExit","scenes","getScene","transferBuffers","workerProcessCenters","countLeaves","leafCount","visitLeaves","WebGLExtensions","gl","getExtension","extension","init","capabilities","isWebGL2","WebGLCapabilities","maxAnisotropy","getMaxPrecision","precision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","maxPrecision","drawBuffers","logarithmicDepthBuffer","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","MAX_SAMPLES","SceneRevealMode","Default","Gradual","Instant","LogLevel","None","Warning","Info","Debug","dummyGeometry","BufferGeometry","dummyMaterial","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","integerBasedDistancesComputation","antialiased","maxScreenSpaceSplatSize","logLevel","renderer","baseSplatTree","splatDataTextures","distancesTransformFeedback","program","centersBuffer","transformIndexesBuffer","outDistancesBuffer","centersLoc","modelViewProjLoc","transformIndexesLoc","transformsLocs","globalSplatIndexToSceneIndexMap","lastBuildSplatCount","lastBuildScenes","lastBuildMaxSplatCount","lastBuildSceneCount","firstRenderTime","finalBuild","webGLUtils","calculatedSceneCenter","maxSplatDistanceFromSceneCenter","visibleRegionBufferRadius","visibleRegionRadius","visibleRegionFadeStartRadius","visibleRegionChanging","pointCloudModeEnabled","lastRenderer","buildMaterial","maxSphericalHarmonicsDegree","vertexShaderSource","MaxScenes","fadeInComplete","orthographicMode","currentTime","covariancesTexture","centersColorsTexture","sphericalHarmonicsTexture","focal","orthoZoom","inverseFocalAdjustment","basisViewport","debugColor","covariancesTextureSize","centersColorsTextureSize","sphericalHarmonicsTextureSize","sphericalHarmonics8BitMode","transformMatrices","alphaTest","NormalBlending","buildGeomtery","baseGeometry","setIndex","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","buildScenes","splatBuffers","sceneOptions","createScene","splatAlphaRemovalThreshold","buildSplatIndexMaps","localSplatIndexMap","sceneIndexMap","buildSplatTree","minAlphas","onSplatTreeIndexesUpload","disposeSplatTree","buildStartTime","splatColor","sceneIndex","getSceneIndexForSplat","minAlpha","buildTime","log","leavesWithVertices","avgSplatCount","nodeCount","nodeSplatCount","build","keepSceneTransforms","getTotalMaxSplatCountForSplatBuffers","newScenes","newScene","existingScene","splatBufferSphericalHarmonicsDegree","splatBuffersChanged","isUpdateBuild","disposeMeshData","indexMaps","setupDistancesComputationTransformFeedback","dataUpdateResults","refreshGPUDataFromSplatBuffers","onSplatTreeReadyCallback","disposeTextures","computeDistancesOnGPUSyncTimeout","clearTimeout","disposeDistancesComputationGPUResources","textureKey","textureContainer","texture","onSplatTreeReady","callback","getDataForDistancesComputation","start","end","getIntegerCenters","getFloatCenters","sceneIndexes","getSceneIndexes","sinceLastBuildOnly","refreshDataTexturesFromSplatBuffers","updateStart","refreshGPUBuffersForDistancesComputation","to","updateGPUCentersBufferForDistancesComputation","updateGPUTransformIndexesBufferForDistancesComputation","updateDataTextures","setupDataTextures","updateVisibleRegion","computeDataTextureSize","elementsPerTexel","elementsPerSplatl","texSize","covarianceCompressionLevel","getTargetCovarianceCompressionLevel","sphericalHarmonicsCompressionLevel","getTargetSphericalHarmonicsCompressionLevel","covariances","colors","SphericalHarmonicsArrayType","sphericalHarmonicsComponentCount","paddedSphericalHarmonicsComponentCount","sphericalHarmonics","fillSplatDataArrays","covTexSize","CovariancesDataType","covariancesTextureType","HalfFloatType","FloatType","paddedCovariances","covTex","DataTexture","centersColsTexSize","paddedCentersCols","updateCenterColorsPaddedData","centersColsTex","RGBAIntegerFormat","internalFormat","baseData","size","centerColors","sphericalHarmonicsElementsPerTexel","sphericalHarmonicsTexSize","paddedSHArray","textureType","UnsignedByteType","sphericalHarmonicsTex","paddedComponentCount","transformIndexesTexSize","paddedTransformIndexes","transformIndexesTexture","RedIntegerFormat","transformIndexesTextureSize","sphericalHarmonicsTextureDesc","covariancesTextureDescriptor","covariancesEndSplat","covariance","covariancesTextureProps","__webglTexture","covaranceBytesPerElement","updateDataTexture","centerColorsTextureDescriptor","paddedCenterColors","centerColorsTexture","centerColorsTextureProps","sphericalHarmonicsTextureProps","sphericalHarmonicsBytesPerElement","transformIndexesTexDesc","transformIndexesTextureProps","getMaximumSplatBufferCompressionLevel","maxCompressionLevel","getMinimumSplatBufferCompressionLevel","minCompressionLevel","computeTextureUpdateRegion","endSplat","textureWidth","elementsPerSplat","texelsPerSplat","startSplatTexels","startRow","startRowElement","endSplatTexels","endRow","dataStart","dataEnd","paddedData","textureDesc","textureProps","bytesPerElement","getContext","updateRegion","updateElementCount","updateDataView","updateHeight","dataTexture","glType","convert","glFormat","colorSpace","currentTexture","TEXTURE_BINDING_2D","bindTexture","TEXTURE_2D","texSubImage2D","colorsBase","centersBase","centerColorsBase","arr","avgCenter","scene","distFromCSceneCenter","updateVisibleRegionFadeDistance","sceneRevealMode","defaultFadeInRate","fadeInRate","shaderFadeInComplete","updateRenderIndexes","globalIndexes","attributes","updateTransforms","updateUniforms","cameraFocalLengthX","cameraFocalLengthY","orthographicZoom","transforms","setSplatScale","getSplatScale","setPointCloudModeEnabled","getPointCloudModeEnabled","getSplatDataTextures","getTotalSplatCountForScenes","getTotalSplatCountForSplatBuffers","getTotalMaxSplatCountForScenes","vao","deleteVertexArray","deleteProgram","deleteShader","disposeDistancesComputationGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","WebGLUtils","currentMaxSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","errors","getShaderInfoLog","vsSource","currentVao","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","currentProgramDeleted","getProgramParameter","DELETE_STATUS","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","vertexAttribPointer","FLOAT","UNSIGNED_INT","STATIC_READ","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","isUpdate","offsetSplats","ArrayType","subBufferOffset","bufferSubData","maxArray","STATIC_DRAW","transformIndexes","fillTransformsArray","tempArray","sceneTransformElements","computeDistancesOnGPU","modelViewProjMatrix","outComputedDistances","enable","RASTERIZER_DISCARD","iTempMatrix","getIntegerMatrixArray","iTransform","uniform4i","uniformMatrix4fv","iViewProjMatrix","iViewProj","uniform3i","viewProj","uniform3f","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","checkSync","timeout","bitflags","clientWaitSync","TIMEOUT_EXPIRED","WAIT_FAILED","deleteSync","getBufferSubData","getLocalSplatParameters","globalIndex","paramsObj","returnSceneTransform","getSplatBufferForSplat","localIndex","getSplatLocalIndex","getSceneTransformForSplat","applySceneTransform","srcStart","srcEnd","destStart","padFour","floatCenters","intCenters","paddedFloatCenters","outTransform","matrixElements","intMatrixArray","sortWorker","wasmInstance","wasmMemory","useSharedMemory","integerBasedSort","indexesToSortOffset","sortedIndexesOffset","transformIndexesOffset","transformsOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","modelViewProjOffset","countsZero","sortedIndexesOut","range","BytesPerInt","BytesPerFloat","centerDataSet","renderCount","sortCount","splatSortCount","usePrecomputedDistances","copyIndexesToSort","copyPrecomputedDistances","copyTransforms","indexesToSort","precomputedDistances","modelViewProj","sortStartTime","DepthMapRange","exports","sortIndexes","sortMessage","sortDone","sortedIndexes","sortEndTime","CENTERS_BYTES_PER_ENTRY","sorterWasmBytes","matrixSize","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForModelViewProjectionMatrix","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","memoryRequiredforTransformIndexes","memoryRequiredforTransforms","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","transformsBuffer","WebXRMode","VR","AR","VRButton","createButton","disableButton","cursor","onmouseenter","onmouseleave","onclick","stylizeElement","padding","border","borderRadius","background","font","textAlign","outline","navigator","xr","isSessionSupported","supported","currentSession","onSessionStarted","session","onSessionEnded","setSession","textContent","sessionInit","optionalFeatures","requestSession","offerSession","err","showEnterVR","xrSessionIsGranted","exception","isSecureContext","location","replace","textDecoration","registerSessionGrantedListener","test","userAgent","ARButton","domOverlay","overlay","svg","createElementNS","root","setReferenceSpaceType","showStartAR","RenderMode","Always","OnChange","Never","Viewer","initialCameraPosition","initialCameraLookAt","dropInMode","selfDrivenMode","selfDrivenUpdateFunc","selfDrivenUpdate","useBuiltInControls","rootElement","ignoreDevicePixelRatio","gpuAcceleratedSort","sharedMemoryForWorkers","dynamicScene","webXRMode","webXRActive","renderMode","createSplatMesh","controls","perspectiveControls","orthographicControls","perspectiveCamera","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","sortWorkerTransforms","runAfterFirstSort","selfDrivenModeRunning","splatRenderReady","raycaster","startInOrthographicMode","consecutiveRenderFrames","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","resizeObserver","mouseMoveListener","mouseDownListener","mouseUpListener","keyDownListener","sortPromise","sortPromiseResolver","splatSceneDownloadPromises","splatSceneDownloadAndBuildPromise","splatSceneRemovalPromise","loadingSpinner","loadingProgressBar","usingExternalCamera","usingExternalRenderer","initialized","disposing","frustumCulled","parentElement","setupCamera","setupRenderer","setupWebXR","setupControls","setupEventHandlers","Scene","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","setPixelRatio","autoClear","setClearColor","setSize","ResizeObserver","forceRenderNextFrame","observe","onMouseUp","removeEventHandlers","setRenderMode","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","setOrthographicMode","offsetX","offsetY","clickOffset","onMouseClick","checkForFocalPointChange","toNewFocalPoint","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","fromCamera","resetControls","fromControls","toControls","setCameraZoomFromPosition","setCameraPositionFromZoom","tempVector","positionCamera","zoomedCamera","toLookAtDistance","negate","zoomCamera","positionZamera","updateSplatMesh","focalLengthX","projectionMatrix","focalLengthY","focalMultiplier","adjustForWebXRStereo","xrCameraProj00","getCamera","cameraProj00","isLoadingOrUnloading","Object","isDisposingOrDisposed","addSplatSceneDownloadPromise","removeSplatSceneDownloadPromise","setSplatSceneDownloadAndBuildPromise","clearSplatSceneDownloadAndBuildPromise","addSplatScene","streamBuildSections","isStreamable","streamView","showLoadingUI","loadingUITaskId","onProgressUIUpdate","percentComplete","percentCompleteLabel","loaderStatus","suffix","downloadDone","downloadedPercentage","splatBuffersAddedUIUpdate","firstBuild","downloadAndBuildSingleSplatSceneStreaming","downloadAndBuildSingleSplatSceneNonStreaming","addSplatBufferOptions","orientation","addSplatBuffers","buildFunc","onException","downloadPromise","downloadSplatSceneToSplatBuffer","onDownloadProgress","onDownloadException","firstStreamedSectionDownloadAndBuildResolver","firstStreamedSectionDownloadAndBuildRejecter","splatSceneDownloadAndBuildResolver","splatSceneDownloadAndBuildRejecter","steamedSectionBuildCount","streamedSectionBuilding","queuedStreamedSectionBuilds","checkAndBuildStreamedSections","queuedBuild","shift","splatSceneDownloadPromise","firstStreamedSectionBuildPromise","resolver","rejecter","addSplatScenes","fileCount","onLoadProgress","fileIndex","totalPercent","downloadPromises","nativeLoadPromises","abortHandlers","all","finally","streamBuiltSections","splatBufferOptions","showLoadingUIForSplatTreeBuild","splatProcessingTaskId","finish","buildResults","sortNeededForSceneChange","addSplatBuffersToMesh","disposeSortWorker","setupSortWorker","allSplatBuffers","allSplatBufferOptions","splatOptimizingTaskId","finished","DistancesArrayType","worker","sorterWasmBinaryString","atob","charCodeAt","createSortWorker","sortCanceled","removeSplatScene","revmovalTaskId","checkAndHideLoadingUI","onDone","savedSplatBuffers","savedSceneOptions","savedSceneTransformComponents","savedVisibleRegionFadeStartRadius","updateSplatSort","setAnimationLoop","requestFrameId","requestAnimationFrame","stop","cancelAnimationFrame","waitPromises","promisesToAbort","promiseKey","downloadPromiseToAbort","disposePromise","unobserve","toAbort","shouldRender","render","renderNextFrame","lastCameraPosition","lastCameraOrientation","changeEpsilon","cameraChanged","cp","co","savedAuoClear","hasRenderables","updateForDropInMode","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfoPanel","updateControlPlane","lastCalcTime","frameCount","lastRendererSize","currentRendererSize","lastCameraOrthographic","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","mvpMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedSorts","partialSorts","angleThreshold","sortFractions","force","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","shouldSortAll","gatherSceneNodesForSort","mvpCamera","partialSort","sortFraction","nodeRenderList","allSplatsSortBuffer","tempVectorYZ","tempVectorXZ","modelView","baseModelView","tempMax","nodeSize","gatherAllNodes","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","getSplatMesh","getSplatScene","isMobile","DropInViewer","Group","viewer","callbackMesh","createCallbackMesh","onBeforeRender","colorWrite","mesh"],"mappings":"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"}